
Term_Proj_2_Elec_Bugalu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  0000a174  2**0
                  CONTENTS
  4 .ARM          00000008  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008224  08008224  0000a174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800822c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000174  080083a0  0000a174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  080083a0  0000a62c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0e9  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003560  00000000  00000000  0002528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  000287f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a190  00000000  00000000  0002b19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbdc  00000000  00000000  0005532f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108e2b  00000000  00000000  00072f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bd36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  0017bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00182628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008128 	.word	0x08008128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08008128 	.word	0x08008128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <run>:
 * @param measured The value measured by the sensor to be fed back into the controller
 *
 * @return eff The effort/output calculated by the Controller to send to the actuator
 * @attention This function should be run at a rate slower than 1ms so as to not have zero time differential (if you are not using derivative control you can run at whatever speed you desire.)
 */
uint32_t run(CLController* con,  int32_t measured){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	//! store the sensor value as the current value
	con->curr = measured;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	619a      	str	r2, [r3, #24]
	//! get the current time of simulation.
	con->curr_time = HAL_GetTick();
 8000570:	f001 fb78 	bl	8001c64 <HAL_GetTick>
 8000574:	4602      	mov	r2, r0
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	62da      	str	r2, [r3, #44]	@ 0x2c
	//! calculate the error between the setpoint and the measured value
	con->err = con->setpoint - con->curr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691a      	ldr	r2, [r3, #16]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	61da      	str	r2, [r3, #28]
	//! add this error to the accumulated error, but only if integral control has been implemented.
	if(con->ki > 0){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <run+0x3e>
		con->err_acc = con->err_acc + con->err;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6a1a      	ldr	r2, [r3, #32]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	441a      	add	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	621a      	str	r2, [r3, #32]
	}
	//! set the effort to be the proportional control plus integral control plus feed-forward control
	con->eff = (con->kf * con->setpoint)/1000000 + (con->kp * con->err)/1000000 + (con->ki * con->err_acc)/1000000;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6912      	ldr	r2, [r2, #16]
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000694 <run+0x134>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	0c9a      	lsrs	r2, r3, #18
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	69c9      	ldr	r1, [r1, #28]
 80005ba:	fb01 f303 	mul.w	r3, r1, r3
 80005be:	4935      	ldr	r1, [pc, #212]	@ (8000694 <run+0x134>)
 80005c0:	fba1 1303 	umull	r1, r3, r1, r3
 80005c4:	0c9b      	lsrs	r3, r3, #18
 80005c6:	441a      	add	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	6a09      	ldr	r1, [r1, #32]
 80005d0:	fb01 f303 	mul.w	r3, r1, r3
 80005d4:	492f      	ldr	r1, [pc, #188]	@ (8000694 <run+0x134>)
 80005d6:	fba1 1303 	umull	r1, r3, r1, r3
 80005da:	0c9b      	lsrs	r3, r3, #18
 80005dc:	4413      	add	r3, r2
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	615a      	str	r2, [r3, #20]
	//! if derivative control is enabled, add the current error to the list of errors and increment the index
	if(con->kd > 0){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d011      	beq.n	8000610 <run+0xb0>
		con->prev_err_list[con->prev_err_index] = con->err;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	69d9      	ldr	r1, [r3, #28]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	320e      	adds	r2, #14
 80005fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		con->prev_err_index += 1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000606:	3301      	adds	r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	//! if the list of errors is full, calculate the slope of the list and multiply it by the derivative constant and add it to the effort
	if(con->kd > 0 && con->prev_err_index >= con->prev_err_list_length){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d036      	beq.n	8000686 <run+0x126>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000624:	429a      	cmp	r2, r3
 8000626:	d32e      	bcc.n	8000686 <run+0x126>
		con->slope = ((con->prev_err_list[con->prev_err_index-1]-con->prev_err_list[0]))*1000/(con->curr_time - con->initial_time);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	320e      	adds	r2, #14
 8000634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	fbb1 f3f3 	udiv	r3, r1, r3
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	631a      	str	r2, [r3, #48]	@ 0x30
		con->eff += con->kd * con->slope;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	440b      	add	r3, r1
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	615a      	str	r2, [r3, #20]
		con->prev_err_index = 0;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		con->initial_time = con->curr_time;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	return con->eff;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	695b      	ldr	r3, [r3, #20]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	431bde83 	.word	0x431bde83

08000698 <display_note>:
 *  @param disp The display instance
 *  @param note The note to be displayed from 0-11.
 *  @return curr_note The note that is displayed.
 *  @attention The Current function uses uart to display the current note, but at the end would use i2c to the driver.
 */
uint8_t display_note(Display* disp, uint8_t note){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	if(disp->curr_note == note){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	78fa      	ldrb	r2, [r7, #3]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d102      	bne.n	80006b4 <display_note+0x1c>
		return disp->curr_note;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	e06f      	b.n	8000794 <display_note+0xfc>
	}
	disp->curr_note = note;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	78fa      	ldrb	r2, [r7, #3]
 80006b8:	711a      	strb	r2, [r3, #4]
	switch(disp->curr_note){
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	2b0b      	cmp	r3, #11
 80006c0:	d856      	bhi.n	8000770 <display_note+0xd8>
 80006c2:	a201      	add	r2, pc, #4	@ (adr r2, 80006c8 <display_note+0x30>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	080006f9 	.word	0x080006f9
 80006cc:	08000703 	.word	0x08000703
 80006d0:	0800070d 	.word	0x0800070d
 80006d4:	08000717 	.word	0x08000717
 80006d8:	08000721 	.word	0x08000721
 80006dc:	0800072b 	.word	0x0800072b
 80006e0:	08000735 	.word	0x08000735
 80006e4:	0800073f 	.word	0x0800073f
 80006e8:	08000749 	.word	0x08000749
 80006ec:	08000753 	.word	0x08000753
 80006f0:	0800075d 	.word	0x0800075d
 80006f4:	08000767 	.word	0x08000767
			case 0:
				sprintf(Pitch_Buffer, "A  \r\n");
 80006f8:	4928      	ldr	r1, [pc, #160]	@ (800079c <display_note+0x104>)
 80006fa:	4829      	ldr	r0, [pc, #164]	@ (80007a0 <display_note+0x108>)
 80006fc:	f007 f874 	bl	80077e8 <siprintf>
				break;
 8000700:	e036      	b.n	8000770 <display_note+0xd8>
			case 1:
				sprintf(Pitch_Buffer, "Bb \r\n");
 8000702:	4928      	ldr	r1, [pc, #160]	@ (80007a4 <display_note+0x10c>)
 8000704:	4826      	ldr	r0, [pc, #152]	@ (80007a0 <display_note+0x108>)
 8000706:	f007 f86f 	bl	80077e8 <siprintf>
				break;
 800070a:	e031      	b.n	8000770 <display_note+0xd8>
			case 2:
				sprintf(Pitch_Buffer, "B  \r\n");
 800070c:	4926      	ldr	r1, [pc, #152]	@ (80007a8 <display_note+0x110>)
 800070e:	4824      	ldr	r0, [pc, #144]	@ (80007a0 <display_note+0x108>)
 8000710:	f007 f86a 	bl	80077e8 <siprintf>
				break;
 8000714:	e02c      	b.n	8000770 <display_note+0xd8>
			case 3:
				sprintf(Pitch_Buffer, "C  \r\n");
 8000716:	4925      	ldr	r1, [pc, #148]	@ (80007ac <display_note+0x114>)
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <display_note+0x108>)
 800071a:	f007 f865 	bl	80077e8 <siprintf>
				break;
 800071e:	e027      	b.n	8000770 <display_note+0xd8>
			case 4:
				sprintf(Pitch_Buffer, "Db \r\n");
 8000720:	4923      	ldr	r1, [pc, #140]	@ (80007b0 <display_note+0x118>)
 8000722:	481f      	ldr	r0, [pc, #124]	@ (80007a0 <display_note+0x108>)
 8000724:	f007 f860 	bl	80077e8 <siprintf>
				break;
 8000728:	e022      	b.n	8000770 <display_note+0xd8>
			case 5:
				sprintf(Pitch_Buffer, "D  \r\n");
 800072a:	4922      	ldr	r1, [pc, #136]	@ (80007b4 <display_note+0x11c>)
 800072c:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <display_note+0x108>)
 800072e:	f007 f85b 	bl	80077e8 <siprintf>
				break;
 8000732:	e01d      	b.n	8000770 <display_note+0xd8>
			case 6:
				sprintf(Pitch_Buffer, "Eb \r\n");
 8000734:	4920      	ldr	r1, [pc, #128]	@ (80007b8 <display_note+0x120>)
 8000736:	481a      	ldr	r0, [pc, #104]	@ (80007a0 <display_note+0x108>)
 8000738:	f007 f856 	bl	80077e8 <siprintf>
				break;
 800073c:	e018      	b.n	8000770 <display_note+0xd8>
			case 7:
				sprintf(Pitch_Buffer, "E  \r\n");
 800073e:	491f      	ldr	r1, [pc, #124]	@ (80007bc <display_note+0x124>)
 8000740:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <display_note+0x108>)
 8000742:	f007 f851 	bl	80077e8 <siprintf>
				break;
 8000746:	e013      	b.n	8000770 <display_note+0xd8>
			case 8:
				sprintf(Pitch_Buffer, "F  \r\n");
 8000748:	491d      	ldr	r1, [pc, #116]	@ (80007c0 <display_note+0x128>)
 800074a:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <display_note+0x108>)
 800074c:	f007 f84c 	bl	80077e8 <siprintf>
				break;
 8000750:	e00e      	b.n	8000770 <display_note+0xd8>
			case 9:
				sprintf(Pitch_Buffer, "Gb \r\n");
 8000752:	491c      	ldr	r1, [pc, #112]	@ (80007c4 <display_note+0x12c>)
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <display_note+0x108>)
 8000756:	f007 f847 	bl	80077e8 <siprintf>
				break;
 800075a:	e009      	b.n	8000770 <display_note+0xd8>
			case 10:
				sprintf(Pitch_Buffer, "G  \r\n");
 800075c:	491a      	ldr	r1, [pc, #104]	@ (80007c8 <display_note+0x130>)
 800075e:	4810      	ldr	r0, [pc, #64]	@ (80007a0 <display_note+0x108>)
 8000760:	f007 f842 	bl	80077e8 <siprintf>
				break;
 8000764:	e004      	b.n	8000770 <display_note+0xd8>
			case 11:
				sprintf(Pitch_Buffer, "Ab \r\n");
 8000766:	4919      	ldr	r1, [pc, #100]	@ (80007cc <display_note+0x134>)
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <display_note+0x108>)
 800076a:	f007 f83d 	bl	80077e8 <siprintf>
				break;
 800076e:	bf00      	nop
		}
		HAL_UART_Transmit(disp->huart, Pitch_Message, sizeof(Pitch_Message), 10000);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6898      	ldr	r0, [r3, #8]
 8000774:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000778:	2210      	movs	r2, #16
 800077a:	4915      	ldr	r1, [pc, #84]	@ (80007d0 <display_note+0x138>)
 800077c:	f005 ff88 	bl	8006690 <HAL_UART_Transmit>
		HAL_UART_Transmit(disp->huart, Pitch_Buffer, sizeof(Pitch_Buffer), 10000);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000788:	2232      	movs	r2, #50	@ 0x32
 800078a:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <display_note+0x108>)
 800078c:	f005 ff80 	bl	8006690 <HAL_UART_Transmit>
	return disp->curr_note;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08008140 	.word	0x08008140
 80007a0:	20000190 	.word	0x20000190
 80007a4:	08008148 	.word	0x08008148
 80007a8:	08008150 	.word	0x08008150
 80007ac:	08008158 	.word	0x08008158
 80007b0:	08008160 	.word	0x08008160
 80007b4:	08008168 	.word	0x08008168
 80007b8:	08008170 	.word	0x08008170
 80007bc:	08008178 	.word	0x08008178
 80007c0:	08008180 	.word	0x08008180
 80007c4:	08008188 	.word	0x08008188
 80007c8:	08008190 	.word	0x08008190
 80007cc:	08008198 	.word	0x08008198
 80007d0:	20000000 	.word	0x20000000

080007d4 <encoder_read_curr_state>:
/*!
 * This function reads the current encoder state and uses it to calculate the speed and position of the encoder.
 * @param encoder The encoder instance to operate on.
 * @attention If the timing_timer is set up correctly for the inputted encoder, this function should be called no faster than every microsecond.
 */
void encoder_read_curr_state(Encoder* encoder){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	//! set the previous times and previous counts to the previously current values
	encoder->prev_count = encoder->curr_count;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	609a      	str	r2, [r3, #8]
	encoder->prev_time = encoder->curr_time;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	611a      	str	r2, [r3, #16]
	//! get the count and time values from the two timers
	encoder->curr_count = encoder->timer->Instance->CNT;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	60da      	str	r2, [r3, #12]
	encoder->curr_time = encoder->timing_timer->Instance->CNT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	615a      	str	r2, [r3, #20]
	//! calculate the difference between the current counts/times and previous counts/times using the delta function
	encoder->dx = delta(encoder->timer, encoder->prev_count,encoder->curr_count);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6899      	ldr	r1, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	461a      	mov	r2, r3
 8000812:	f000 f841 	bl	8000898 <delta>
 8000816:	4602      	mov	r2, r0
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	621a      	str	r2, [r3, #32]
	encoder->dt = delta(encoder->timing_timer, encoder->prev_time,encoder->curr_time);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6858      	ldr	r0, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6919      	ldr	r1, [r3, #16]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	461a      	mov	r2, r3
 800082a:	f000 f835 	bl	8000898 <delta>
 800082e:	4602      	mov	r2, r0
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
	//! set the encoder position to be the previous encoder position plus the delta position
	encoder->pos = encoder->pos + encoder->dx;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	441a      	add	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	619a      	str	r2, [r3, #24]
	//! set the speed of the encoder to the calculated value via encoder_calc_speed()
	encoder->speed = encoder_calc_speed(encoder,encoder->dx,encoder->dt);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a19      	ldr	r1, [r3, #32]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800084a:	461a      	mov	r2, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f807 	bl	8000860 <encoder_calc_speed>
 8000852:	4602      	mov	r2, r0
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	61da      	str	r2, [r3, #28]

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <encoder_calc_speed>:
 * @param encoder The encoder instance to operate on
 * @param dx The differential position term in encoder counts.
 * @param dt The differential time term in microseconds
 * @return The calculated speed in counts per second
 */
int32_t encoder_calc_speed(Encoder* encoder, int32_t dx,int32_t dt){
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	//! if the delta time is zero, return the previous speed to avoid divide by zero errors.
	if(dt == 0){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d102      	bne.n	8000878 <encoder_calc_speed+0x18>
		return encoder->speed;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	e006      	b.n	8000886 <encoder_calc_speed+0x26>
	}
	//! return the speed in counts/second knowing that dt is in microseconds
	return ((dx)*1000000)/dt;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <encoder_calc_speed+0x34>)
 800087c:	fb03 f202 	mul.w	r2, r3, r2
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	000f4240 	.word	0x000f4240

08000898 <delta>:
 * @param initial The initial value of the timer
 * @param final The final value of the timer
 *
 * @returns delta The corrected delta value to account for overflow and underflow.
 */
int32_t delta(TIM_HandleTypeDef* timer, uint32_t initial, uint32_t final){
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	@ 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	//! get the auto reload value of the timer since it is the maximum value a timer can be
	uint32_t ARR = (int32_t)(timer->Init.Period );
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	61bb      	str	r3, [r7, #24]
	//! we can determine if something has overflowed or underflowed be assuming a delta will never be greater than half the auto reload value, which if the encoder is read enough is a good assumption
	int32_t overflow = ((ARR-1)/2)+1;
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	085b      	lsrs	r3, r3, #1
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
	//1 Calculate the delta
	int32_t delta = final-initial;
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	61fb      	str	r3, [r7, #28]
	//! if the value underflows, the delta will be a positive value greater than overflow, so just subtract off ARR+1 from the underflowed delta
	if(delta >= overflow){
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	db05      	blt.n	80008d0 <delta+0x38>
		delta = delta - overflow*2;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e008      	b.n	80008e2 <delta+0x4a>
	//! similarly, if the value overflows, the delta will be a negative value less than negative of overerflow, so add ARR+1 to the overflowed delta
	}else if(delta <= -1*overflow){
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	425b      	negs	r3, r3
 80008d4:	69fa      	ldr	r2, [r7, #28]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dc03      	bgt.n	80008e2 <delta+0x4a>
		delta = delta + overflow;
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	61fb      	str	r3, [r7, #28]
	}
	return delta;
 80008e2:	69fb      	ldr	r3, [r7, #28]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3724      	adds	r7, #36	@ 0x24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <display_task>:
/* USER CODE BEGIN 0 */
/*!
 * This function implements the Display and Note task finite state machine.
 * @param state The pointer to the current state of the task
 */
void display_task(uint8_t* state){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	switch(*state){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <display_task+0x16>
 8000900:	2b01      	cmp	r3, #1
 8000902:	d00d      	beq.n	8000920 <display_task+0x30>
	case 1:
		ptch = get_pitch(&pe);
		display_note(&display,ptch);
		break;
	}
}
 8000904:	e01a      	b.n	800093c <display_task+0x4c>
		pe.encoder->timer->Instance->CNT = ((htim5.Init.Period)+1)/2;
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <display_task+0x54>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <display_task+0x58>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	0852      	lsrs	r2, r2, #1
 8000916:	625a      	str	r2, [r3, #36]	@ 0x24
		*state = 1;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
		break;
 800091e:	e00d      	b.n	800093c <display_task+0x4c>
		ptch = get_pitch(&pe);
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <display_task+0x58>)
 8000922:	f000 fd5b 	bl	80013dc <get_pitch>
 8000926:	4603      	mov	r3, r0
 8000928:	4a08      	ldr	r2, [pc, #32]	@ (800094c <display_task+0x5c>)
 800092a:	6013      	str	r3, [r2, #0]
		display_note(&display,ptch);
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <display_task+0x5c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4619      	mov	r1, r3
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <display_task+0x60>)
 8000936:	f7ff feaf 	bl	8000698 <display_note>
		break;
 800093a:	bf00      	nop
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000360 	.word	0x20000360
 8000948:	200000d0 	.word	0x200000d0
 800094c:	200004d0 	.word	0x200004d0
 8000950:	200000dc 	.word	0x200000dc

08000954 <motor_task>:

/*!
 * This function implements the Motor task finite state machine.
 * @param state The pointer to the current state of the task
 */
void motor_task (uint8_t* state){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	switch(*state){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <motor_task+0x16>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d009      	beq.n	800097c <motor_task+0x28>
				eff = run(&m_con,mot_enc.speed);
				motor_set_duty_cycle(&m, eff);
				break;
			}
	}
}
 8000968:	e030      	b.n	80009cc <motor_task+0x78>
			*state = 1;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
			timmy = HAL_GetTick();
 8000970:	f001 f978 	bl	8001c64 <HAL_GetTick>
 8000974:	4603      	mov	r3, r0
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <motor_task+0x80>)
 8000978:	6013      	str	r3, [r2, #0]
			break;
 800097a:	e027      	b.n	80009cc <motor_task+0x78>
			if(HAL_GetTick() >= timmy + 2){
 800097c:	f001 f972 	bl	8001c64 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <motor_task+0x80>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3302      	adds	r3, #2
 8000988:	429a      	cmp	r2, r3
 800098a:	d31f      	bcc.n	80009cc <motor_task+0x78>
				timmy = HAL_GetTick();
 800098c:	f001 f96a 	bl	8001c64 <HAL_GetTick>
 8000990:	4603      	mov	r3, r0
 8000992:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <motor_task+0x80>)
 8000994:	6013      	str	r3, [r2, #0]
				m_con.setpoint = motor_speeds[ptch];
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <motor_task+0x84>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <motor_task+0x88>)
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <motor_task+0x8c>)
 80009a2:	6113      	str	r3, [r2, #16]
				encoder_read_curr_state(&mot_enc);
 80009a4:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <motor_task+0x90>)
 80009a6:	f7ff ff15 	bl	80007d4 <encoder_read_curr_state>
				eff = run(&m_con,mot_enc.speed);
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <motor_task+0x90>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <motor_task+0x8c>)
 80009b2:	f7ff fdd5 	bl	8000560 <run>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <motor_task+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
				motor_set_duty_cycle(&m, eff);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <motor_task+0x94>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <motor_task+0x98>)
 80009c6:	f000 fc8d 	bl	80012e4 <motor_set_duty_cycle>
				break;
 80009ca:	bf00      	nop
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200004d4 	.word	0x200004d4
 80009d8:	200004d0 	.word	0x200004d0
 80009dc:	200000e8 	.word	0x200000e8
 80009e0:	20000070 	.word	0x20000070
 80009e4:	20000048 	.word	0x20000048
 80009e8:	200004d8 	.word	0x200004d8
 80009ec:	20000010 	.word	0x20000010

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f001 f8c6 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f84c 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f000 fbf0 	bl	80011e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a00:	f000 fbbe 	bl	8001180 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a04:	f000 f94e 	bl	8000ca4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a08:	f000 f9e8 	bl	8000ddc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a0c:	f000 f894 	bl	8000b38 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000a10:	f000 f908 	bl	8000c24 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000a14:	f000 fa62 	bl	8000edc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a18:	f000 fab6 	bl	8000f88 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a1c:	f000 fb48 	bl	80010b0 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000a20:	f000 fb10 	bl	8001044 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //! initialize I2C
  MX_I2C2_Init();
 8000a24:	f000 f8fe 	bl	8000c24 <MX_I2C2_Init>
  //! start the timers in their various modes.
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a28:	213c      	movs	r1, #60	@ 0x3c
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <main+0x88>)
 8000a2c:	f004 fbe3 	bl	80051f6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000a30:	213c      	movs	r1, #60	@ 0x3c
 8000a32:	4812      	ldr	r0, [pc, #72]	@ (8000a7c <main+0x8c>)
 8000a34:	f004 fc6d 	bl	8005312 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <main+0x90>)
 8000a3c:	f004 f97e 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <main+0x90>)
 8000a44:	f004 f97a 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 8000a48:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <main+0x94>)
 8000a4a:	f004 f8b7 	bl	8004bbc <HAL_TIM_Base_Start>
  //! set the display driver enable pin and the motor driver enable pin
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f002 fbee 	bl	8003238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <main+0x98>)
 8000a62:	f002 fbe9 	bl	8003238 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  //! @brief This is the game loop that runs forever to convert user inputed code into a PWM signal to drive the motors.
  while (1)
  {
	 //! run the tasks in round-robin style.
	display_task(&t1state);
 8000a66:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <main+0x9c>)
 8000a68:	f7ff ff42 	bl	80008f0 <display_task>
	motor_task(&t2state);
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <main+0xa0>)
 8000a6e:	f7ff ff71 	bl	8000954 <motor_task>
	display_task(&t1state);
 8000a72:	bf00      	nop
 8000a74:	e7f7      	b.n	8000a66 <main+0x76>
 8000a76:	bf00      	nop
 8000a78:	20000314 	.word	0x20000314
 8000a7c:	20000360 	.word	0x20000360
 8000a80:	2000027c 	.word	0x2000027c
 8000a84:	200003ac 	.word	0x200003ac
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	200004cc 	.word	0x200004cc
 8000a90:	200004cd 	.word	0x200004cd

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	@ 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	@ 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fec0 	bl	8007828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aba:	f002 fd15 	bl	80034e8 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 fc08 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fd4c 	bl	8003594 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b02:	f000 fbe9 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 f914 	bl	8003d4c <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b2a:	f000 fbd5 	bl	80012d8 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	@ 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <MX_ADC1_Init+0xe4>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b60:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bba:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000bbc:	f001 f9ea 	bl	8001f94 <HAL_ADC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bc6:	f000 fb87 	bl	80012d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000bd6:	f001 ff45 	bl	8002a64 <HAL_ADCEx_MultiModeConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000be0:	f000 fb7a 	bl	80012d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_ADC1_Init+0xe8>)
 8000be6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be8:	2306      	movs	r3, #6
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf0:	237f      	movs	r3, #127	@ 0x7f
 8000bf2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_ADC1_Init+0xe0>)
 8000c02:	f001 fb17 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c0c:	f000 fb64 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001c4 	.word	0x200001c4
 8000c1c:	50040000 	.word	0x50040000
 8000c20:	3ac04000 	.word	0x3ac04000

08000c24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_I2C2_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xF010F3FE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_I2C2_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c62:	f002 fb01 	bl	8003268 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 fb34 	bl	80012d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c74:	f002 fb93 	bl	800339e <HAL_I2CEx_ConfigAnalogFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 fb2b 	bl	80012d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_I2C2_Init+0x74>)
 8000c86:	f002 fbd5 	bl	8003434 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 fb22 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000228 	.word	0x20000228
 8000c9c:	40005800 	.word	0x40005800
 8000ca0:	f010f3fe 	.word	0xf010f3fe

08000ca4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b096      	sub	sp, #88	@ 0x58
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	222c      	movs	r2, #44	@ 0x2c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fda9 	bl	8007828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd8 <MX_TIM1_Init+0x134>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf6:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d02:	4834      	ldr	r0, [pc, #208]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000d04:	f003 ffc2 	bl	8004c8c <HAL_TIM_PWM_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 fae3 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d22:	4619      	mov	r1, r3
 8000d24:	482b      	ldr	r0, [pc, #172]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000d26:	f005 fb41 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d30:	f000 fad2 	bl	80012d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d34:	2360      	movs	r3, #96	@ 0x60
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	481e      	ldr	r0, [pc, #120]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000d5a:	f004 fd27 	bl	80057ac <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d64:	f000 fab8 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4818      	ldr	r0, [pc, #96]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000d72:	f004 fd1b 	bl	80057ac <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d7c:	f000 faac 	bl	80012d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000db6:	f005 fb81 	bl	80064bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000dc0:	f000 fa8a 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <MX_TIM1_Init+0x130>)
 8000dc6:	f000 fd8b 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8000dca:	bf00      	nop
 8000dcc:	3758      	adds	r7, #88	@ 0x58
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000027c 	.word	0x2000027c
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000dfc:	4a36      	ldr	r2, [pc, #216]	@ (8000ed8 <MX_TIM3_Init+0xfc>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000e00:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e02:	224f      	movs	r2, #79	@ 0x4f
 8000e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e20:	482c      	ldr	r0, [pc, #176]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e22:	f004 f891 	bl	8004f48 <HAL_TIM_IC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e2c:	f000 fa54 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4825      	ldr	r0, [pc, #148]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e40:	f005 fab4 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e4a:	f000 fa45 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e66:	f004 fc04 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e70:	f000 fa32 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e74:	2302      	movs	r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4814      	ldr	r0, [pc, #80]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e84:	f004 fbf5 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000e8e:	f000 fa23 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2208      	movs	r2, #8
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000e9e:	f004 fbe8 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ea8:	f000 fa16 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000eac:	2302      	movs	r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <MX_TIM3_Init+0xf8>)
 8000ebc:	f004 fbd9 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ec6:	f000 fa07 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002c8 	.word	0x200002c8
 8000ed8:	40000400 	.word	0x40000400

08000edc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	@ 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2224      	movs	r2, #36	@ 0x24
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 fc9c 	bl	8007828 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000efc:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <MX_TIM4_Init+0xa8>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f4c:	f004 f8ad 	bl	80050aa <HAL_TIM_Encoder_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f56:	f000 f9bf 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM4_Init+0xa4>)
 8000f68:	f005 fa20 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f72:	f000 f9b1 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	@ 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000314 	.word	0x20000314
 8000f84:	40000800 	.word	0x40000800

08000f88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2224      	movs	r2, #36	@ 0x24
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fc46 	bl	8007828 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fa8:	4a25      	ldr	r2, [pc, #148]	@ (8001040 <MX_TIM5_Init+0xb8>)
 8000faa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1073741823;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fba:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8000fbe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_TIM5_Init+0xb4>)
 8000ff8:	f004 f857 	bl	80050aa <HAL_TIM_Encoder_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001002:	f000 f969 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001006:	2108      	movs	r1, #8
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <MX_TIM5_Init+0xb4>)
 800100a:	f003 fff4 	bl	8004ff6 <HAL_TIM_OnePulse_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001014:	f000 f960 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_TIM5_Init+0xb4>)
 8001026:	f005 f9c1 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001030:	f000 f952 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3730      	adds	r7, #48	@ 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000360 	.word	0x20000360
 8001040:	40000c00 	.word	0x40000c00

08001044 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <MX_TIM6_Init+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <MX_TIM6_Init+0x64>)
 800105c:	224f      	movs	r2, #79	@ 0x4f
 800105e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001068:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800106c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001076:	f003 fd49 	bl	8004b0c <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001080:	f000 f92a 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_TIM6_Init+0x64>)
 8001092:	f005 f98b 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800109c:	f000 f91c 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003ac 	.word	0x200003ac
 80010ac:	40001000 	.word	0x40001000

080010b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010d0:	4a2a      	ldr	r2, [pc, #168]	@ (800117c <MX_TIM8_Init+0xcc>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ee:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80010fa:	481f      	ldr	r0, [pc, #124]	@ (8001178 <MX_TIM8_Init+0xc8>)
 80010fc:	f003 ff24 	bl	8004f48 <HAL_TIM_IC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001106:	f000 f8e7 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4816      	ldr	r0, [pc, #88]	@ (8001178 <MX_TIM8_Init+0xc8>)
 800111e:	f005 f945 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 f8d6 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_TIM8_Init+0xc8>)
 8001144:	f004 fa95 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800114e:	f000 f8c3 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001152:	2302      	movs	r3, #2
 8001154:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001156:	2302      	movs	r3, #2
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2204      	movs	r2, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_TIM8_Init+0xc8>)
 8001162:	f004 fa86 	bl	8005672 <HAL_TIM_IC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800116c:	f000 f8b4 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200003f8 	.word	0x200003f8
 800117c:	40013400 	.word	0x40013400

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <MX_USART2_UART_Init+0x5c>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011c4:	f005 fa16 	bl	80065f4 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 f883 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000444 	.word	0x20000444
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <MX_GPIO_Init+0xec>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a34      	ldr	r2, [pc, #208]	@ (80012cc <MX_GPIO_Init+0xec>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a2e      	ldr	r2, [pc, #184]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <MX_GPIO_Init+0xec>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <MX_GPIO_Init+0xec>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a22      	ldr	r2, [pc, #136]	@ (80012cc <MX_GPIO_Init+0xec>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <MX_GPIO_Init+0xec>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2104      	movs	r1, #4
 800125a:	481d      	ldr	r0, [pc, #116]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 800125c:	f001 ffec 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f001 ffe5 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800126e:	2304      	movs	r3, #4
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4812      	ldr	r0, [pc, #72]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001286:	f001 fe2d 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f001 fe1d 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_GPIO_Init+0xf4>)
 80012c0:	f001 fe10 	bl	8002ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000400 	.word	0x48000400
 80012d4:	48000800 	.word	0x48000800

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <Error_Handler+0x8>

080012e4 <motor_set_duty_cycle>:
 *
 * @param motor, the Motor struct to be operated on.
 * @param doot, the duty cycle to be set to.
 *
 */
void motor_set_duty_cycle(Motor* motor, int32_t doot){
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	motor->duty_cycle = doot;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	609a      	str	r2, [r3, #8]
	// First, check if the motor is disabled
	if(motor->enable_flag != 1){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d162      	bne.n	80013c2 <motor_set_duty_cycle+0xde>
		// the motor doesn't accidentally enable.
		return;
	}

	// Next, saturate the duty cycle just in case.
	if(doot < -100){
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001302:	da02      	bge.n	800130a <motor_set_duty_cycle+0x26>
		doot = -100;
 8001304:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001308:	603b      	str	r3, [r7, #0]
	}
	if(doot > 100){
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b64      	cmp	r3, #100	@ 0x64
 800130e:	dd01      	ble.n	8001314 <motor_set_duty_cycle+0x30>
		doot = 100;
 8001310:	2364      	movs	r3, #100	@ 0x64
 8001312:	603b      	str	r3, [r7, #0]
	}

	// We need to get the auto reload value for the timer we are using
	// signed value so we don't run into sign issues later
	int32_t ARR = (int32_t)(motor->timer->Init.Period + 1);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]

	// Now calculate the duty cycle in terms of the CCR value
	doot = doot*ARR/100;  // multiply first so we don't lose data
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <motor_set_duty_cycle+0xf4>)
 8001328:	fb82 1203 	smull	r1, r2, r2, r3
 800132c:	1152      	asrs	r2, r2, #5
 800132e:	17db      	asrs	r3, r3, #31
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	603b      	str	r3, [r7, #0]


	// the below CCR's are based on the logic table of the toshiba, setting motor.
	// to brake mode
	// if duty cycle is <0
	if (doot < 0){
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	da21      	bge.n	800137e <motor_set_duty_cycle+0x9a>
	    // check if it is the first or second motor.
		if(motor->channels == 1){
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10c      	bne.n	800135c <motor_set_duty_cycle+0x78>
			motor->timer->Instance->CCR1 = ARR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR + doot;
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	441a      	add	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	639a      	str	r2, [r3, #56]	@ 0x38
 800135a:	e037      	b.n	80013cc <motor_set_duty_cycle+0xe8>
		} else if(motor->channels == 2){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <motor_set_duty_cycle+0xe2>
			motor->timer->Instance->CCR3 = ARR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR + doot;
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	441a      	add	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	641a      	str	r2, [r3, #64]	@ 0x40
 800137c:	e026      	b.n	80013cc <motor_set_duty_cycle+0xe8>
			// if neither return
			return;
		}
	// if duty cycle >=0
	} else{
		if(motor->channels == 1){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10c      	bne.n	80013a0 <motor_set_duty_cycle+0xbc>
			motor->timer->Instance->CCR1 = ARR - doot;
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38
 800139e:	e015      	b.n	80013cc <motor_set_duty_cycle+0xe8>
		} else if(motor->channels == 2){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d110      	bne.n	80013ca <motor_set_duty_cycle+0xe6>
			motor->timer->Instance->CCR3 = ARR - doot;
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	1ad2      	subs	r2, r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c0:	e004      	b.n	80013cc <motor_set_duty_cycle+0xe8>
		return;
 80013c2:	bf00      	nop
 80013c4:	e002      	b.n	80013cc <motor_set_duty_cycle+0xe8>
			return;
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <motor_set_duty_cycle+0xe8>
		}else{
			return;
 80013ca:	bf00      	nop
		}
	}
}
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	51eb851f 	.word	0x51eb851f

080013dc <get_pitch>:
/*!
 * This function gets the current pitch based on the pitch selection knob
 * @param p_enc The pitch encoder object to read from
 * @return the current pitch, a number 0-11 mapped through the chromatic notes from A-Ab
 */
uint32_t get_pitch(PitchEncoder* p_enc){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	//! read the current state of the encoder
	encoder_read_curr_state((p_enc->encoder));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f9f3 	bl	80007d4 <encoder_read_curr_state>
	//! store the delta of the encoder
	p_enc->delta = (int16_t)(p_enc->encoder->dx);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	811a      	strh	r2, [r3, #8]
	//! add the delta to the pitch
	p_enc->pitch += p_enc->delta;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	b29a      	uxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	b21a      	sxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	801a      	strh	r2, [r3, #0]
	//! if the pitch hasn't changed, just return the pitch
	if(p_enc->delta == 0){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <get_pitch+0x4a>
		return p_enc->pitch;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	e01e      	b.n	8001464 <get_pitch+0x88>
	}
	//! we can treat the pitch as a number between 0 and 11, which can underflow and overflow.  We can run a similar algorithm to the delta() function in the encoder class to correct for this.
	if(p_enc->pitch < 0){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da08      	bge.n	8001442 <get_pitch+0x66>
		p_enc->pitch += 12;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	b29b      	uxth	r3, r3
 8001438:	330c      	adds	r3, #12
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21a      	sxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	801a      	strh	r2, [r3, #0]
	}
	if(p_enc->pitch >= 12){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	2b0b      	cmp	r3, #11
 800144a:	dd08      	ble.n	800145e <get_pitch+0x82>
		p_enc->pitch -= 12;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b0c      	subs	r3, #12
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	801a      	strh	r2, [r3, #0]
	}
	return p_enc->pitch;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_MspInit+0x44>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	@ 0x60
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_MspInit+0x44>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ac      	sub	sp, #176	@ 0xb0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2288      	movs	r2, #136	@ 0x88
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f9a7 	bl	8007828 <memset>
  if(hadc->Instance==ADC1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a27      	ldr	r2, [pc, #156]	@ (800157c <HAL_ADC_MspInit+0xc8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d146      	bne.n	8001572 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014fa:	2308      	movs	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014fe:	2307      	movs	r3, #7
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800150a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fe3d 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001520:	f7ff feda 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a15      	ldr	r2, [pc, #84]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 800152a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_ADC_MspInit+0xcc>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001554:	2320      	movs	r3, #32
 8001556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800155a:	230b      	movs	r3, #11
 800155c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_ADC_MspInit+0xd0>)
 800156e:	f001 fcb9 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	37b0      	adds	r7, #176	@ 0xb0
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	50040000 	.word	0x50040000
 8001580:	40021000 	.word	0x40021000
 8001584:	48000800 	.word	0x48000800

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ac      	sub	sp, #176	@ 0xb0
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2288      	movs	r2, #136	@ 0x88
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 f93d 	bl	8007828 <memset>
  if(hi2c->Instance==I2C2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <HAL_I2C_MspInit+0xb0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d13b      	bne.n	8001630 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fde5 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff fe82 	bl	80012d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001606:	2304      	movs	r3, #4
 8001608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <HAL_I2C_MspInit+0xb8>)
 8001614:	f001 fc66 	bl	8002ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	4a07      	ldr	r2, [pc, #28]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 800161e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001622:	6593      	str	r3, [r2, #88]	@ 0x58
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	37b0      	adds	r7, #176	@ 0xb0
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005800 	.word	0x40005800
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400

08001644 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_TIM_PWM_MspInit+0x38>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10b      	bne.n	800166e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_TIM_PWM_MspInit+0x3c>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <HAL_TIM_PWM_MspInit+0x3c>)
 800165c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001660:	6613      	str	r3, [r2, #96]	@ 0x60
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_TIM_PWM_MspInit+0x3c>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001794 <HAL_TIM_IC_MspInit+0x110>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d145      	bne.n	8001732 <HAL_TIM_IC_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b2:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	4a35      	ldr	r2, [pc, #212]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a2f      	ldr	r2, [pc, #188]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fe:	2302      	movs	r3, #2
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f001 fbea 	bl	8002ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001710:	2301      	movs	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001720:	2302      	movs	r3, #2
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	481c      	ldr	r0, [pc, #112]	@ (800179c <HAL_TIM_IC_MspInit+0x118>)
 800172c:	f001 fbda 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001730:	e02c      	b.n	800178c <HAL_TIM_IC_MspInit+0x108>
  else if(htim_ic->Instance==TIM8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <HAL_TIM_IC_MspInit+0x11c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d127      	bne.n	800178c <HAL_TIM_IC_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001740:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 8001742:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001746:	6613      	str	r3, [r2, #96]	@ 0x60
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a0f      	ldr	r2, [pc, #60]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_TIM_IC_MspInit+0x114>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176c:	2340      	movs	r3, #64	@ 0x40
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800177c:	2303      	movs	r3, #3
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <HAL_TIM_IC_MspInit+0x120>)
 8001788:	f001 fbac 	bl	8002ee4 <HAL_GPIO_Init>
}
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	@ 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40000400 	.word	0x40000400
 8001798:	40021000 	.word	0x40021000
 800179c:	48000400 	.word	0x48000400
 80017a0:	40013400 	.word	0x40013400
 80017a4:	48000800 	.word	0x48000800

080017a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	@ 0x30
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a32      	ldr	r2, [pc, #200]	@ (8001890 <HAL_TIM_Encoder_MspInit+0xe8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d128      	bne.n	800181c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	4a31      	ldr	r2, [pc, #196]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fa:	23c0      	movs	r3, #192	@ 0xc0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800180a:	2302      	movs	r3, #2
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4820      	ldr	r0, [pc, #128]	@ (8001898 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001816:	f001 fb65 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800181a:	e035      	b.n	8001888 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d130      	bne.n	8001888 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6593      	str	r3, [r2, #88]	@ 0x58
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_TIM_Encoder_MspInit+0xec>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001856:	2303      	movs	r3, #3
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	2301      	movs	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001866:	2302      	movs	r3, #2
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001874:	f001 fb36 	bl	8002ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2032      	movs	r0, #50	@ 0x32
 800187e:	f001 fa7c 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001882:	2032      	movs	r0, #50	@ 0x32
 8001884:	f001 fa95 	bl	8002db2 <HAL_NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	@ 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40000800 	.word	0x40000800
 8001894:	40021000 	.word	0x40021000
 8001898:	48000400 	.word	0x48000400
 800189c:	40000c00 	.word	0x40000c00

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_TIM_Base_MspInit+0x38>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10b      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <HAL_TIM_Base_MspInit+0x3c>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40001000 	.word	0x40001000
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <HAL_TIM_MspPostInit+0x68>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d11d      	bne.n	800193e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	4a11      	ldr	r2, [pc, #68]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800191e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f001 fad3 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0ac      	sub	sp, #176	@ 0xb0
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2288      	movs	r2, #136	@ 0x88
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f005 ff59 	bl	8007828 <memset>
  if(huart->Instance==USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a25      	ldr	r2, [pc, #148]	@ (8001a10 <HAL_UART_MspInit+0xc0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d143      	bne.n	8001a08 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001984:	2300      	movs	r3, #0
 8001986:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fc01 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001998:	f7ff fc9e 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 80019a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_UART_MspInit+0xc4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019cc:	230c      	movs	r3, #12
 80019ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e4:	2307      	movs	r3, #7
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f4:	f001 fa76 	bl	8002ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2026      	movs	r0, #38	@ 0x26
 80019fe:	f001 f9bc 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a02:	2026      	movs	r0, #38	@ 0x26
 8001a04:	f001 f9d5 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	37b0      	adds	r7, #176	@ 0xb0
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40004400 	.word	0x40004400
 8001a14:	40021000 	.word	0x40021000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <NMI_Handler+0x4>

08001a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <MemManage_Handler+0x4>

08001a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6e:	f000 f8e5 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <USART2_IRQHandler+0x10>)
 8001a7e:	f004 fe91 	bl	80067a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000444 	.word	0x20000444

08001a8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM5_IRQHandler+0x10>)
 8001a92:	f003 fcec 	bl	800546e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000360 	.word	0x20000360

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f005 feb2 	bl	8007838 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20018000 	.word	0x20018000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	200004dc 	.word	0x200004dc
 8001b08:	20000630 	.word	0x20000630

08001b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b34:	f7ff ffea 	bl	8001b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <LoopForever+0xe>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <LoopForever+0x16>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f005 fe71 	bl	8007844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b62:	f7fe ff45 	bl	80009f0 <main>

08001b66 <LoopForever>:

LoopForever:
    b LoopForever
 8001b66:	e7fe      	b.n	8001b66 <LoopForever>
	  ldr   sp, =_estack    /* Set stack pointer */
 8001b68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001b74:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8001b78:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001b7c:	2000062c 	.word	0x2000062c

08001b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_Init+0x3c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_Init+0x3c>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f001 f8e2 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f80f 	bl	8001bc4 <HAL_InitTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	e001      	b.n	8001bb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb2:	f7ff fc5b 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_InitTick+0x70>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_InitTick+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 f8ed 	bl	8002dce <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d809      	bhi.n	8001c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f001 f8b7 	bl	8002d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_InitTick+0x74>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e007      	b.n	8001c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e004      	b.n	8001c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e001      	b.n	8001c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000120 	.word	0x20000120
 8001c34:	20000118 	.word	0x20000118
 8001c38:	2000011c 	.word	0x2000011c

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000120 	.word	0x20000120
 8001c60:	200004e0 	.word	0x200004e0

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200004e0 	.word	0x200004e0

08001c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3360      	adds	r3, #96	@ 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <LL_ADC_SetOffset+0x44>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	03fff000 	.word	0x03fff000

08001d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3360      	adds	r3, #96	@ 0x60
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b087      	sub	sp, #28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3330      	adds	r3, #48	@ 0x30
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	211f      	movs	r1, #31
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 011f 	and.w	r1, r3, #31
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3314      	adds	r3, #20
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0e5b      	lsrs	r3, r3, #25
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	0d1b      	lsrs	r3, r3, #20
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2107      	movs	r1, #7
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0d1b      	lsrs	r3, r3, #20
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0318 	and.w	r3, r3, #24
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e60:	40d9      	lsrs	r1, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	400b      	ands	r3, r1
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	0007ffff 	.word	0x0007ffff

08001e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6093      	str	r3, [r2, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ebc:	d101      	bne.n	8001ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ee4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f0c:	d101      	bne.n	8001f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <LL_ADC_IsEnabled+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_ADC_IsEnabled+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e130      	b.n	8002210 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fa79 	bl	80014b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff67 	bl	8001ea8 <LL_ADC_IsDeepPowerDownEnabled>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff4d 	bl	8001e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff82 	bl	8001ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff66 	bl	8001ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002004:	4b84      	ldr	r3, [pc, #528]	@ (8002218 <HAL_ADC_Init+0x284>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	4a84      	ldr	r2, [pc, #528]	@ (800221c <HAL_ADC_Init+0x288>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	3301      	adds	r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b01      	subs	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff64 	bl	8001ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff75 	bl	8001f46 <LL_ADC_REG_IsConversionOngoing>
 800205c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80c9 	bne.w	80021fe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 80c5 	bne.w	80021fe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff49 	bl	8001f20 <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002094:	4862      	ldr	r0, [pc, #392]	@ (8002220 <HAL_ADC_Init+0x28c>)
 8002096:	f7ff ff43 	bl	8001f20 <LL_ADC_IsEnabled>
 800209a:	4604      	mov	r4, r0
 800209c:	4861      	ldr	r0, [pc, #388]	@ (8002224 <HAL_ADC_Init+0x290>)
 800209e:	f7ff ff3f 	bl	8001f20 <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	431c      	orrs	r4, r3
 80020a6:	4860      	ldr	r0, [pc, #384]	@ (8002228 <HAL_ADC_Init+0x294>)
 80020a8:	f7ff ff3a 	bl	8001f20 <LL_ADC_IsEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4323      	orrs	r3, r4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4619      	mov	r1, r3
 80020ba:	485c      	ldr	r0, [pc, #368]	@ (800222c <HAL_ADC_Init+0x298>)
 80020bc:	f7ff fdde 	bl	8001c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7e5b      	ldrb	r3, [r3, #25]
 80020c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	045b      	lsls	r3, r3, #17
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <HAL_ADC_Init+0x29c>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	430b      	orrs	r3, r1
 800212a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff1b 	bl	8001f6c <LL_ADC_INJ_IsConversionOngoing>
 8002136:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d13d      	bne.n	80021ba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d13a      	bne.n	80021ba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002148:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002150:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002160:	f023 0302 	bic.w	r3, r3, #2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	69b9      	ldr	r1, [r7, #24]
 800216a:	430b      	orrs	r3, r1
 800216c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002174:	2b01      	cmp	r3, #1
 8002176:	d118      	bne.n	80021aa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800219a:	430a      	orrs	r2, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	e007      	b.n	80021ba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10c      	bne.n	80021dc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	f023 010f 	bic.w	r1, r3, #15
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80021da:	e007      	b.n	80021ec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020f 	bic.w	r2, r2, #15
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f023 0303 	bic.w	r3, r3, #3
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800220e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3724      	adds	r7, #36	@ 0x24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	20000118 	.word	0x20000118
 800221c:	053e2d63 	.word	0x053e2d63
 8002220:	50040000 	.word	0x50040000
 8002224:	50040100 	.word	0x50040100
 8002228:	50040200 	.word	0x50040200
 800222c:	50040300 	.word	0x50040300
 8002230:	fff0c007 	.word	0xfff0c007

08002234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0b6      	sub	sp, #216	@ 0xd8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x22>
 8002252:	2302      	movs	r3, #2
 8002254:	e3c9      	b.n	80029ea <HAL_ADC_ConfigChannel+0x7b6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fe6f 	bl	8001f46 <LL_ADC_REG_IsConversionOngoing>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 83aa 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d824      	bhi.n	80022ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	3b02      	subs	r3, #2
 8002286:	2b03      	cmp	r3, #3
 8002288:	d81b      	bhi.n	80022c2 <HAL_ADC_ConfigChannel+0x8e>
 800228a:	a201      	add	r2, pc, #4	@ (adr r2, 8002290 <HAL_ADC_ConfigChannel+0x5c>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022a9 	.word	0x080022a9
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022b9 	.word	0x080022b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022a0:	230c      	movs	r3, #12
 80022a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022a6:	e010      	b.n	80022ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022a8:	2312      	movs	r3, #18
 80022aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022ae:	e00c      	b.n	80022ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022b0:	2318      	movs	r3, #24
 80022b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022b6:	e008      	b.n	80022ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022c2:	2306      	movs	r3, #6
 80022c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022d8:	f7ff fd59 	bl	8001d8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fe30 	bl	8001f46 <LL_ADC_REG_IsConversionOngoing>
 80022e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fe3c 	bl	8001f6c <LL_ADC_INJ_IsConversionOngoing>
 80022f4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 81a4 	bne.w	800264a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 819f 	bne.w	800264a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fd64 	bl	8001de6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d00a      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	f7ff fcc8 	bl	8001ce4 <LL_ADC_SetOffset>
 8002354:	e179      	b.n	800264a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fce5 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x14e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fcda 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	e01e      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x18c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fccf 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e004      	b.n	80023be <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1a4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	e018      	b.n	800240a <HAL_ADC_ConfigChannel+0x1d6>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e004      	b.n	800240a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800240a:	429a      	cmp	r2, r3
 800240c:	d106      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fc9e 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc82 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x214>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc77 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e01e      	b.n	8002486 <HAL_ADC_ConfigChannel+0x252>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc6c 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800246a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800246e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800247a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_ConfigChannel+0x26a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e9b      	lsrs	r3, r3, #26
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	e018      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x29c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80024c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fc3b 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2102      	movs	r1, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fc1f 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x2da>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fc14 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e01e      	b.n	800254c <HAL_ADC_ConfigChannel+0x318>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc09 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x330>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e014      	b.n	800258e <HAL_ADC_ConfigChannel+0x35a>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e004      	b.n	800258e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258e:	429a      	cmp	r2, r3
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fbdc 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2103      	movs	r1, #3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fbc0 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x398>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2103      	movs	r1, #3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fbb5 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	e017      	b.n	80025fc <HAL_ADC_ConfigChannel+0x3c8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2103      	movs	r1, #3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fbaa 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x3e0>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e011      	b.n	8002638 <HAL_ADC_ConfigChannel+0x404>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002624:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb87 	bl	8001d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fc66 	bl	8001f20 <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 8140 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	461a      	mov	r2, r3
 800266a:	f7ff fbe7 	bl	8001e3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a8f      	ldr	r2, [pc, #572]	@ (80028b0 <HAL_ADC_ConfigChannel+0x67c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f040 8131 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x46e>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2b09      	cmp	r3, #9
 8002698:	bf94      	ite	ls
 800269a:	2301      	movls	r3, #1
 800269c:	2300      	movhi	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e019      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4a2>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80026be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d079      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4c2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	e015      	b.n	8002722 <HAL_ADC_ConfigChannel+0x4ee>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002706:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x50e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	e017      	b.n	8002772 <HAL_ADC_ConfigChannel+0x53e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002752:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800275e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	ea42 0103 	orr.w	r1, r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x564>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	e018      	b.n	80027ca <HAL_ADC_ConfigChannel+0x596>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ca:	430b      	orrs	r3, r1
 80027cc:	e081      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5b6>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e8:	e015      	b.n	8002816 <HAL_ADC_ConfigChannel+0x5e2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x602>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	e017      	b.n	8002866 <HAL_ADC_ConfigChannel+0x632>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	61bb      	str	r3, [r7, #24]
  return result;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	ea42 0103 	orr.w	r1, r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x65e>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	3301      	adds	r3, #1
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1e      	subs	r3, #30
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002890:	e01e      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x69c>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	60fb      	str	r3, [r7, #12]
  return result;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e006      	b.n	80028bc <HAL_ADC_ConfigChannel+0x688>
 80028ae:	bf00      	nop
 80028b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	3b1e      	subs	r3, #30
 80028ca:	051b      	lsls	r3, r3, #20
 80028cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7ff fa85 	bl	8001de6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07a      	beq.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e8:	4843      	ldr	r0, [pc, #268]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80028ea:	f7ff f9ed 	bl	8001cc8 <LL_ADC_GetCommonPathInternalCh>
 80028ee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a41      	ldr	r2, [pc, #260]	@ (80029fc <HAL_ADC_ConfigChannel+0x7c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12c      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d126      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7cc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_ADC_ConfigChannel+0x6e8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_ADC_ConfigChannel+0x7d0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d15d      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002924:	4619      	mov	r1, r3
 8002926:	4834      	ldr	r0, [pc, #208]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002928:	f7ff f9bb 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_ADC_ConfigChannel+0x7d4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <HAL_ADC_ConfigChannel+0x7d8>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002946:	e002      	b.n	800294e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3b01      	subs	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002954:	e040      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_ADC_ConfigChannel+0x7dc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d118      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d112      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x74c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a22      	ldr	r2, [pc, #136]	@ (8002a04 <HAL_ADC_ConfigChannel+0x7d0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d12d      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002988:	4619      	mov	r1, r3
 800298a:	481b      	ldr	r0, [pc, #108]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800298c:	f7ff f989 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002990:	e024      	b.n	80029dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1f      	ldr	r2, [pc, #124]	@ (8002a14 <HAL_ADC_ConfigChannel+0x7e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d120      	bne.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7cc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d115      	bne.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029ba:	4619      	mov	r1, r3
 80029bc:	480e      	ldr	r0, [pc, #56]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80029be:	f7ff f970 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
 80029c2:	e00c      	b.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80029d6:	e002      	b.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d8:	bf00      	nop
 80029da:	e000      	b.n	80029de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	37d8      	adds	r7, #216	@ 0xd8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	80080000 	.word	0x80080000
 80029f8:	50040300 	.word	0x50040300
 80029fc:	c7520000 	.word	0xc7520000
 8002a00:	50040000 	.word	0x50040000
 8002a04:	50040200 	.word	0x50040200
 8002a08:	20000118 	.word	0x20000118
 8002a0c:	053e2d63 	.word	0x053e2d63
 8002a10:	cb840000 	.word	0xcb840000
 8002a14:	80000001 	.word	0x80000001

08002a18 <LL_ADC_IsEnabled>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_IsEnabled+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_IsEnabled+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d101      	bne.n	8002a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b09f      	sub	sp, #124	@ 0x7c
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e093      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a47      	ldr	r2, [pc, #284]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a9c:	4b46      	ldr	r3, [pc, #280]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	e001      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e072      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ffb9 	bl	8002a3e <LL_ADC_REG_IsConversionOngoing>
 8002acc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ffb3 	bl	8002a3e <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d154      	bne.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d151      	bne.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ae4:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02c      	beq.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b02:	035b      	lsls	r3, r3, #13
 8002b04:	430b      	orrs	r3, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b0c:	4829      	ldr	r0, [pc, #164]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b0e:	f7ff ff83 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b12:	4604      	mov	r4, r0
 8002b14:	4828      	ldr	r0, [pc, #160]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b16:	f7ff ff7f 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	431c      	orrs	r4, r3
 8002b1e:	4828      	ldr	r0, [pc, #160]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b20:	f7ff ff7a 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4323      	orrs	r3, r4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d137      	bne.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b34:	f023 030f 	bic.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	6811      	ldr	r1, [r2, #0]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	6892      	ldr	r2, [r2, #8]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b46:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b48:	e028      	b.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b56:	4817      	ldr	r0, [pc, #92]	@ (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b58:	f7ff ff5e 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	4816      	ldr	r0, [pc, #88]	@ (8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b60:	f7ff ff5a 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	431c      	orrs	r4, r3
 8002b68:	4815      	ldr	r0, [pc, #84]	@ (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b6a:	f7ff ff55 	bl	8002a18 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4323      	orrs	r3, r4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d112      	bne.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b7e:	f023 030f 	bic.w	r3, r3, #15
 8002b82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b86:	e009      	b.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b9a:	e000      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	377c      	adds	r7, #124	@ 0x7c
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	50040000 	.word	0x50040000
 8002bb8:	50040100 	.word	0x50040100
 8002bbc:	50040300 	.word	0x50040300
 8002bc0:	50040200 	.word	0x50040200

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	@ (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	@ (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	@ (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff8e 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff29 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff3e 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff8e 	bl	8002cb8 <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5d 	bl	8002c64 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff31 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffa2 	bl	8002d20 <SysTick_Config>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d008      	beq.n	8002e10 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2204      	movs	r2, #4
 8002e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e022      	b.n	8002e56 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	f003 021c 	and.w	r2, r3, #28
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d005      	beq.n	8002e86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e029      	b.n	8002eda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020e 	bic.w	r2, r2, #14
 8002e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f003 021c 	and.w	r2, r3, #28
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    }
  }
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef2:	e17f      	b.n	80031f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8171 	beq.w	80031ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x40>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d130      	bne.n	8002f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0201 	and.w	r2, r3, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d118      	bne.n	8002fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d017      	beq.n	8003000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80ac 	beq.w	80031ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	4b5f      	ldr	r3, [pc, #380]	@ (8003214 <HAL_GPIO_Init+0x330>)
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_GPIO_Init+0x330>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80030a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003214 <HAL_GPIO_Init+0x330>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003218 <HAL_GPIO_Init+0x334>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x242>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4f      	ldr	r2, [pc, #316]	@ (800321c <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003224 <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003228 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4b      	ldr	r2, [pc, #300]	@ (800322c <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4a      	ldr	r2, [pc, #296]	@ (8003230 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x22a>
 800310a:	2306      	movs	r3, #6
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800310e:	2307      	movs	r3, #7
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003126:	2300      	movs	r3, #0
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003138:	4937      	ldr	r1, [pc, #220]	@ (8003218 <HAL_GPIO_Init+0x334>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_GPIO_Init+0x350>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800316a:	4a32      	ldr	r2, [pc, #200]	@ (8003234 <HAL_GPIO_Init+0x350>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003170:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <HAL_GPIO_Init+0x350>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003194:	4a27      	ldr	r2, [pc, #156]	@ (8003234 <HAL_GPIO_Init+0x350>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800319a:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_GPIO_Init+0x350>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031be:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_GPIO_Init+0x350>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_GPIO_Init+0x350>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031e8:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <HAL_GPIO_Init+0x350>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3301      	adds	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f ae78 	bne.w	8002ef4 <HAL_GPIO_Init+0x10>
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	48000c00 	.word	0x48000c00
 8003228:	48001000 	.word	0x48001000
 800322c:	48001400 	.word	0x48001400
 8003230:	48001800 	.word	0x48001800
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003254:	e002      	b.n	800325c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e08d      	b.n	8003396 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe f97a 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	e006      	b.n	80032f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d108      	bne.n	800330a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e007      	b.n	800331a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800332c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800333c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d138      	bne.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033be:	2302      	movs	r3, #2
 80033c0:	e032      	b.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d139      	bne.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003454:	2302      	movs	r3, #2
 8003456:	e033      	b.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	@ 0x24
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f6:	d130      	bne.n	800355a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f8:	4b23      	ldr	r3, [pc, #140]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003504:	d038      	beq.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800350e:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003510:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2232      	movs	r2, #50	@ 0x32
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	3301      	adds	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352c:	e002      	b.n	8003534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3b01      	subs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003534:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003540:	d102      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f2      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003548:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d110      	bne.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e00f      	b.n	800357a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800355a:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003566:	d007      	beq.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003568:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003570:	4a05      	ldr	r2, [pc, #20]	@ (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40007000 	.word	0x40007000
 800358c:	20000118 	.word	0x20000118
 8003590:	431bde83 	.word	0x431bde83

08003594 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e3ca      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4b97      	ldr	r3, [pc, #604]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b0:	4b94      	ldr	r3, [pc, #592]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80e4 	beq.w	8003790 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_RCC_OscConfig+0x4a>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	f040 808b 	bne.w	80036ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 8087 	bne.w	80036ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035de:	4b89      	ldr	r3, [pc, #548]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e3a2      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	4b82      	ldr	r3, [pc, #520]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_RCC_OscConfig+0x7c>
 8003606:	4b7f      	ldr	r3, [pc, #508]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800360e:	e005      	b.n	800361c <HAL_RCC_OscConfig+0x88>
 8003610:	4b7c      	ldr	r3, [pc, #496]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361c:	4293      	cmp	r3, r2
 800361e:	d223      	bcs.n	8003668 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd55 	bl	80040d4 <RCC_SetFlashLatencyFromMSIRange>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e383      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003634:	4b73      	ldr	r3, [pc, #460]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a72      	ldr	r2, [pc, #456]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b70      	ldr	r3, [pc, #448]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	496d      	ldr	r1, [pc, #436]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003652:	4b6c      	ldr	r3, [pc, #432]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	4968      	ldr	r1, [pc, #416]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
 8003666:	e025      	b.n	80036b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003668:	4b66      	ldr	r3, [pc, #408]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800366e:	f043 0308 	orr.w	r3, r3, #8
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b63      	ldr	r3, [pc, #396]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4960      	ldr	r1, [pc, #384]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003686:	4b5f      	ldr	r3, [pc, #380]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	495b      	ldr	r1, [pc, #364]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fd15 	bl	80040d4 <RCC_SetFlashLatencyFromMSIRange>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e343      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b4:	f000 fc4a 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b52      	ldr	r3, [pc, #328]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	4950      	ldr	r1, [pc, #320]	@ (8003808 <HAL_RCC_OscConfig+0x274>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	4a4e      	ldr	r2, [pc, #312]	@ (800380c <HAL_RCC_OscConfig+0x278>)
 80036d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fa73 	bl	8001bc4 <HAL_InitTick>
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d052      	beq.n	800378e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	e327      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d032      	beq.n	800375a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f4:	4b43      	ldr	r3, [pc, #268]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a42      	ldr	r2, [pc, #264]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003700:	f7fe fab0 	bl	8001c64 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003708:	f7fe faac 	bl	8001c64 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e310      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371a:	4b3a      	ldr	r3, [pc, #232]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003726:	4b37      	ldr	r3, [pc, #220]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a36      	ldr	r2, [pc, #216]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b34      	ldr	r3, [pc, #208]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4931      	ldr	r1, [pc, #196]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003744:	4b2f      	ldr	r3, [pc, #188]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	492c      	ldr	r1, [pc, #176]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
 8003758:	e01a      	b.n	8003790 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800375a:	4b2a      	ldr	r3, [pc, #168]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a29      	ldr	r2, [pc, #164]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003766:	f7fe fa7d 	bl	8001c64 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376e:	f7fe fa79 	bl	8001c64 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e2dd      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x1da>
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800378e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d074      	beq.n	8003886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d005      	beq.n	80037ae <HAL_RCC_OscConfig+0x21a>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d10e      	bne.n	80037c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d064      	beq.n	8003884 <HAL_RCC_OscConfig+0x2f0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d160      	bne.n	8003884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e2ba      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x24a>
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e026      	b.n	800382c <HAL_RCC_OscConfig+0x298>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_OscConfig+0x280>
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b03      	ldr	r3, [pc, #12]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a02      	ldr	r2, [pc, #8]	@ (8003804 <HAL_RCC_OscConfig+0x270>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x298>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	080081a0 	.word	0x080081a0
 800380c:	20000118 	.word	0x20000118
 8003810:	2000011c 	.word	0x2000011c
 8003814:	4ba0      	ldr	r3, [pc, #640]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a9f      	ldr	r2, [pc, #636]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b9d      	ldr	r3, [pc, #628]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a9c      	ldr	r2, [pc, #624]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fa16 	bl	8001c64 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fa12 	bl	8001c64 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e276      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b92      	ldr	r3, [pc, #584]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x2a8>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fa02 	bl	8001c64 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe f9fe 	bl	8001c64 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e262      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x2d0>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d060      	beq.n	8003954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_OscConfig+0x310>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d116      	bne.n	80038d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x328>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e23f      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b76      	ldr	r3, [pc, #472]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	4973      	ldr	r1, [pc, #460]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	e040      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d023      	beq.n	8003922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038da:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe f9bd 	bl	8001c64 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe f9b9 	bl	8001c64 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e21d      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	4b65      	ldr	r3, [pc, #404]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	4b62      	ldr	r3, [pc, #392]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	495f      	ldr	r1, [pc, #380]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	e018      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b5d      	ldr	r3, [pc, #372]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe f999 	bl	8001c64 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe f995 	bl	8001c64 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1f9      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003948:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d03c      	beq.n	80039da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003968:	4b4b      	ldr	r3, [pc, #300]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800396e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f974 	bl	8001c64 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003980:	f7fe f970 	bl	8001c64 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1d4      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ef      	beq.n	8003980 <HAL_RCC_OscConfig+0x3ec>
 80039a0:	e01b      	b.n	80039da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7fe f957 	bl	8001c64 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fe f953 	bl	8001c64 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1b7      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039cc:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80a6 	beq.w	8003b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	4a26      	ldr	r2, [pc, #152]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a04:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a14:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d118      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a20:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f91a 	bl	8001c64 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fe f916 	bl	8001c64 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e17a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a46:	4b15      	ldr	r3, [pc, #84]	@ (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4d8>
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a60:	4a0d      	ldr	r2, [pc, #52]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a6a:	e029      	b.n	8003ac0 <HAL_RCC_OscConfig+0x52c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d115      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x50c>
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	4a07      	ldr	r2, [pc, #28]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a84:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	4a03      	ldr	r2, [pc, #12]	@ (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a94:	e014      	b.n	8003ac0 <HAL_RCC_OscConfig+0x52c>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	4a9b      	ldr	r2, [pc, #620]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab0:	4b98      	ldr	r3, [pc, #608]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	4a97      	ldr	r2, [pc, #604]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d016      	beq.n	8003af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f8cc 	bl	8001c64 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8c8 	bl	8001c64 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e12a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ed      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x53c>
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fe f8b5 	bl	8001c64 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe f8b1 	bl	8001c64 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e113      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b14:	4b7f      	ldr	r3, [pc, #508]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ed      	bne.n	8003afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b7a      	ldr	r3, [pc, #488]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	4a79      	ldr	r2, [pc, #484]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80fe 	beq.w	8003d3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	f040 80d0 	bne.w	8003ce8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b48:	4b72      	ldr	r3, [pc, #456]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d130      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	3b01      	subs	r3, #1
 8003b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d127      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d11f      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b88:	2a07      	cmp	r2, #7
 8003b8a:	bf14      	ite	ne
 8003b8c:	2201      	movne	r2, #1
 8003b8e:	2200      	moveq	r2, #0
 8003b90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d113      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d06e      	beq.n	8003c9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d069      	beq.n	8003c98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc4:	4b53      	ldr	r3, [pc, #332]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bd0:	4b50      	ldr	r3, [pc, #320]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ad      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003be0:	4b4c      	ldr	r3, [pc, #304]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bec:	f7fe f83a 	bl	8001c64 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe f836 	bl	8001c64 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e09a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c06:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c12:	4b40      	ldr	r3, [pc, #256]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b40      	ldr	r3, [pc, #256]	@ (8003d18 <HAL_RCC_OscConfig+0x784>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c22:	3a01      	subs	r2, #1
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c2c:	0212      	lsls	r2, r2, #8
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c34:	0852      	lsrs	r2, r2, #1
 8003c36:	3a01      	subs	r2, #1
 8003c38:	0552      	lsls	r2, r2, #21
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c40:	0852      	lsrs	r2, r2, #1
 8003c42:	3a01      	subs	r2, #1
 8003c44:	0652      	lsls	r2, r2, #25
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c4c:	0912      	lsrs	r2, r2, #4
 8003c4e:	0452      	lsls	r2, r2, #17
 8003c50:	430a      	orrs	r2, r1
 8003c52:	4930      	ldr	r1, [pc, #192]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c58:	4b2e      	ldr	r3, [pc, #184]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c64:	4b2b      	ldr	r3, [pc, #172]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c70:	f7fd fff8 	bl	8001c64 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fff4 	bl	8001c64 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e058      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c96:	e050      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e04f      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d148      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb4:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc0:	f7fd ffd0 	bl	8001c64 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd ffcc 	bl	8001c64 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e030      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x734>
 8003ce6:	e028      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d023      	beq.n	8003d36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a08      	ldr	r2, [pc, #32]	@ (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd ffb3 	bl	8001c64 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	e00c      	b.n	8003d1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fd ffaf 	bl	8001c64 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d905      	bls.n	8003d1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e013      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ec      	bne.n	8003d02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4905      	ldr	r1, [pc, #20]	@ (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_RCC_OscConfig+0x7b4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
 8003d34:	e001      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	feeefffc 	.word	0xfeeefffc

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0e7      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b75      	ldr	r3, [pc, #468]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b72      	ldr	r3, [pc, #456]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4970      	ldr	r1, [pc, #448]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0cf      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b66      	ldr	r3, [pc, #408]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d908      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b63      	ldr	r3, [pc, #396]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4960      	ldr	r1, [pc, #384]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04c      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0a6      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	4b54      	ldr	r3, [pc, #336]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e09a      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e02:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e08e      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e12:	4b4a      	ldr	r3, [pc, #296]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e086      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b46      	ldr	r3, [pc, #280]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4943      	ldr	r1, [pc, #268]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e34:	f7fd ff16 	bl	8001c64 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fd ff12 	bl	8001c64 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e06e      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b3a      	ldr	r3, [pc, #232]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d208      	bcs.n	8003e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	492b      	ldr	r1, [pc, #172]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e92:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d210      	bcs.n	8003ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea0:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 0207 	bic.w	r2, r3, #7
 8003ea8:	4923      	ldr	r1, [pc, #140]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb0:	4b21      	ldr	r3, [pc, #132]	@ (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e036      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ece:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4918      	ldr	r1, [pc, #96]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eec:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4910      	ldr	r1, [pc, #64]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f00:	f000 f824 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	490b      	ldr	r1, [pc, #44]	@ (8003f40 <HAL_RCC_ClockConfig+0x1f4>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_ClockConfig+0x1fc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd fe4d 	bl	8001bc4 <HAL_InitTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	080081a0 	.word	0x080081a0
 8003f44:	20000118 	.word	0x20000118
 8003f48:	2000011c 	.word	0x2000011c

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	@ 0x24
 8003f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f64:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d121      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d11e      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f80:	4b34      	ldr	r3, [pc, #208]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc4:	4b25      	ldr	r3, [pc, #148]	@ (800405c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd0:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d134      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fda:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ff0:	e005      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff4:	617b      	str	r3, [r7, #20]
      break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ff8:	4b19      	ldr	r3, [pc, #100]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffa:	617b      	str	r3, [r7, #20]
      break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	617b      	str	r3, [r7, #20]
      break;
 8004002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004004:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	3301      	adds	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	fb03 f202 	mul.w	r2, r3, r2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402a:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	0e5b      	lsrs	r3, r3, #25
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	3301      	adds	r3, #1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004044:	69bb      	ldr	r3, [r7, #24]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	080081b8 	.word	0x080081b8
 800405c:	00f42400 	.word	0x00f42400
 8004060:	007a1200 	.word	0x007a1200

08004064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <HAL_RCC_GetHCLKFreq+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000118 	.word	0x20000118

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004080:	f7ff fff0 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4904      	ldr	r1, [pc, #16]	@ (80040a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	080081b0 	.word	0x080081b0

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040ac:	f7ff ffda 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0adb      	lsrs	r3, r3, #11
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	@ (80040d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	080081b0 	.word	0x080081b0

080040d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e0:	4b2a      	ldr	r3, [pc, #168]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040ec:	f7ff f9ee 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 80040f0:	6178      	str	r0, [r7, #20]
 80040f2:	e014      	b.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b25      	ldr	r3, [pc, #148]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	4a24      	ldr	r2, [pc, #144]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004100:	4b22      	ldr	r3, [pc, #136]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800410c:	f7ff f9de 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 8004110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004116:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004124:	d10b      	bne.n	800413e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b80      	cmp	r3, #128	@ 0x80
 800412a:	d919      	bls.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004130:	d902      	bls.n	8004138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004132:	2302      	movs	r3, #2
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e013      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004138:	2301      	movs	r3, #1
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e010      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b80      	cmp	r3, #128	@ 0x80
 8004142:	d902      	bls.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004144:	2303      	movs	r3, #3
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e00a      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b80      	cmp	r3, #128	@ 0x80
 800414e:	d102      	bne.n	8004156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004150:	2302      	movs	r3, #2
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e004      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b70      	cmp	r3, #112	@ 0x70
 800415a:	d101      	bne.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800415c:	2301      	movs	r3, #1
 800415e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 0207 	bic.w	r2, r3, #7
 8004168:	4909      	ldr	r1, [pc, #36]	@ (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004170:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	40022000 	.word	0x40022000

08004194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800419c:	2300      	movs	r3, #0
 800419e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a0:	2300      	movs	r3, #0
 80041a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d041      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041b8:	d02a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041be:	d824      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041ca:	d81e      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041d6:	e018      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041d8:	4b86      	ldr	r3, [pc, #536]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a85      	ldr	r2, [pc, #532]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e4:	e015      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fabb 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3320      	adds	r3, #32
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fba6 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	74fb      	strb	r3, [r7, #19]
      break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004218:	4b76      	ldr	r3, [pc, #472]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004226:	4973      	ldr	r1, [pc, #460]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004248:	d02a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800424a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800424e:	d824      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004256:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800425a:	d81e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004264:	d010      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004266:	e018      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004268:	4b62      	ldr	r3, [pc, #392]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a61      	ldr	r2, [pc, #388]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fa73 	bl	8004768 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3320      	adds	r3, #32
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb5e 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	74fb      	strb	r3, [r7, #19]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042a8:	4b52      	ldr	r3, [pc, #328]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b6:	494f      	ldr	r1, [pc, #316]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a0 	beq.w	8004412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f0:	4a40      	ldr	r2, [pc, #256]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f8:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3a      	ldr	r2, [pc, #232]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004314:	f7fd fca6 	bl	8001c64 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431a:	e009      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fd fca2 	bl	8001c64 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	74fb      	strb	r3, [r7, #19]
        break;
 800432e:	e005      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004330:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d15c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004342:	4b2c      	ldr	r3, [pc, #176]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01f      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d019      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004372:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800437c:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fc61 	bl	8001c64 <HAL_GetTick>
 80043a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a4:	e00b      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd fc5d 	bl	8001c64 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d902      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	74fb      	strb	r3, [r7, #19]
            break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ec      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e2:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	74bb      	strb	r3, [r7, #18]
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004400:	7c7b      	ldrb	r3, [r7, #17]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b9e      	ldr	r3, [pc, #632]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	4a9d      	ldr	r2, [pc, #628]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800441e:	4b98      	ldr	r3, [pc, #608]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	f023 0203 	bic.w	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	4994      	ldr	r1, [pc, #592]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004440:	4b8f      	ldr	r3, [pc, #572]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	f023 020c 	bic.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444e:	498c      	ldr	r1, [pc, #560]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004462:	4b87      	ldr	r3, [pc, #540]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	4983      	ldr	r1, [pc, #524]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004484:	4b7e      	ldr	r3, [pc, #504]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	497b      	ldr	r1, [pc, #492]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044a6:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b4:	4972      	ldr	r1, [pc, #456]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d6:	496a      	ldr	r1, [pc, #424]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ea:	4b65      	ldr	r3, [pc, #404]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	4961      	ldr	r1, [pc, #388]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800450c:	4b5c      	ldr	r3, [pc, #368]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	4959      	ldr	r1, [pc, #356]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800452e:	4b54      	ldr	r3, [pc, #336]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453c:	4950      	ldr	r1, [pc, #320]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004550:	4b4b      	ldr	r3, [pc, #300]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	4948      	ldr	r1, [pc, #288]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004572:	4b43      	ldr	r3, [pc, #268]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	493f      	ldr	r1, [pc, #252]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d028      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004594:	4b3a      	ldr	r3, [pc, #232]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a2:	4937      	ldr	r1, [pc, #220]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b32      	ldr	r3, [pc, #200]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a31      	ldr	r2, [pc, #196]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e011      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f8c8 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045f2:	4b23      	ldr	r3, [pc, #140]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	491f      	ldr	r1, [pc, #124]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004610:	d106      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004612:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4a1a      	ldr	r2, [pc, #104]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800461c:	60d3      	str	r3, [r2, #12]
 800461e:	e011      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f899 	bl	8004768 <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465e:	4908      	ldr	r1, [pc, #32]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800466e:	d109      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b03      	ldr	r3, [pc, #12]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a02      	ldr	r2, [pc, #8]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800467a:	60d3      	str	r3, [r2, #12]
 800467c:	e014      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f867 	bl	8004768 <RCCEx_PLLSAI1_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c2:	4928      	ldr	r1, [pc, #160]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d2:	d10d      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f844 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	74bb      	strb	r3, [r7, #18]
 80046ee:	e011      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3320      	adds	r3, #32
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f925 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004720:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800472e:	490d      	ldr	r1, [pc, #52]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004752:	4904      	ldr	r1, [pc, #16]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800475a:	7cbb      	ldrb	r3, [r7, #18]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000

08004768 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004776:	4b75      	ldr	r3, [pc, #468]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004782:	4b72      	ldr	r3, [pc, #456]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0203 	and.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d10d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
       ||
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800479a:	4b6c      	ldr	r3, [pc, #432]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
       ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d047      	beq.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e044      	b.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d018      	beq.n	80047ee <RCCEx_PLLSAI1_Config+0x86>
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d825      	bhi.n	800480c <RCCEx_PLLSAI1_Config+0xa4>
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d002      	beq.n	80047ca <RCCEx_PLLSAI1_Config+0x62>
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d009      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x74>
 80047c8:	e020      	b.n	800480c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ca:	4b60      	ldr	r3, [pc, #384]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11d      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047da:	e01a      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047dc:	4b5b      	ldr	r3, [pc, #364]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ec:	e013      	b.n	8004816 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ee:	4b57      	ldr	r3, [pc, #348]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047fa:	4b54      	ldr	r3, [pc, #336]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800480a:	e006      	b.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e004      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481a:	bf00      	nop
    }

    if(status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004822:	4b4a      	ldr	r3, [pc, #296]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	430b      	orrs	r3, r1
 8004838:	4944      	ldr	r1, [pc, #272]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d17d      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004844:	4b41      	ldr	r3, [pc, #260]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a40      	ldr	r2, [pc, #256]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800484e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fd fa08 	bl	8001c64 <HAL_GetTick>
 8004854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004856:	e009      	b.n	800486c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004858:	f7fd fa04 	bl	8001c64 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d902      	bls.n	800486c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	73fb      	strb	r3, [r7, #15]
        break;
 800486a:	e005      	b.n	8004878 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800486c:	4b37      	ldr	r3, [pc, #220]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ef      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d160      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d111      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004884:	4b31      	ldr	r3, [pc, #196]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800488c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	0211      	lsls	r1, r2, #8
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	0912      	lsrs	r2, r2, #4
 800489c:	0452      	lsls	r2, r2, #17
 800489e:	430a      	orrs	r2, r1
 80048a0:	492a      	ldr	r1, [pc, #168]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	610b      	str	r3, [r1, #16]
 80048a6:	e027      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d112      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ae:	4b27      	ldr	r3, [pc, #156]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	0211      	lsls	r1, r2, #8
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6912      	ldr	r2, [r2, #16]
 80048c4:	0852      	lsrs	r2, r2, #1
 80048c6:	3a01      	subs	r2, #1
 80048c8:	0552      	lsls	r2, r2, #21
 80048ca:	430a      	orrs	r2, r1
 80048cc:	491f      	ldr	r1, [pc, #124]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	610b      	str	r3, [r1, #16]
 80048d2:	e011      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6952      	ldr	r2, [r2, #20]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4916      	ldr	r1, [pc, #88]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a13      	ldr	r2, [pc, #76]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd f9ae 	bl	8001c64 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800490c:	f7fd f9aa 	bl	8001c64 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
          break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	4904      	ldr	r1, [pc, #16]	@ (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800495e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800496a:	4b67      	ldr	r3, [pc, #412]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0203 	and.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d10d      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
       ||
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004982:	4b61      	ldr	r3, [pc, #388]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
       ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d047      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e044      	b.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d018      	beq.n	80049d6 <RCCEx_PLLSAI2_Config+0x86>
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d825      	bhi.n	80049f4 <RCCEx_PLLSAI2_Config+0xa4>
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <RCCEx_PLLSAI2_Config+0x62>
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d009      	beq.n	80049c4 <RCCEx_PLLSAI2_Config+0x74>
 80049b0:	e020      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b2:	4b55      	ldr	r3, [pc, #340]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11d      	bne.n	80049fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c2:	e01a      	b.n	80049fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c4:	4b50      	ldr	r3, [pc, #320]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d4:	e013      	b.n	80049fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e2:	4b49      	ldr	r3, [pc, #292]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f2:	e006      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      break;
 80049f8:	e004      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6819      	ldr	r1, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	4939      	ldr	r1, [pc, #228]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d167      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a2c:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd f914 	bl	8001c64 <HAL_GetTick>
 8004a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a3e:	e009      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a40:	f7fd f910 	bl	8001c64 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d902      	bls.n	8004a54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	73fb      	strb	r3, [r7, #15]
        break;
 8004a52:	e005      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a54:	4b2c      	ldr	r3, [pc, #176]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ef      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d14a      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6c:	4b26      	ldr	r3, [pc, #152]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68d2      	ldr	r2, [r2, #12]
 8004a82:	0912      	lsrs	r2, r2, #4
 8004a84:	0452      	lsls	r2, r2, #17
 8004a86:	430a      	orrs	r2, r1
 8004a88:	491f      	ldr	r1, [pc, #124]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	614b      	str	r3, [r1, #20]
 8004a8e:	e011      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a90:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	0211      	lsls	r1, r2, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6912      	ldr	r2, [r2, #16]
 8004aa6:	0852      	lsrs	r2, r2, #1
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0652      	lsls	r2, r2, #25
 8004aac:	430a      	orrs	r2, r1
 8004aae:	4916      	ldr	r1, [pc, #88]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd f8d0 	bl	8001c64 <HAL_GetTick>
 8004ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ac6:	e009      	b.n	8004adc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ac8:	f7fd f8cc 	bl	8001c64 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d902      	bls.n	8004adc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8004ada:	e005      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004adc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4904      	ldr	r1, [pc, #16]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e049      	b.n	8004bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc feb4 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 ff74 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e047      	b.n	8004c64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <HAL_TIM_Base_Start+0xb4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01d      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bee:	d018      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c74 <HAL_TIM_Base_Start+0xb8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <HAL_TIM_Base_Start+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <HAL_TIM_Base_Start+0xc0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	@ (8004c80 <HAL_TIM_Base_Start+0xc4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIM_Base_Start+0x66>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <HAL_TIM_Base_Start+0xc8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d115      	bne.n	8004c4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <HAL_TIM_Base_Start+0xcc>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b06      	cmp	r3, #6
 8004c32:	d015      	beq.n	8004c60 <HAL_TIM_Base_Start+0xa4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3a:	d011      	beq.n	8004c60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	e008      	b.n	8004c60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	00010007 	.word	0x00010007

08004c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e049      	b.n	8004d32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fcc6 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 feb4 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e03c      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e02f      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e022      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d109      	bne.n	8004dae <HAL_TIM_PWM_Start+0x72>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e015      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0x8c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e008      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e09c      	b.n	8004f1c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xb6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	e023      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0xc6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	e01b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xd6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xf6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fa8c 	bl	8006360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <HAL_TIM_PWM_Start+0x1e8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a34      	ldr	r2, [pc, #208]	@ (8004f28 <HAL_TIM_PWM_Start+0x1ec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <HAL_TIM_PWM_Start+0x1f0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a31      	ldr	r2, [pc, #196]	@ (8004f30 <HAL_TIM_PWM_Start+0x1f4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	@ (8004f34 <HAL_TIM_PWM_Start+0x1f8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_PWM_Start+0x142>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_PWM_Start+0x144>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a22      	ldr	r2, [pc, #136]	@ (8004f24 <HAL_TIM_PWM_Start+0x1e8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d018      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <HAL_TIM_PWM_Start+0x1fc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIM_PWM_Start+0x200>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_TIM_PWM_Start+0x204>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	@ (8004f28 <HAL_TIM_PWM_Start+0x1ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <HAL_TIM_PWM_Start+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d115      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_TIM_PWM_Start+0x208>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d015      	beq.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d011      	beq.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	e008      	b.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e000      	b.n	8004f1a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40013400 	.word	0x40013400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	00010007 	.word	0x00010007

08004f48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fb88 	bl	8001684 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fd56 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e041      	b.n	800508e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f839 	bl	8005096 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f000 fcfe 	bl	8005a38 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0208 	bic.w	r2, r2, #8
 800504a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e097      	b.n	80051ee <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc fb68 	bl	80017a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 fc9a 	bl	8005a38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800512c:	f023 0303 	bic.w	r3, r3, #3
 8005130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	4313      	orrs	r3, r2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800514a:	f023 030c 	bic.w	r3, r3, #12
 800514e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800515a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	4313      	orrs	r3, r2
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	011a      	lsls	r2, r3, #4
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	4313      	orrs	r3, r2
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005188:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005190:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4313      	orrs	r3, r2
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005206:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800520e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005216:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800521e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d110      	bne.n	8005248 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d102      	bne.n	8005232 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800522c:	7b7b      	ldrb	r3, [r7, #13]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d001      	beq.n	8005236 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e069      	b.n	800530a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005246:	e031      	b.n	80052ac <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d110      	bne.n	8005270 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005254:	7b3b      	ldrb	r3, [r7, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d001      	beq.n	800525e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e055      	b.n	800530a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800526e:	e01d      	b.n	80052ac <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d108      	bne.n	8005288 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800527c:	7b7b      	ldrb	r3, [r7, #13]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005282:	7b3b      	ldrb	r3, [r7, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d001      	beq.n	800528c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e03e      	b.n	800530a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_Encoder_Start+0xc4>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d008      	beq.n	80052ca <HAL_TIM_Encoder_Start+0xd4>
 80052b8:	e00f      	b.n	80052da <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f84c 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80052c8:	e016      	b.n	80052f8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	2104      	movs	r1, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f844 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80052d8:	e00e      	b.n	80052f8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f83c 	bl	8006360 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	2104      	movs	r1, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f835 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80052f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005322:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800532a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005332:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800533a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d110      	bne.n	8005364 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005348:	7b7b      	ldrb	r3, [r7, #13]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e089      	b.n	8005466 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005362:	e031      	b.n	80053c8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b04      	cmp	r3, #4
 8005368:	d110      	bne.n	800538c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	7bbb      	ldrb	r3, [r7, #14]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005370:	7b3b      	ldrb	r3, [r7, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e075      	b.n	8005466 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800538a:	e01d      	b.n	80053c8 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d108      	bne.n	80053a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005398:	7b7b      	ldrb	r3, [r7, #13]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d102      	bne.n	80053a4 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800539e:	7b3b      	ldrb	r3, [r7, #12]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d001      	beq.n	80053a8 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e05e      	b.n	8005466 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_Encoder_Start_IT+0xc4>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d010      	beq.n	80053f6 <HAL_TIM_Encoder_Start_IT+0xe4>
 80053d4:	e01f      	b.n	8005416 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2201      	movs	r2, #1
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 ffbe 	bl	8006360 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0202 	orr.w	r2, r2, #2
 80053f2:	60da      	str	r2, [r3, #12]
      break;
 80053f4:	e02e      	b.n	8005454 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	2104      	movs	r1, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 ffae 	bl	8006360 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0204 	orr.w	r2, r2, #4
 8005412:	60da      	str	r2, [r3, #12]
      break;
 8005414:	e01e      	b.n	8005454 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff9e 	bl	8006360 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2201      	movs	r2, #1
 800542a:	2104      	movs	r1, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f000 ff97 	bl	8006360 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0202 	orr.w	r2, r2, #2
 8005440:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0204 	orr.w	r2, r2, #4
 8005450:	60da      	str	r2, [r3, #12]
      break;
 8005452:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01b      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0202 	mvn.w	r2, #2
 80054a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fa9f 	bl	80059fc <HAL_TIM_IC_CaptureCallback>
 80054be:	e005      	b.n	80054cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa91 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 faa2 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0204 	mvn.w	r2, #4
 80054ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa79 	bl	80059fc <HAL_TIM_IC_CaptureCallback>
 800550a:	e005      	b.n	8005518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa6b 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa7c 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01b      	beq.n	800556a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0208 	mvn.w	r2, #8
 800553a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa53 	bl	80059fc <HAL_TIM_IC_CaptureCallback>
 8005556:	e005      	b.n	8005564 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa45 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa56 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01b      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f06f 0210 	mvn.w	r2, #16
 8005586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2208      	movs	r2, #8
 800558c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fa2d 	bl	80059fc <HAL_TIM_IC_CaptureCallback>
 80055a2:	e005      	b.n	80055b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa1f 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa30 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00c      	beq.n	80055da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0201 	mvn.w	r2, #1
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f9fd 	bl	80059d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00c      	beq.n	80055fe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 ffe7 	bl	80065cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00c      	beq.n	8005622 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 ffdf 	bl	80065e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f9ef 	bl	8005a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0220 	mvn.w	r2, #32
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 ffa7 	bl	80065b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_TIM_IC_ConfigChannel+0x1e>
 800568c:	2302      	movs	r3, #2
 800568e:	e088      	b.n	80057a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11b      	bne.n	80056d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80056ae:	f000 fd33 	bl	8006118 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 020c 	bic.w	r2, r2, #12
 80056c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6999      	ldr	r1, [r3, #24]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	619a      	str	r2, [r3, #24]
 80056d4:	e060      	b.n	8005798 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d11c      	bne.n	8005716 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056ec:	f000 fd82 	bl	80061f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6999      	ldr	r1, [r3, #24]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	021a      	lsls	r2, r3, #8
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	619a      	str	r2, [r3, #24]
 8005714:	e040      	b.n	8005798 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800572c:	f000 fd9f 	bl	800626e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 020c 	bic.w	r2, r2, #12
 800573e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69d9      	ldr	r1, [r3, #28]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	61da      	str	r2, [r3, #28]
 8005752:	e021      	b.n	8005798 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b0c      	cmp	r3, #12
 8005758:	d11c      	bne.n	8005794 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800576a:	f000 fdbc 	bl	80062e6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800577c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	021a      	lsls	r2, r3, #8
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	61da      	str	r2, [r3, #28]
 8005792:	e001      	b.n	8005798 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e0ff      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b14      	cmp	r3, #20
 80057d6:	f200 80f0 	bhi.w	80059ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057da:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005835 	.word	0x08005835
 80057e4:	080059bb 	.word	0x080059bb
 80057e8:	080059bb 	.word	0x080059bb
 80057ec:	080059bb 	.word	0x080059bb
 80057f0:	08005875 	.word	0x08005875
 80057f4:	080059bb 	.word	0x080059bb
 80057f8:	080059bb 	.word	0x080059bb
 80057fc:	080059bb 	.word	0x080059bb
 8005800:	080058b7 	.word	0x080058b7
 8005804:	080059bb 	.word	0x080059bb
 8005808:	080059bb 	.word	0x080059bb
 800580c:	080059bb 	.word	0x080059bb
 8005810:	080058f7 	.word	0x080058f7
 8005814:	080059bb 	.word	0x080059bb
 8005818:	080059bb 	.word	0x080059bb
 800581c:	080059bb 	.word	0x080059bb
 8005820:	08005939 	.word	0x08005939
 8005824:	080059bb 	.word	0x080059bb
 8005828:	080059bb 	.word	0x080059bb
 800582c:	080059bb 	.word	0x080059bb
 8005830:	08005979 	.word	0x08005979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f996 	bl	8005b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0204 	bic.w	r2, r2, #4
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	619a      	str	r2, [r3, #24]
      break;
 8005872:	e0a5      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fa06 	bl	8005c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	619a      	str	r2, [r3, #24]
      break;
 80058b4:	e084      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa6f 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0208 	orr.w	r2, r2, #8
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0204 	bic.w	r2, r2, #4
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	61da      	str	r2, [r3, #28]
      break;
 80058f4:	e064      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fad7 	bl	8005eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	61da      	str	r2, [r3, #28]
      break;
 8005936:	e043      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fb20 	bl	8005f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0208 	orr.w	r2, r2, #8
 8005952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0204 	bic.w	r2, r2, #4
 8005962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005976:	e023      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fb64 	bl	800604c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	021a      	lsls	r2, r3, #8
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059b8:	e002      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
      break;
 80059be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop

080059d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a40      	ldr	r2, [pc, #256]	@ (8005b4c <TIM_Base_SetConfig+0x114>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b50 <TIM_Base_SetConfig+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3c      	ldr	r2, [pc, #240]	@ (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b58 <TIM_Base_SetConfig+0x120>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3a      	ldr	r2, [pc, #232]	@ (8005b5c <TIM_Base_SetConfig+0x124>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b4c <TIM_Base_SetConfig+0x114>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a98:	d01b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b50 <TIM_Base_SetConfig+0x118>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b54 <TIM_Base_SetConfig+0x11c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2a      	ldr	r2, [pc, #168]	@ (8005b58 <TIM_Base_SetConfig+0x120>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a29      	ldr	r2, [pc, #164]	@ (8005b5c <TIM_Base_SetConfig+0x124>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a28      	ldr	r2, [pc, #160]	@ (8005b60 <TIM_Base_SetConfig+0x128>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a27      	ldr	r2, [pc, #156]	@ (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <TIM_Base_SetConfig+0x130>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <TIM_Base_SetConfig+0x114>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a11      	ldr	r2, [pc, #68]	@ (8005b60 <TIM_Base_SetConfig+0x128>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a10      	ldr	r2, [pc, #64]	@ (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005b68 <TIM_Base_SetConfig+0x130>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d103      	bne.n	8005b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	615a      	str	r2, [r3, #20]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800

08005b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f023 0201 	bic.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 0302 	bic.w	r3, r3, #2
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c78 <TIM_OC1_SetConfig+0x10c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00f      	beq.n	8005bec <TIM_OC1_SetConfig+0x80>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2b      	ldr	r2, [pc, #172]	@ (8005c7c <TIM_OC1_SetConfig+0x110>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <TIM_OC1_SetConfig+0x80>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c80 <TIM_OC1_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d007      	beq.n	8005bec <TIM_OC1_SetConfig+0x80>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <TIM_OC1_SetConfig+0x118>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC1_SetConfig+0x80>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a28      	ldr	r2, [pc, #160]	@ (8005c88 <TIM_OC1_SetConfig+0x11c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d10c      	bne.n	8005c06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0308 	bic.w	r3, r3, #8
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	@ (8005c78 <TIM_OC1_SetConfig+0x10c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00f      	beq.n	8005c2e <TIM_OC1_SetConfig+0xc2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	@ (8005c7c <TIM_OC1_SetConfig+0x110>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_OC1_SetConfig+0xc2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	@ (8005c80 <TIM_OC1_SetConfig+0x114>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_OC1_SetConfig+0xc2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <TIM_OC1_SetConfig+0x118>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC1_SetConfig+0xc2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	@ (8005c88 <TIM_OC1_SetConfig+0x11c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0210 	bic.w	r2, r3, #16
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0320 	bic.w	r3, r3, #32
 8005cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a28      	ldr	r2, [pc, #160]	@ (8005d8c <TIM_OC2_SetConfig+0x100>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC2_SetConfig+0x6c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a27      	ldr	r2, [pc, #156]	@ (8005d90 <TIM_OC2_SetConfig+0x104>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10d      	bne.n	8005d14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <TIM_OC2_SetConfig+0x100>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00f      	beq.n	8005d3c <TIM_OC2_SetConfig+0xb0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d90 <TIM_OC2_SetConfig+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <TIM_OC2_SetConfig+0xb0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1b      	ldr	r2, [pc, #108]	@ (8005d94 <TIM_OC2_SetConfig+0x108>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_OC2_SetConfig+0xb0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <TIM_OC2_SetConfig+0x10c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC2_SetConfig+0xb0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <TIM_OC2_SetConfig+0x110>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d113      	bne.n	8005d64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	@ (8005e9c <TIM_OC3_SetConfig+0xfc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC3_SetConfig+0x6a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a26      	ldr	r2, [pc, #152]	@ (8005ea0 <TIM_OC3_SetConfig+0x100>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10d      	bne.n	8005e26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	@ (8005e9c <TIM_OC3_SetConfig+0xfc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <TIM_OC3_SetConfig+0xae>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <TIM_OC3_SetConfig+0x100>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <TIM_OC3_SetConfig+0xae>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea4 <TIM_OC3_SetConfig+0x104>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <TIM_OC3_SetConfig+0xae>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <TIM_OC3_SetConfig+0x108>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC3_SetConfig+0xae>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <TIM_OC3_SetConfig+0x10c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d113      	bne.n	8005e76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <TIM_OC4_SetConfig+0xc0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00f      	beq.n	8005f34 <TIM_OC4_SetConfig+0x84>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <TIM_OC4_SetConfig+0xc4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <TIM_OC4_SetConfig+0x84>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <TIM_OC4_SetConfig+0xc8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <TIM_OC4_SetConfig+0x84>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	@ (8005f7c <TIM_OC4_SetConfig+0xcc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC4_SetConfig+0x84>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a14      	ldr	r2, [pc, #80]	@ (8005f80 <TIM_OC4_SetConfig+0xd0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d109      	bne.n	8005f48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	@ (8006038 <TIM_OC5_SetConfig+0xb4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00f      	beq.n	8005ffe <TIM_OC5_SetConfig+0x7a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	@ (800603c <TIM_OC5_SetConfig+0xb8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <TIM_OC5_SetConfig+0x7a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <TIM_OC5_SetConfig+0xbc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <TIM_OC5_SetConfig+0x7a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a14      	ldr	r2, [pc, #80]	@ (8006044 <TIM_OC5_SetConfig+0xc0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC5_SetConfig+0x7a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a13      	ldr	r2, [pc, #76]	@ (8006048 <TIM_OC5_SetConfig+0xc4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d109      	bne.n	8006012 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	051b      	lsls	r3, r3, #20
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a18      	ldr	r2, [pc, #96]	@ (8006104 <TIM_OC6_SetConfig+0xb8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00f      	beq.n	80060c8 <TIM_OC6_SetConfig+0x7c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a17      	ldr	r2, [pc, #92]	@ (8006108 <TIM_OC6_SetConfig+0xbc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_OC6_SetConfig+0x7c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a16      	ldr	r2, [pc, #88]	@ (800610c <TIM_OC6_SetConfig+0xc0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_OC6_SetConfig+0x7c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <TIM_OC6_SetConfig+0xc4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC6_SetConfig+0x7c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a14      	ldr	r2, [pc, #80]	@ (8006114 <TIM_OC6_SetConfig+0xc8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d109      	bne.n	80060dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40013400 	.word	0x40013400
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800

08006118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0201 	bic.w	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a26      	ldr	r2, [pc, #152]	@ (80061dc <TIM_TI1_SetConfig+0xc4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d017      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614c:	d013      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a23      	ldr	r2, [pc, #140]	@ (80061e0 <TIM_TI1_SetConfig+0xc8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a22      	ldr	r2, [pc, #136]	@ (80061e4 <TIM_TI1_SetConfig+0xcc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a21      	ldr	r2, [pc, #132]	@ (80061e8 <TIM_TI1_SetConfig+0xd0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a20      	ldr	r2, [pc, #128]	@ (80061ec <TIM_TI1_SetConfig+0xd4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_TI1_SetConfig+0x5e>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <TIM_TI1_SetConfig+0xd8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d101      	bne.n	800617a <TIM_TI1_SetConfig+0x62>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <TIM_TI1_SetConfig+0x64>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e003      	b.n	800619a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f023 030a 	bic.w	r3, r3, #10
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f003 030a 	and.w	r3, r3, #10
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40014000 	.word	0x40014000

080061f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 0210 	bic.w	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	031b      	lsls	r3, r3, #12
 8006238:	b29b      	uxth	r3, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006246:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b087      	sub	sp, #28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006324:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	031b      	lsls	r3, r3, #12
 800632a:	b29b      	uxth	r3, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006338:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	031b      	lsls	r3, r3, #12
 800633e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2201      	movs	r2, #1
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1a      	ldr	r2, [r3, #32]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	fa01 f303 	lsl.w	r3, r1, r3
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e068      	b.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2e      	ldr	r2, [pc, #184]	@ (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2d      	ldr	r2, [pc, #180]	@ (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006436:	d018      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1a      	ldr	r2, [pc, #104]	@ (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a13      	ldr	r2, [pc, #76]	@ (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d10c      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4313      	orrs	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40014000 	.word	0x40014000

080064bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e065      	b.n	80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a16      	ldr	r2, [pc, #88]	@ (80065b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a14      	ldr	r2, [pc, #80]	@ (80065b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d115      	bne.n	8006592 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	051b      	lsls	r3, r3, #20
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400

080065b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e040      	b.n	8006688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb f99a 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2224      	movs	r2, #36	@ 0x24
 8006620:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fe74 	bl	8007328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fbb9 	bl	8006db8 <UART_SetConfig>
 8006646:	4603      	mov	r3, r0
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e01b      	b.n	8006688 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800665e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800666e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fef3 	bl	800746c <UART_CheckIdleState>
 8006686:	4603      	mov	r3, r0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	@ 0x28
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d177      	bne.n	8006798 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_UART_Transmit+0x24>
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e070      	b.n	800679a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2221      	movs	r2, #33	@ 0x21
 80066c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066c6:	f7fb facd 	bl	8001c64 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e4:	d108      	bne.n	80066f8 <HAL_UART_Transmit+0x68>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e003      	b.n	8006700 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006700:	e02f      	b.n	8006762 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ff55 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e03b      	b.n	800679a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	881a      	ldrh	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006734:	b292      	uxth	r2, r2
 8006736:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	3302      	adds	r3, #2
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e007      	b.n	8006750 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1c9      	bne.n	8006702 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2200      	movs	r2, #0
 8006776:	2140      	movs	r1, #64	@ 0x40
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 ff1f 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e005      	b.n	800679a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	e000      	b.n	800679a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b0ba      	sub	sp, #232	@ 0xe8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067d2:	4013      	ands	r3, r2
 80067d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d115      	bne.n	800680c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 82ae 	beq.w	8006d5e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
      }
      return;
 800680a:	e2a8      	b.n	8006d5e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800680c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8117 	beq.w	8006a44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006826:	4b85      	ldr	r3, [pc, #532]	@ (8006a3c <HAL_UART_IRQHandler+0x298>)
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 810a 	beq.w	8006a44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d011      	beq.n	8006860 <HAL_UART_IRQHandler+0xbc>
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2201      	movs	r2, #1
 800684e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d011      	beq.n	8006890 <HAL_UART_IRQHandler+0xec>
 800686c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2202      	movs	r2, #2
 800687e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006886:	f043 0204 	orr.w	r2, r3, #4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d011      	beq.n	80068c0 <HAL_UART_IRQHandler+0x11c>
 800689c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2204      	movs	r2, #4
 80068ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	f043 0202 	orr.w	r2, r3, #2
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d017      	beq.n	80068fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2208      	movs	r2, #8
 80068ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f2:	f043 0208 	orr.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006904:	2b00      	cmp	r3, #0
 8006906:	d012      	beq.n	800692e <HAL_UART_IRQHandler+0x18a>
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00c      	beq.n	800692e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800691c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8214 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800693a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00d      	beq.n	8006962 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006976:	2b40      	cmp	r3, #64	@ 0x40
 8006978:	d005      	beq.n	8006986 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800697e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04f      	beq.n	8006a26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fe7f 	bl	800768a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006996:	2b40      	cmp	r3, #64	@ 0x40
 8006998:	d141      	bne.n	8006a1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1d9      	bne.n	800699a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d013      	beq.n	8006a16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f2:	4a13      	ldr	r2, [pc, #76]	@ (8006a40 <HAL_UART_IRQHandler+0x29c>)
 80069f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fc fa31 	bl	8002e62 <HAL_DMA_Abort_IT>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d017      	beq.n	8006a36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e00f      	b.n	8006a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9b8 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e00b      	b.n	8006a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9b4 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	e007      	b.n	8006a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9b0 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a34:	e195      	b.n	8006d62 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a36:	bf00      	nop
    return;
 8006a38:	e193      	b.n	8006d62 <HAL_UART_IRQHandler+0x5be>
 8006a3a:	bf00      	nop
 8006a3c:	04000120 	.word	0x04000120
 8006a40:	08007753 	.word	0x08007753

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	f040 814e 	bne.w	8006cea <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8147 	beq.w	8006cea <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8140 	beq.w	8006cea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7c:	2b40      	cmp	r3, #64	@ 0x40
 8006a7e:	f040 80b8 	bne.w	8006bf2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8167 	beq.w	8006d66 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	f080 815f 	bcs.w	8006d66 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 8086 	bne.w	8006bd0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006af2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1da      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e1      	bne.n	8006b0e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e3      	bne.n	8006b4a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba0:	f023 0310 	bic.w	r3, r3, #16
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e4      	bne.n	8006b90 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fc f90b 	bl	8002de6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8d8 	bl	8006da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bf0:	e0b9      	b.n	8006d66 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80ab 	beq.w	8006d6a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80a6 	beq.w	8006d6a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e4      	bne.n	8006c1e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	623b      	str	r3, [r7, #32]
   return(result);
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c78:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e3      	bne.n	8006c54 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f023 0310 	bic.w	r3, r3, #16
 8006cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e4      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f85c 	bl	8006da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ce8:	e03f      	b.n	8006d6a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <HAL_UART_IRQHandler+0x570>
 8006cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fd60 	bl	80077d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d12:	e02d      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00e      	beq.n	8006d3e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01c      	beq.n	8006d6e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
    }
    return;
 8006d3c:	e017      	b.n	8006d6e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d012      	beq.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fd11 	bl	800777e <UART_EndTransmit_IT>
    return;
 8006d5c:	e008      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d5e:	bf00      	nop
 8006d60:	e006      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d70:	37e8      	adds	r7, #232	@ 0xe8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop

08006d78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dbc:	b08a      	sub	sp, #40	@ 0x28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4ba4      	ldr	r3, [pc, #656]	@ (8007078 <UART_SetConfig+0x2c0>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a99      	ldr	r2, [pc, #612]	@ (800707c <UART_SetConfig+0x2c4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e20:	4313      	orrs	r3, r2
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e34:	430a      	orrs	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a90      	ldr	r2, [pc, #576]	@ (8007080 <UART_SetConfig+0x2c8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d126      	bne.n	8006e90 <UART_SetConfig+0xd8>
 8006e42:	4b90      	ldr	r3, [pc, #576]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d81b      	bhi.n	8006e88 <UART_SetConfig+0xd0>
 8006e50:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <UART_SetConfig+0xa0>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e116      	b.n	800709e <UART_SetConfig+0x2e6>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e112      	b.n	800709e <UART_SetConfig+0x2e6>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e10e      	b.n	800709e <UART_SetConfig+0x2e6>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e10a      	b.n	800709e <UART_SetConfig+0x2e6>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e106      	b.n	800709e <UART_SetConfig+0x2e6>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a7c      	ldr	r2, [pc, #496]	@ (8007088 <UART_SetConfig+0x2d0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d138      	bne.n	8006f0c <UART_SetConfig+0x154>
 8006e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f003 030c 	and.w	r3, r3, #12
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d82d      	bhi.n	8006f04 <UART_SetConfig+0x14c>
 8006ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <UART_SetConfig+0xf8>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006f05 	.word	0x08006f05
 8006eb8:	08006f05 	.word	0x08006f05
 8006ebc:	08006f05 	.word	0x08006f05
 8006ec0:	08006ef5 	.word	0x08006ef5
 8006ec4:	08006f05 	.word	0x08006f05
 8006ec8:	08006f05 	.word	0x08006f05
 8006ecc:	08006f05 	.word	0x08006f05
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006f05 	.word	0x08006f05
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e0d8      	b.n	800709e <UART_SetConfig+0x2e6>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e0d4      	b.n	800709e <UART_SetConfig+0x2e6>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e0d0      	b.n	800709e <UART_SetConfig+0x2e6>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e0cc      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0a:	e0c8      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5e      	ldr	r2, [pc, #376]	@ (800708c <UART_SetConfig+0x2d4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d125      	bne.n	8006f62 <UART_SetConfig+0x1aa>
 8006f16:	4b5b      	ldr	r3, [pc, #364]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f20:	2b30      	cmp	r3, #48	@ 0x30
 8006f22:	d016      	beq.n	8006f52 <UART_SetConfig+0x19a>
 8006f24:	2b30      	cmp	r3, #48	@ 0x30
 8006f26:	d818      	bhi.n	8006f5a <UART_SetConfig+0x1a2>
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d00a      	beq.n	8006f42 <UART_SetConfig+0x18a>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d814      	bhi.n	8006f5a <UART_SetConfig+0x1a2>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <UART_SetConfig+0x182>
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d008      	beq.n	8006f4a <UART_SetConfig+0x192>
 8006f38:	e00f      	b.n	8006f5a <UART_SetConfig+0x1a2>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f40:	e0ad      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f42:	2302      	movs	r3, #2
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f48:	e0a9      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f50:	e0a5      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f52:	2308      	movs	r3, #8
 8006f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f58:	e0a1      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f60:	e09d      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4a      	ldr	r2, [pc, #296]	@ (8007090 <UART_SetConfig+0x2d8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d125      	bne.n	8006fb8 <UART_SetConfig+0x200>
 8006f6c:	4b45      	ldr	r3, [pc, #276]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f78:	d016      	beq.n	8006fa8 <UART_SetConfig+0x1f0>
 8006f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7c:	d818      	bhi.n	8006fb0 <UART_SetConfig+0x1f8>
 8006f7e:	2b80      	cmp	r3, #128	@ 0x80
 8006f80:	d00a      	beq.n	8006f98 <UART_SetConfig+0x1e0>
 8006f82:	2b80      	cmp	r3, #128	@ 0x80
 8006f84:	d814      	bhi.n	8006fb0 <UART_SetConfig+0x1f8>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <UART_SetConfig+0x1d8>
 8006f8a:	2b40      	cmp	r3, #64	@ 0x40
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x1e8>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x1f8>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f96:	e082      	b.n	800709e <UART_SetConfig+0x2e6>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9e:	e07e      	b.n	800709e <UART_SetConfig+0x2e6>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa6:	e07a      	b.n	800709e <UART_SetConfig+0x2e6>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e076      	b.n	800709e <UART_SetConfig+0x2e6>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e072      	b.n	800709e <UART_SetConfig+0x2e6>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <UART_SetConfig+0x2dc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d12a      	bne.n	8007018 <UART_SetConfig+0x260>
 8006fc2:	4b30      	ldr	r3, [pc, #192]	@ (8007084 <UART_SetConfig+0x2cc>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd0:	d01a      	beq.n	8007008 <UART_SetConfig+0x250>
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd6:	d81b      	bhi.n	8007010 <UART_SetConfig+0x258>
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d00c      	beq.n	8006ff8 <UART_SetConfig+0x240>
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe2:	d815      	bhi.n	8007010 <UART_SetConfig+0x258>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x238>
 8006fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fec:	d008      	beq.n	8007000 <UART_SetConfig+0x248>
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x258>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff6:	e052      	b.n	800709e <UART_SetConfig+0x2e6>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffe:	e04e      	b.n	800709e <UART_SetConfig+0x2e6>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007006:	e04a      	b.n	800709e <UART_SetConfig+0x2e6>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700e:	e046      	b.n	800709e <UART_SetConfig+0x2e6>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007016:	e042      	b.n	800709e <UART_SetConfig+0x2e6>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a17      	ldr	r2, [pc, #92]	@ (800707c <UART_SetConfig+0x2c4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d13a      	bne.n	8007098 <UART_SetConfig+0x2e0>
 8007022:	4b18      	ldr	r3, [pc, #96]	@ (8007084 <UART_SetConfig+0x2cc>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800702c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007030:	d01a      	beq.n	8007068 <UART_SetConfig+0x2b0>
 8007032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007036:	d81b      	bhi.n	8007070 <UART_SetConfig+0x2b8>
 8007038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703c:	d00c      	beq.n	8007058 <UART_SetConfig+0x2a0>
 800703e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007042:	d815      	bhi.n	8007070 <UART_SetConfig+0x2b8>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <UART_SetConfig+0x298>
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704c:	d008      	beq.n	8007060 <UART_SetConfig+0x2a8>
 800704e:	e00f      	b.n	8007070 <UART_SetConfig+0x2b8>
 8007050:	2300      	movs	r3, #0
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007056:	e022      	b.n	800709e <UART_SetConfig+0x2e6>
 8007058:	2302      	movs	r3, #2
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e01e      	b.n	800709e <UART_SetConfig+0x2e6>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007066:	e01a      	b.n	800709e <UART_SetConfig+0x2e6>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e016      	b.n	800709e <UART_SetConfig+0x2e6>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007076:	e012      	b.n	800709e <UART_SetConfig+0x2e6>
 8007078:	efff69f3 	.word	0xefff69f3
 800707c:	40008000 	.word	0x40008000
 8007080:	40013800 	.word	0x40013800
 8007084:	40021000 	.word	0x40021000
 8007088:	40004400 	.word	0x40004400
 800708c:	40004800 	.word	0x40004800
 8007090:	40004c00 	.word	0x40004c00
 8007094:	40005000 	.word	0x40005000
 8007098:	2310      	movs	r3, #16
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a9f      	ldr	r2, [pc, #636]	@ (8007320 <UART_SetConfig+0x568>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d17a      	bne.n	800719e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d824      	bhi.n	80070fa <UART_SetConfig+0x342>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0x300>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070eb 	.word	0x080070eb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070fb 	.word	0x080070fb
 80070d4:	080070fb 	.word	0x080070fb
 80070d8:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070dc:	f7fc ffce 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80070e0:	61f8      	str	r0, [r7, #28]
        break;
 80070e2:	e010      	b.n	8007106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007324 <UART_SetConfig+0x56c>)
 80070e6:	61fb      	str	r3, [r7, #28]
        break;
 80070e8:	e00d      	b.n	8007106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fc ff2f 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80070ee:	61f8      	str	r0, [r7, #28]
        break;
 80070f0:	e009      	b.n	8007106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f6:	61fb      	str	r3, [r7, #28]
        break;
 80070f8:	e005      	b.n	8007106 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80fb 	beq.w	8007304 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	429a      	cmp	r2, r3
 800711c:	d305      	bcc.n	800712a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	429a      	cmp	r2, r3
 8007128:	d903      	bls.n	8007132 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007130:	e0e8      	b.n	8007304 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	2200      	movs	r2, #0
 8007136:	461c      	mov	r4, r3
 8007138:	4615      	mov	r5, r2
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	022b      	lsls	r3, r5, #8
 8007144:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007148:	0222      	lsls	r2, r4, #8
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	6849      	ldr	r1, [r1, #4]
 800714e:	0849      	lsrs	r1, r1, #1
 8007150:	2000      	movs	r0, #0
 8007152:	4688      	mov	r8, r1
 8007154:	4681      	mov	r9, r0
 8007156:	eb12 0a08 	adds.w	sl, r2, r8
 800715a:	eb43 0b09 	adc.w	fp, r3, r9
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	4650      	mov	r0, sl
 800716e:	4659      	mov	r1, fp
 8007170:	f7f9 f87e 	bl	8000270 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4613      	mov	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007182:	d308      	bcc.n	8007196 <UART_SetConfig+0x3de>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800718a:	d204      	bcs.n	8007196 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e0b6      	b.n	8007304 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800719c:	e0b2      	b.n	8007304 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a6:	d15e      	bne.n	8007266 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d828      	bhi.n	8007202 <UART_SetConfig+0x44a>
 80071b0:	a201      	add	r2, pc, #4	@ (adr r2, 80071b8 <UART_SetConfig+0x400>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	08007203 	.word	0x08007203
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007203 	.word	0x08007203
 80071d8:	080071fb 	.word	0x080071fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fc ff4e 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80071e0:	61f8      	str	r0, [r7, #28]
        break;
 80071e2:	e014      	b.n	800720e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fc ff60 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 80071e8:	61f8      	str	r0, [r7, #28]
        break;
 80071ea:	e010      	b.n	800720e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007324 <UART_SetConfig+0x56c>)
 80071ee:	61fb      	str	r3, [r7, #28]
        break;
 80071f0:	e00d      	b.n	800720e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f2:	f7fc feab 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80071f6:	61f8      	str	r0, [r7, #28]
        break;
 80071f8:	e009      	b.n	800720e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071fe:	61fb      	str	r3, [r7, #28]
        break;
 8007200:	e005      	b.n	800720e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800720c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d077      	beq.n	8007304 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	005a      	lsls	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	441a      	add	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b0f      	cmp	r3, #15
 800722e:	d916      	bls.n	800725e <UART_SetConfig+0x4a6>
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007236:	d212      	bcs.n	800725e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f023 030f 	bic.w	r3, r3, #15
 8007240:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	b29a      	uxth	r2, r3
 800724e:	8afb      	ldrh	r3, [r7, #22]
 8007250:	4313      	orrs	r3, r2
 8007252:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	8afa      	ldrh	r2, [r7, #22]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e052      	b.n	8007304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007264:	e04e      	b.n	8007304 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007266:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800726a:	2b08      	cmp	r3, #8
 800726c:	d827      	bhi.n	80072be <UART_SetConfig+0x506>
 800726e:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <UART_SetConfig+0x4bc>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072bf 	.word	0x080072bf
 8007284:	080072af 	.word	0x080072af
 8007288:	080072bf 	.word	0x080072bf
 800728c:	080072bf 	.word	0x080072bf
 8007290:	080072bf 	.word	0x080072bf
 8007294:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fc fef0 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 800729c:	61f8      	str	r0, [r7, #28]
        break;
 800729e:	e014      	b.n	80072ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fc ff02 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 80072a4:	61f8      	str	r0, [r7, #28]
        break;
 80072a6:	e010      	b.n	80072ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <UART_SetConfig+0x56c>)
 80072aa:	61fb      	str	r3, [r7, #28]
        break;
 80072ac:	e00d      	b.n	80072ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fc fe4d 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80072b2:	61f8      	str	r0, [r7, #28]
        break;
 80072b4:	e009      	b.n	80072ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ba:	61fb      	str	r3, [r7, #28]
        break;
 80072bc:	e005      	b.n	80072ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072c8:	bf00      	nop
    }

    if (pclk != 0U)
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d019      	beq.n	8007304 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	085a      	lsrs	r2, r3, #1
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	441a      	add	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d909      	bls.n	80072fe <UART_SetConfig+0x546>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f0:	d205      	bcs.n	80072fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60da      	str	r2, [r3, #12]
 80072fc:	e002      	b.n	8007304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007310:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007314:	4618      	mov	r0, r3
 8007316:	3728      	adds	r7, #40	@ 0x28
 8007318:	46bd      	mov	sp, r7
 800731a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731e:	bf00      	nop
 8007320:	40008000 	.word	0x40008000
 8007324:	00f42400 	.word	0x00f42400

08007328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01a      	beq.n	800743e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007426:	d10a      	bne.n	800743e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b098      	sub	sp, #96	@ 0x60
 8007470:	af02      	add	r7, sp, #8
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800747c:	f7fa fbf2 	bl	8001c64 <HAL_GetTick>
 8007480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d12e      	bne.n	80074ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007498:	2200      	movs	r2, #0
 800749a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f88c 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d021      	beq.n	80074ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074be:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e6      	bne.n	80074aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e062      	b.n	80075b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d149      	bne.n	8007590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007504:	2200      	movs	r2, #0
 8007506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f856 	bl	80075bc <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d03c      	beq.n	8007590 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	623b      	str	r3, [r7, #32]
   return(result);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800752a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007534:	633b      	str	r3, [r7, #48]	@ 0x30
 8007536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800753a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	60fb      	str	r3, [r7, #12]
   return(result);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007568:	61fa      	str	r2, [r7, #28]
 800756a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	69b9      	ldr	r1, [r7, #24]
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	617b      	str	r3, [r7, #20]
   return(result);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e5      	bne.n	8007548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e011      	b.n	80075b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3758      	adds	r7, #88	@ 0x58
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075cc:	e049      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d045      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d6:	f7fa fb45 	bl	8001c64 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d302      	bcc.n	80075ec <UART_WaitOnFlagUntilTimeout+0x30>
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e048      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d031      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d110      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2208      	movs	r2, #8
 8007612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f838 	bl	800768a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2208      	movs	r2, #8
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e029      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763c:	d111      	bne.n	8007662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f81e 	bl	800768a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e00f      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	bf0c      	ite	eq
 8007672:	2301      	moveq	r3, #1
 8007674:	2300      	movne	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	461a      	mov	r2, r3
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	429a      	cmp	r2, r3
 800767e:	d0a6      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800768a:	b480      	push	{r7}
 800768c:	b095      	sub	sp, #84	@ 0x54
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e6      	bne.n	8007692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3308      	adds	r3, #8
 80076e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e5      	bne.n	80076c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d118      	bne.n	8007732 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	60bb      	str	r3, [r7, #8]
   return(result);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f023 0310 	bic.w	r3, r3, #16
 8007714:	647b      	str	r3, [r7, #68]	@ 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	613b      	str	r3, [r7, #16]
   return(result);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e6      	bne.n	8007700 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007746:	bf00      	nop
 8007748:	3754      	adds	r7, #84	@ 0x54
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff fb0b 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b088      	sub	sp, #32
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	60bb      	str	r3, [r7, #8]
   return(result);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6979      	ldr	r1, [r7, #20]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	613b      	str	r3, [r7, #16]
   return(result);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e6      	bne.n	8007786 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff fad7 	bl	8006d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ca:	bf00      	nop
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
	...

080077e8 <siprintf>:
 80077e8:	b40e      	push	{r1, r2, r3}
 80077ea:	b500      	push	{lr}
 80077ec:	b09c      	sub	sp, #112	@ 0x70
 80077ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80077f0:	9002      	str	r0, [sp, #8]
 80077f2:	9006      	str	r0, [sp, #24]
 80077f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077f8:	4809      	ldr	r0, [pc, #36]	@ (8007820 <siprintf+0x38>)
 80077fa:	9107      	str	r1, [sp, #28]
 80077fc:	9104      	str	r1, [sp, #16]
 80077fe:	4909      	ldr	r1, [pc, #36]	@ (8007824 <siprintf+0x3c>)
 8007800:	f853 2b04 	ldr.w	r2, [r3], #4
 8007804:	9105      	str	r1, [sp, #20]
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	a902      	add	r1, sp, #8
 800780c:	f000 f994 	bl	8007b38 <_svfiprintf_r>
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	b01c      	add	sp, #112	@ 0x70
 8007818:	f85d eb04 	ldr.w	lr, [sp], #4
 800781c:	b003      	add	sp, #12
 800781e:	4770      	bx	lr
 8007820:	20000124 	.word	0x20000124
 8007824:	ffff0208 	.word	0xffff0208

08007828 <memset>:
 8007828:	4402      	add	r2, r0
 800782a:	4603      	mov	r3, r0
 800782c:	4293      	cmp	r3, r2
 800782e:	d100      	bne.n	8007832 <memset+0xa>
 8007830:	4770      	bx	lr
 8007832:	f803 1b01 	strb.w	r1, [r3], #1
 8007836:	e7f9      	b.n	800782c <memset+0x4>

08007838 <__errno>:
 8007838:	4b01      	ldr	r3, [pc, #4]	@ (8007840 <__errno+0x8>)
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000124 	.word	0x20000124

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4d0d      	ldr	r5, [pc, #52]	@ (800787c <__libc_init_array+0x38>)
 8007848:	4c0d      	ldr	r4, [pc, #52]	@ (8007880 <__libc_init_array+0x3c>)
 800784a:	1b64      	subs	r4, r4, r5
 800784c:	10a4      	asrs	r4, r4, #2
 800784e:	2600      	movs	r6, #0
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	4d0b      	ldr	r5, [pc, #44]	@ (8007884 <__libc_init_array+0x40>)
 8007856:	4c0c      	ldr	r4, [pc, #48]	@ (8007888 <__libc_init_array+0x44>)
 8007858:	f000 fc66 	bl	8008128 <_init>
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	2600      	movs	r6, #0
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	f855 3b04 	ldr.w	r3, [r5], #4
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	f855 3b04 	ldr.w	r3, [r5], #4
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	08008224 	.word	0x08008224
 8007880:	08008224 	.word	0x08008224
 8007884:	08008224 	.word	0x08008224
 8007888:	08008228 	.word	0x08008228

0800788c <__retarget_lock_acquire_recursive>:
 800788c:	4770      	bx	lr

0800788e <__retarget_lock_release_recursive>:
 800788e:	4770      	bx	lr

08007890 <_free_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	d041      	beq.n	800791c <_free_r+0x8c>
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f0c      	subs	r4, r1, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	18e4      	addlt	r4, r4, r3
 80078a4:	f000 f8e0 	bl	8007a68 <__malloc_lock>
 80078a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <_free_r+0x90>)
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	b933      	cbnz	r3, 80078bc <_free_r+0x2c>
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	6014      	str	r4, [r2, #0]
 80078b2:	4628      	mov	r0, r5
 80078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b8:	f000 b8dc 	b.w	8007a74 <__malloc_unlock>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d908      	bls.n	80078d2 <_free_r+0x42>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf01      	itttt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	e7ed      	b.n	80078ae <_free_r+0x1e>
 80078d2:	461a      	mov	r2, r3
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b10b      	cbz	r3, 80078dc <_free_r+0x4c>
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d9fa      	bls.n	80078d2 <_free_r+0x42>
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	1850      	adds	r0, r2, r1
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d10b      	bne.n	80078fc <_free_r+0x6c>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	4401      	add	r1, r0
 80078e8:	1850      	adds	r0, r2, r1
 80078ea:	4283      	cmp	r3, r0
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	d1e0      	bne.n	80078b2 <_free_r+0x22>
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	6053      	str	r3, [r2, #4]
 80078f6:	4408      	add	r0, r1
 80078f8:	6010      	str	r0, [r2, #0]
 80078fa:	e7da      	b.n	80078b2 <_free_r+0x22>
 80078fc:	d902      	bls.n	8007904 <_free_r+0x74>
 80078fe:	230c      	movs	r3, #12
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	e7d6      	b.n	80078b2 <_free_r+0x22>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	1821      	adds	r1, r4, r0
 8007908:	428b      	cmp	r3, r1
 800790a:	bf04      	itt	eq
 800790c:	6819      	ldreq	r1, [r3, #0]
 800790e:	685b      	ldreq	r3, [r3, #4]
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	bf04      	itt	eq
 8007914:	1809      	addeq	r1, r1, r0
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	6054      	str	r4, [r2, #4]
 800791a:	e7ca      	b.n	80078b2 <_free_r+0x22>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	20000628 	.word	0x20000628

08007924 <sbrk_aligned>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4e0f      	ldr	r6, [pc, #60]	@ (8007964 <sbrk_aligned+0x40>)
 8007928:	460c      	mov	r4, r1
 800792a:	6831      	ldr	r1, [r6, #0]
 800792c:	4605      	mov	r5, r0
 800792e:	b911      	cbnz	r1, 8007936 <sbrk_aligned+0x12>
 8007930:	f000 fba6 	bl	8008080 <_sbrk_r>
 8007934:	6030      	str	r0, [r6, #0]
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 fba1 	bl	8008080 <_sbrk_r>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d103      	bne.n	800794a <sbrk_aligned+0x26>
 8007942:	f04f 34ff 	mov.w	r4, #4294967295
 8007946:	4620      	mov	r0, r4
 8007948:	bd70      	pop	{r4, r5, r6, pc}
 800794a:	1cc4      	adds	r4, r0, #3
 800794c:	f024 0403 	bic.w	r4, r4, #3
 8007950:	42a0      	cmp	r0, r4
 8007952:	d0f8      	beq.n	8007946 <sbrk_aligned+0x22>
 8007954:	1a21      	subs	r1, r4, r0
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fb92 	bl	8008080 <_sbrk_r>
 800795c:	3001      	adds	r0, #1
 800795e:	d1f2      	bne.n	8007946 <sbrk_aligned+0x22>
 8007960:	e7ef      	b.n	8007942 <sbrk_aligned+0x1e>
 8007962:	bf00      	nop
 8007964:	20000624 	.word	0x20000624

08007968 <_malloc_r>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	1ccd      	adds	r5, r1, #3
 800796e:	f025 0503 	bic.w	r5, r5, #3
 8007972:	3508      	adds	r5, #8
 8007974:	2d0c      	cmp	r5, #12
 8007976:	bf38      	it	cc
 8007978:	250c      	movcc	r5, #12
 800797a:	2d00      	cmp	r5, #0
 800797c:	4606      	mov	r6, r0
 800797e:	db01      	blt.n	8007984 <_malloc_r+0x1c>
 8007980:	42a9      	cmp	r1, r5
 8007982:	d904      	bls.n	800798e <_malloc_r+0x26>
 8007984:	230c      	movs	r3, #12
 8007986:	6033      	str	r3, [r6, #0]
 8007988:	2000      	movs	r0, #0
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a64 <_malloc_r+0xfc>
 8007992:	f000 f869 	bl	8007a68 <__malloc_lock>
 8007996:	f8d8 3000 	ldr.w	r3, [r8]
 800799a:	461c      	mov	r4, r3
 800799c:	bb44      	cbnz	r4, 80079f0 <_malloc_r+0x88>
 800799e:	4629      	mov	r1, r5
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff ffbf 	bl	8007924 <sbrk_aligned>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	4604      	mov	r4, r0
 80079aa:	d158      	bne.n	8007a5e <_malloc_r+0xf6>
 80079ac:	f8d8 4000 	ldr.w	r4, [r8]
 80079b0:	4627      	mov	r7, r4
 80079b2:	2f00      	cmp	r7, #0
 80079b4:	d143      	bne.n	8007a3e <_malloc_r+0xd6>
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	d04b      	beq.n	8007a52 <_malloc_r+0xea>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	4639      	mov	r1, r7
 80079be:	4630      	mov	r0, r6
 80079c0:	eb04 0903 	add.w	r9, r4, r3
 80079c4:	f000 fb5c 	bl	8008080 <_sbrk_r>
 80079c8:	4581      	cmp	r9, r0
 80079ca:	d142      	bne.n	8007a52 <_malloc_r+0xea>
 80079cc:	6821      	ldr	r1, [r4, #0]
 80079ce:	1a6d      	subs	r5, r5, r1
 80079d0:	4629      	mov	r1, r5
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7ff ffa6 	bl	8007924 <sbrk_aligned>
 80079d8:	3001      	adds	r0, #1
 80079da:	d03a      	beq.n	8007a52 <_malloc_r+0xea>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	442b      	add	r3, r5
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	f8d8 3000 	ldr.w	r3, [r8]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	bb62      	cbnz	r2, 8007a44 <_malloc_r+0xdc>
 80079ea:	f8c8 7000 	str.w	r7, [r8]
 80079ee:	e00f      	b.n	8007a10 <_malloc_r+0xa8>
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	1b52      	subs	r2, r2, r5
 80079f4:	d420      	bmi.n	8007a38 <_malloc_r+0xd0>
 80079f6:	2a0b      	cmp	r2, #11
 80079f8:	d917      	bls.n	8007a2a <_malloc_r+0xc2>
 80079fa:	1961      	adds	r1, r4, r5
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	6025      	str	r5, [r4, #0]
 8007a00:	bf18      	it	ne
 8007a02:	6059      	strne	r1, [r3, #4]
 8007a04:	6863      	ldr	r3, [r4, #4]
 8007a06:	bf08      	it	eq
 8007a08:	f8c8 1000 	streq.w	r1, [r8]
 8007a0c:	5162      	str	r2, [r4, r5]
 8007a0e:	604b      	str	r3, [r1, #4]
 8007a10:	4630      	mov	r0, r6
 8007a12:	f000 f82f 	bl	8007a74 <__malloc_unlock>
 8007a16:	f104 000b 	add.w	r0, r4, #11
 8007a1a:	1d23      	adds	r3, r4, #4
 8007a1c:	f020 0007 	bic.w	r0, r0, #7
 8007a20:	1ac2      	subs	r2, r0, r3
 8007a22:	bf1c      	itt	ne
 8007a24:	1a1b      	subne	r3, r3, r0
 8007a26:	50a3      	strne	r3, [r4, r2]
 8007a28:	e7af      	b.n	800798a <_malloc_r+0x22>
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	bf0c      	ite	eq
 8007a30:	f8c8 2000 	streq.w	r2, [r8]
 8007a34:	605a      	strne	r2, [r3, #4]
 8007a36:	e7eb      	b.n	8007a10 <_malloc_r+0xa8>
 8007a38:	4623      	mov	r3, r4
 8007a3a:	6864      	ldr	r4, [r4, #4]
 8007a3c:	e7ae      	b.n	800799c <_malloc_r+0x34>
 8007a3e:	463c      	mov	r4, r7
 8007a40:	687f      	ldr	r7, [r7, #4]
 8007a42:	e7b6      	b.n	80079b2 <_malloc_r+0x4a>
 8007a44:	461a      	mov	r2, r3
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d1fb      	bne.n	8007a44 <_malloc_r+0xdc>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6053      	str	r3, [r2, #4]
 8007a50:	e7de      	b.n	8007a10 <_malloc_r+0xa8>
 8007a52:	230c      	movs	r3, #12
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	4630      	mov	r0, r6
 8007a58:	f000 f80c 	bl	8007a74 <__malloc_unlock>
 8007a5c:	e794      	b.n	8007988 <_malloc_r+0x20>
 8007a5e:	6005      	str	r5, [r0, #0]
 8007a60:	e7d6      	b.n	8007a10 <_malloc_r+0xa8>
 8007a62:	bf00      	nop
 8007a64:	20000628 	.word	0x20000628

08007a68 <__malloc_lock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	@ (8007a70 <__malloc_lock+0x8>)
 8007a6a:	f7ff bf0f 	b.w	800788c <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20000620 	.word	0x20000620

08007a74 <__malloc_unlock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	@ (8007a7c <__malloc_unlock+0x8>)
 8007a76:	f7ff bf0a 	b.w	800788e <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20000620 	.word	0x20000620

08007a80 <__ssputs_r>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	688e      	ldr	r6, [r1, #8]
 8007a86:	461f      	mov	r7, r3
 8007a88:	42be      	cmp	r6, r7
 8007a8a:	680b      	ldr	r3, [r1, #0]
 8007a8c:	4682      	mov	sl, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4690      	mov	r8, r2
 8007a92:	d82d      	bhi.n	8007af0 <__ssputs_r+0x70>
 8007a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a9c:	d026      	beq.n	8007aec <__ssputs_r+0x6c>
 8007a9e:	6965      	ldr	r5, [r4, #20]
 8007aa0:	6909      	ldr	r1, [r1, #16]
 8007aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa6:	eba3 0901 	sub.w	r9, r3, r1
 8007aaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aae:	1c7b      	adds	r3, r7, #1
 8007ab0:	444b      	add	r3, r9
 8007ab2:	106d      	asrs	r5, r5, #1
 8007ab4:	429d      	cmp	r5, r3
 8007ab6:	bf38      	it	cc
 8007ab8:	461d      	movcc	r5, r3
 8007aba:	0553      	lsls	r3, r2, #21
 8007abc:	d527      	bpl.n	8007b0e <__ssputs_r+0x8e>
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7ff ff52 	bl	8007968 <_malloc_r>
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	b360      	cbz	r0, 8007b22 <__ssputs_r+0xa2>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	464a      	mov	r2, r9
 8007acc:	f000 fae8 	bl	80080a0 <memcpy>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	6126      	str	r6, [r4, #16]
 8007ade:	6165      	str	r5, [r4, #20]
 8007ae0:	444e      	add	r6, r9
 8007ae2:	eba5 0509 	sub.w	r5, r5, r9
 8007ae6:	6026      	str	r6, [r4, #0]
 8007ae8:	60a5      	str	r5, [r4, #8]
 8007aea:	463e      	mov	r6, r7
 8007aec:	42be      	cmp	r6, r7
 8007aee:	d900      	bls.n	8007af2 <__ssputs_r+0x72>
 8007af0:	463e      	mov	r6, r7
 8007af2:	6820      	ldr	r0, [r4, #0]
 8007af4:	4632      	mov	r2, r6
 8007af6:	4641      	mov	r1, r8
 8007af8:	f000 faa8 	bl	800804c <memmove>
 8007afc:	68a3      	ldr	r3, [r4, #8]
 8007afe:	1b9b      	subs	r3, r3, r6
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	4433      	add	r3, r6
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0e:	462a      	mov	r2, r5
 8007b10:	f000 fad4 	bl	80080bc <_realloc_r>
 8007b14:	4606      	mov	r6, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d1e0      	bne.n	8007adc <__ssputs_r+0x5c>
 8007b1a:	6921      	ldr	r1, [r4, #16]
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	f7ff feb7 	bl	8007890 <_free_r>
 8007b22:	230c      	movs	r3, #12
 8007b24:	f8ca 3000 	str.w	r3, [sl]
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	e7e9      	b.n	8007b0a <__ssputs_r+0x8a>
	...

08007b38 <_svfiprintf_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	4698      	mov	r8, r3
 8007b3e:	898b      	ldrh	r3, [r1, #12]
 8007b40:	061b      	lsls	r3, r3, #24
 8007b42:	b09d      	sub	sp, #116	@ 0x74
 8007b44:	4607      	mov	r7, r0
 8007b46:	460d      	mov	r5, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	d510      	bpl.n	8007b6e <_svfiprintf_r+0x36>
 8007b4c:	690b      	ldr	r3, [r1, #16]
 8007b4e:	b973      	cbnz	r3, 8007b6e <_svfiprintf_r+0x36>
 8007b50:	2140      	movs	r1, #64	@ 0x40
 8007b52:	f7ff ff09 	bl	8007968 <_malloc_r>
 8007b56:	6028      	str	r0, [r5, #0]
 8007b58:	6128      	str	r0, [r5, #16]
 8007b5a:	b930      	cbnz	r0, 8007b6a <_svfiprintf_r+0x32>
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	b01d      	add	sp, #116	@ 0x74
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	2340      	movs	r3, #64	@ 0x40
 8007b6c:	616b      	str	r3, [r5, #20]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b72:	2320      	movs	r3, #32
 8007b74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b7c:	2330      	movs	r3, #48	@ 0x30
 8007b7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d1c <_svfiprintf_r+0x1e4>
 8007b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b86:	f04f 0901 	mov.w	r9, #1
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	469a      	mov	sl, r3
 8007b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b92:	b10a      	cbz	r2, 8007b98 <_svfiprintf_r+0x60>
 8007b94:	2a25      	cmp	r2, #37	@ 0x25
 8007b96:	d1f9      	bne.n	8007b8c <_svfiprintf_r+0x54>
 8007b98:	ebba 0b04 	subs.w	fp, sl, r4
 8007b9c:	d00b      	beq.n	8007bb6 <_svfiprintf_r+0x7e>
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f7ff ff6b 	bl	8007a80 <__ssputs_r>
 8007baa:	3001      	adds	r0, #1
 8007bac:	f000 80a7 	beq.w	8007cfe <_svfiprintf_r+0x1c6>
 8007bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bb2:	445a      	add	r2, fp
 8007bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 809f 	beq.w	8007cfe <_svfiprintf_r+0x1c6>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bca:	f10a 0a01 	add.w	sl, sl, #1
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bd8:	4654      	mov	r4, sl
 8007bda:	2205      	movs	r2, #5
 8007bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be0:	484e      	ldr	r0, [pc, #312]	@ (8007d1c <_svfiprintf_r+0x1e4>)
 8007be2:	f7f8 faf5 	bl	80001d0 <memchr>
 8007be6:	9a04      	ldr	r2, [sp, #16]
 8007be8:	b9d8      	cbnz	r0, 8007c22 <_svfiprintf_r+0xea>
 8007bea:	06d0      	lsls	r0, r2, #27
 8007bec:	bf44      	itt	mi
 8007bee:	2320      	movmi	r3, #32
 8007bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf4:	0711      	lsls	r1, r2, #28
 8007bf6:	bf44      	itt	mi
 8007bf8:	232b      	movmi	r3, #43	@ 0x2b
 8007bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c04:	d015      	beq.n	8007c32 <_svfiprintf_r+0xfa>
 8007c06:	9a07      	ldr	r2, [sp, #28]
 8007c08:	4654      	mov	r4, sl
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f04f 0c0a 	mov.w	ip, #10
 8007c10:	4621      	mov	r1, r4
 8007c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c16:	3b30      	subs	r3, #48	@ 0x30
 8007c18:	2b09      	cmp	r3, #9
 8007c1a:	d94b      	bls.n	8007cb4 <_svfiprintf_r+0x17c>
 8007c1c:	b1b0      	cbz	r0, 8007c4c <_svfiprintf_r+0x114>
 8007c1e:	9207      	str	r2, [sp, #28]
 8007c20:	e014      	b.n	8007c4c <_svfiprintf_r+0x114>
 8007c22:	eba0 0308 	sub.w	r3, r0, r8
 8007c26:	fa09 f303 	lsl.w	r3, r9, r3
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	46a2      	mov	sl, r4
 8007c30:	e7d2      	b.n	8007bd8 <_svfiprintf_r+0xa0>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	1d19      	adds	r1, r3, #4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	9103      	str	r1, [sp, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bfbb      	ittet	lt
 8007c3e:	425b      	neglt	r3, r3
 8007c40:	f042 0202 	orrlt.w	r2, r2, #2
 8007c44:	9307      	strge	r3, [sp, #28]
 8007c46:	9307      	strlt	r3, [sp, #28]
 8007c48:	bfb8      	it	lt
 8007c4a:	9204      	strlt	r2, [sp, #16]
 8007c4c:	7823      	ldrb	r3, [r4, #0]
 8007c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c50:	d10a      	bne.n	8007c68 <_svfiprintf_r+0x130>
 8007c52:	7863      	ldrb	r3, [r4, #1]
 8007c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c56:	d132      	bne.n	8007cbe <_svfiprintf_r+0x186>
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	1d1a      	adds	r2, r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	9203      	str	r2, [sp, #12]
 8007c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c64:	3402      	adds	r4, #2
 8007c66:	9305      	str	r3, [sp, #20]
 8007c68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d2c <_svfiprintf_r+0x1f4>
 8007c6c:	7821      	ldrb	r1, [r4, #0]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	4650      	mov	r0, sl
 8007c72:	f7f8 faad 	bl	80001d0 <memchr>
 8007c76:	b138      	cbz	r0, 8007c88 <_svfiprintf_r+0x150>
 8007c78:	9b04      	ldr	r3, [sp, #16]
 8007c7a:	eba0 000a 	sub.w	r0, r0, sl
 8007c7e:	2240      	movs	r2, #64	@ 0x40
 8007c80:	4082      	lsls	r2, r0
 8007c82:	4313      	orrs	r3, r2
 8007c84:	3401      	adds	r4, #1
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8c:	4824      	ldr	r0, [pc, #144]	@ (8007d20 <_svfiprintf_r+0x1e8>)
 8007c8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c92:	2206      	movs	r2, #6
 8007c94:	f7f8 fa9c 	bl	80001d0 <memchr>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d036      	beq.n	8007d0a <_svfiprintf_r+0x1d2>
 8007c9c:	4b21      	ldr	r3, [pc, #132]	@ (8007d24 <_svfiprintf_r+0x1ec>)
 8007c9e:	bb1b      	cbnz	r3, 8007ce8 <_svfiprintf_r+0x1b0>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	3307      	adds	r3, #7
 8007ca4:	f023 0307 	bic.w	r3, r3, #7
 8007ca8:	3308      	adds	r3, #8
 8007caa:	9303      	str	r3, [sp, #12]
 8007cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cae:	4433      	add	r3, r6
 8007cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb2:	e76a      	b.n	8007b8a <_svfiprintf_r+0x52>
 8007cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb8:	460c      	mov	r4, r1
 8007cba:	2001      	movs	r0, #1
 8007cbc:	e7a8      	b.n	8007c10 <_svfiprintf_r+0xd8>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0c0a 	mov.w	ip, #10
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd0:	3a30      	subs	r2, #48	@ 0x30
 8007cd2:	2a09      	cmp	r2, #9
 8007cd4:	d903      	bls.n	8007cde <_svfiprintf_r+0x1a6>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0c6      	beq.n	8007c68 <_svfiprintf_r+0x130>
 8007cda:	9105      	str	r1, [sp, #20]
 8007cdc:	e7c4      	b.n	8007c68 <_svfiprintf_r+0x130>
 8007cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7f0      	b.n	8007cca <_svfiprintf_r+0x192>
 8007ce8:	ab03      	add	r3, sp, #12
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <_svfiprintf_r+0x1f0>)
 8007cf0:	a904      	add	r1, sp, #16
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	1c42      	adds	r2, r0, #1
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	d1d6      	bne.n	8007cac <_svfiprintf_r+0x174>
 8007cfe:	89ab      	ldrh	r3, [r5, #12]
 8007d00:	065b      	lsls	r3, r3, #25
 8007d02:	f53f af2d 	bmi.w	8007b60 <_svfiprintf_r+0x28>
 8007d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d08:	e72c      	b.n	8007b64 <_svfiprintf_r+0x2c>
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <_svfiprintf_r+0x1f0>)
 8007d12:	a904      	add	r1, sp, #16
 8007d14:	4638      	mov	r0, r7
 8007d16:	f000 f879 	bl	8007e0c <_printf_i>
 8007d1a:	e7ed      	b.n	8007cf8 <_svfiprintf_r+0x1c0>
 8007d1c:	080081e8 	.word	0x080081e8
 8007d20:	080081f2 	.word	0x080081f2
 8007d24:	00000000 	.word	0x00000000
 8007d28:	08007a81 	.word	0x08007a81
 8007d2c:	080081ee 	.word	0x080081ee

08007d30 <_printf_common>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	4616      	mov	r6, r2
 8007d36:	4698      	mov	r8, r3
 8007d38:	688a      	ldr	r2, [r1, #8]
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d40:	4293      	cmp	r3, r2
 8007d42:	bfb8      	it	lt
 8007d44:	4613      	movlt	r3, r2
 8007d46:	6033      	str	r3, [r6, #0]
 8007d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	b10a      	cbz	r2, 8007d56 <_printf_common+0x26>
 8007d52:	3301      	adds	r3, #1
 8007d54:	6033      	str	r3, [r6, #0]
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	0699      	lsls	r1, r3, #26
 8007d5a:	bf42      	ittt	mi
 8007d5c:	6833      	ldrmi	r3, [r6, #0]
 8007d5e:	3302      	addmi	r3, #2
 8007d60:	6033      	strmi	r3, [r6, #0]
 8007d62:	6825      	ldr	r5, [r4, #0]
 8007d64:	f015 0506 	ands.w	r5, r5, #6
 8007d68:	d106      	bne.n	8007d78 <_printf_common+0x48>
 8007d6a:	f104 0a19 	add.w	sl, r4, #25
 8007d6e:	68e3      	ldr	r3, [r4, #12]
 8007d70:	6832      	ldr	r2, [r6, #0]
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	dc26      	bgt.n	8007dc6 <_printf_common+0x96>
 8007d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d7c:	6822      	ldr	r2, [r4, #0]
 8007d7e:	3b00      	subs	r3, #0
 8007d80:	bf18      	it	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	0692      	lsls	r2, r2, #26
 8007d86:	d42b      	bmi.n	8007de0 <_printf_common+0xb0>
 8007d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c8      	blx	r9
 8007d92:	3001      	adds	r0, #1
 8007d94:	d01e      	beq.n	8007dd4 <_printf_common+0xa4>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	f003 0306 	and.w	r3, r3, #6
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	bf02      	ittt	eq
 8007da2:	68e5      	ldreq	r5, [r4, #12]
 8007da4:	6833      	ldreq	r3, [r6, #0]
 8007da6:	1aed      	subeq	r5, r5, r3
 8007da8:	68a3      	ldr	r3, [r4, #8]
 8007daa:	bf0c      	ite	eq
 8007dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007db0:	2500      	movne	r5, #0
 8007db2:	4293      	cmp	r3, r2
 8007db4:	bfc4      	itt	gt
 8007db6:	1a9b      	subgt	r3, r3, r2
 8007db8:	18ed      	addgt	r5, r5, r3
 8007dba:	2600      	movs	r6, #0
 8007dbc:	341a      	adds	r4, #26
 8007dbe:	42b5      	cmp	r5, r6
 8007dc0:	d11a      	bne.n	8007df8 <_printf_common+0xc8>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e008      	b.n	8007dd8 <_printf_common+0xa8>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4652      	mov	r2, sl
 8007dca:	4641      	mov	r1, r8
 8007dcc:	4638      	mov	r0, r7
 8007dce:	47c8      	blx	r9
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d103      	bne.n	8007ddc <_printf_common+0xac>
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	3501      	adds	r5, #1
 8007dde:	e7c6      	b.n	8007d6e <_printf_common+0x3e>
 8007de0:	18e1      	adds	r1, r4, r3
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	2030      	movs	r0, #48	@ 0x30
 8007de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dea:	4422      	add	r2, r4
 8007dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007df4:	3302      	adds	r3, #2
 8007df6:	e7c7      	b.n	8007d88 <_printf_common+0x58>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	4638      	mov	r0, r7
 8007e00:	47c8      	blx	r9
 8007e02:	3001      	adds	r0, #1
 8007e04:	d0e6      	beq.n	8007dd4 <_printf_common+0xa4>
 8007e06:	3601      	adds	r6, #1
 8007e08:	e7d9      	b.n	8007dbe <_printf_common+0x8e>
	...

08007e0c <_printf_i>:
 8007e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	7e0f      	ldrb	r7, [r1, #24]
 8007e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e14:	2f78      	cmp	r7, #120	@ 0x78
 8007e16:	4691      	mov	r9, r2
 8007e18:	4680      	mov	r8, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	469a      	mov	sl, r3
 8007e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e22:	d807      	bhi.n	8007e34 <_printf_i+0x28>
 8007e24:	2f62      	cmp	r7, #98	@ 0x62
 8007e26:	d80a      	bhi.n	8007e3e <_printf_i+0x32>
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	f000 80d2 	beq.w	8007fd2 <_printf_i+0x1c6>
 8007e2e:	2f58      	cmp	r7, #88	@ 0x58
 8007e30:	f000 80b9 	beq.w	8007fa6 <_printf_i+0x19a>
 8007e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e3c:	e03a      	b.n	8007eb4 <_printf_i+0xa8>
 8007e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e42:	2b15      	cmp	r3, #21
 8007e44:	d8f6      	bhi.n	8007e34 <_printf_i+0x28>
 8007e46:	a101      	add	r1, pc, #4	@ (adr r1, 8007e4c <_printf_i+0x40>)
 8007e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e4c:	08007ea5 	.word	0x08007ea5
 8007e50:	08007eb9 	.word	0x08007eb9
 8007e54:	08007e35 	.word	0x08007e35
 8007e58:	08007e35 	.word	0x08007e35
 8007e5c:	08007e35 	.word	0x08007e35
 8007e60:	08007e35 	.word	0x08007e35
 8007e64:	08007eb9 	.word	0x08007eb9
 8007e68:	08007e35 	.word	0x08007e35
 8007e6c:	08007e35 	.word	0x08007e35
 8007e70:	08007e35 	.word	0x08007e35
 8007e74:	08007e35 	.word	0x08007e35
 8007e78:	08007fb9 	.word	0x08007fb9
 8007e7c:	08007ee3 	.word	0x08007ee3
 8007e80:	08007f73 	.word	0x08007f73
 8007e84:	08007e35 	.word	0x08007e35
 8007e88:	08007e35 	.word	0x08007e35
 8007e8c:	08007fdb 	.word	0x08007fdb
 8007e90:	08007e35 	.word	0x08007e35
 8007e94:	08007ee3 	.word	0x08007ee3
 8007e98:	08007e35 	.word	0x08007e35
 8007e9c:	08007e35 	.word	0x08007e35
 8007ea0:	08007f7b 	.word	0x08007f7b
 8007ea4:	6833      	ldr	r3, [r6, #0]
 8007ea6:	1d1a      	adds	r2, r3, #4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6032      	str	r2, [r6, #0]
 8007eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e09d      	b.n	8007ff4 <_printf_i+0x1e8>
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	6820      	ldr	r0, [r4, #0]
 8007ebc:	1d19      	adds	r1, r3, #4
 8007ebe:	6031      	str	r1, [r6, #0]
 8007ec0:	0606      	lsls	r6, r0, #24
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_i+0xbc>
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	e003      	b.n	8007ed0 <_printf_i+0xc4>
 8007ec8:	0645      	lsls	r5, r0, #25
 8007eca:	d5fb      	bpl.n	8007ec4 <_printf_i+0xb8>
 8007ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	da03      	bge.n	8007edc <_printf_i+0xd0>
 8007ed4:	232d      	movs	r3, #45	@ 0x2d
 8007ed6:	426d      	negs	r5, r5
 8007ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007edc:	4859      	ldr	r0, [pc, #356]	@ (8008044 <_printf_i+0x238>)
 8007ede:	230a      	movs	r3, #10
 8007ee0:	e011      	b.n	8007f06 <_printf_i+0xfa>
 8007ee2:	6821      	ldr	r1, [r4, #0]
 8007ee4:	6833      	ldr	r3, [r6, #0]
 8007ee6:	0608      	lsls	r0, r1, #24
 8007ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007eec:	d402      	bmi.n	8007ef4 <_printf_i+0xe8>
 8007eee:	0649      	lsls	r1, r1, #25
 8007ef0:	bf48      	it	mi
 8007ef2:	b2ad      	uxthmi	r5, r5
 8007ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ef6:	4853      	ldr	r0, [pc, #332]	@ (8008044 <_printf_i+0x238>)
 8007ef8:	6033      	str	r3, [r6, #0]
 8007efa:	bf14      	ite	ne
 8007efc:	230a      	movne	r3, #10
 8007efe:	2308      	moveq	r3, #8
 8007f00:	2100      	movs	r1, #0
 8007f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f06:	6866      	ldr	r6, [r4, #4]
 8007f08:	60a6      	str	r6, [r4, #8]
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	bfa2      	ittt	ge
 8007f0e:	6821      	ldrge	r1, [r4, #0]
 8007f10:	f021 0104 	bicge.w	r1, r1, #4
 8007f14:	6021      	strge	r1, [r4, #0]
 8007f16:	b90d      	cbnz	r5, 8007f1c <_printf_i+0x110>
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	d04b      	beq.n	8007fb4 <_printf_i+0x1a8>
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f22:	fb03 5711 	mls	r7, r3, r1, r5
 8007f26:	5dc7      	ldrb	r7, [r0, r7]
 8007f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f2c:	462f      	mov	r7, r5
 8007f2e:	42bb      	cmp	r3, r7
 8007f30:	460d      	mov	r5, r1
 8007f32:	d9f4      	bls.n	8007f1e <_printf_i+0x112>
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d10b      	bne.n	8007f50 <_printf_i+0x144>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	07df      	lsls	r7, r3, #31
 8007f3c:	d508      	bpl.n	8007f50 <_printf_i+0x144>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	6861      	ldr	r1, [r4, #4]
 8007f42:	4299      	cmp	r1, r3
 8007f44:	bfde      	ittt	le
 8007f46:	2330      	movle	r3, #48	@ 0x30
 8007f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f50:	1b92      	subs	r2, r2, r6
 8007f52:	6122      	str	r2, [r4, #16]
 8007f54:	f8cd a000 	str.w	sl, [sp]
 8007f58:	464b      	mov	r3, r9
 8007f5a:	aa03      	add	r2, sp, #12
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4640      	mov	r0, r8
 8007f60:	f7ff fee6 	bl	8007d30 <_printf_common>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d14a      	bne.n	8007ffe <_printf_i+0x1f2>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	b004      	add	sp, #16
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	f043 0320 	orr.w	r3, r3, #32
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	4833      	ldr	r0, [pc, #204]	@ (8008048 <_printf_i+0x23c>)
 8007f7c:	2778      	movs	r7, #120	@ 0x78
 8007f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	6831      	ldr	r1, [r6, #0]
 8007f86:	061f      	lsls	r7, r3, #24
 8007f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f8c:	d402      	bmi.n	8007f94 <_printf_i+0x188>
 8007f8e:	065f      	lsls	r7, r3, #25
 8007f90:	bf48      	it	mi
 8007f92:	b2ad      	uxthmi	r5, r5
 8007f94:	6031      	str	r1, [r6, #0]
 8007f96:	07d9      	lsls	r1, r3, #31
 8007f98:	bf44      	itt	mi
 8007f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f9e:	6023      	strmi	r3, [r4, #0]
 8007fa0:	b11d      	cbz	r5, 8007faa <_printf_i+0x19e>
 8007fa2:	2310      	movs	r3, #16
 8007fa4:	e7ac      	b.n	8007f00 <_printf_i+0xf4>
 8007fa6:	4827      	ldr	r0, [pc, #156]	@ (8008044 <_printf_i+0x238>)
 8007fa8:	e7e9      	b.n	8007f7e <_printf_i+0x172>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f023 0320 	bic.w	r3, r3, #32
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	e7f6      	b.n	8007fa2 <_printf_i+0x196>
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	e7bd      	b.n	8007f34 <_printf_i+0x128>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	6961      	ldr	r1, [r4, #20]
 8007fbe:	1d18      	adds	r0, r3, #4
 8007fc0:	6030      	str	r0, [r6, #0]
 8007fc2:	062e      	lsls	r6, r5, #24
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0x1c0>
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0x1c6>
 8007fcc:	0668      	lsls	r0, r5, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0x1bc>
 8007fd0:	8019      	strh	r1, [r3, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	4616      	mov	r6, r2
 8007fd8:	e7bc      	b.n	8007f54 <_printf_i+0x148>
 8007fda:	6833      	ldr	r3, [r6, #0]
 8007fdc:	1d1a      	adds	r2, r3, #4
 8007fde:	6032      	str	r2, [r6, #0]
 8007fe0:	681e      	ldr	r6, [r3, #0]
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7f8 f8f2 	bl	80001d0 <memchr>
 8007fec:	b108      	cbz	r0, 8007ff2 <_printf_i+0x1e6>
 8007fee:	1b80      	subs	r0, r0, r6
 8007ff0:	6060      	str	r0, [r4, #4]
 8007ff2:	6863      	ldr	r3, [r4, #4]
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ffc:	e7aa      	b.n	8007f54 <_printf_i+0x148>
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	4632      	mov	r2, r6
 8008002:	4649      	mov	r1, r9
 8008004:	4640      	mov	r0, r8
 8008006:	47d0      	blx	sl
 8008008:	3001      	adds	r0, #1
 800800a:	d0ad      	beq.n	8007f68 <_printf_i+0x15c>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	079b      	lsls	r3, r3, #30
 8008010:	d413      	bmi.n	800803a <_printf_i+0x22e>
 8008012:	68e0      	ldr	r0, [r4, #12]
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	4298      	cmp	r0, r3
 8008018:	bfb8      	it	lt
 800801a:	4618      	movlt	r0, r3
 800801c:	e7a6      	b.n	8007f6c <_printf_i+0x160>
 800801e:	2301      	movs	r3, #1
 8008020:	4632      	mov	r2, r6
 8008022:	4649      	mov	r1, r9
 8008024:	4640      	mov	r0, r8
 8008026:	47d0      	blx	sl
 8008028:	3001      	adds	r0, #1
 800802a:	d09d      	beq.n	8007f68 <_printf_i+0x15c>
 800802c:	3501      	adds	r5, #1
 800802e:	68e3      	ldr	r3, [r4, #12]
 8008030:	9903      	ldr	r1, [sp, #12]
 8008032:	1a5b      	subs	r3, r3, r1
 8008034:	42ab      	cmp	r3, r5
 8008036:	dcf2      	bgt.n	800801e <_printf_i+0x212>
 8008038:	e7eb      	b.n	8008012 <_printf_i+0x206>
 800803a:	2500      	movs	r5, #0
 800803c:	f104 0619 	add.w	r6, r4, #25
 8008040:	e7f5      	b.n	800802e <_printf_i+0x222>
 8008042:	bf00      	nop
 8008044:	080081f9 	.word	0x080081f9
 8008048:	0800820a 	.word	0x0800820a

0800804c <memmove>:
 800804c:	4288      	cmp	r0, r1
 800804e:	b510      	push	{r4, lr}
 8008050:	eb01 0402 	add.w	r4, r1, r2
 8008054:	d902      	bls.n	800805c <memmove+0x10>
 8008056:	4284      	cmp	r4, r0
 8008058:	4623      	mov	r3, r4
 800805a:	d807      	bhi.n	800806c <memmove+0x20>
 800805c:	1e43      	subs	r3, r0, #1
 800805e:	42a1      	cmp	r1, r4
 8008060:	d008      	beq.n	8008074 <memmove+0x28>
 8008062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800806a:	e7f8      	b.n	800805e <memmove+0x12>
 800806c:	4402      	add	r2, r0
 800806e:	4601      	mov	r1, r0
 8008070:	428a      	cmp	r2, r1
 8008072:	d100      	bne.n	8008076 <memmove+0x2a>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800807a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800807e:	e7f7      	b.n	8008070 <memmove+0x24>

08008080 <_sbrk_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d06      	ldr	r5, [pc, #24]	@ (800809c <_sbrk_r+0x1c>)
 8008084:	2300      	movs	r3, #0
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	f7f9 fd08 	bl	8001aa0 <_sbrk>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_sbrk_r+0x1a>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_sbrk_r+0x1a>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	2000061c 	.word	0x2000061c

080080a0 <memcpy>:
 80080a0:	440a      	add	r2, r1
 80080a2:	4291      	cmp	r1, r2
 80080a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	4770      	bx	lr
 80080ac:	b510      	push	{r4, lr}
 80080ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b6:	4291      	cmp	r1, r2
 80080b8:	d1f9      	bne.n	80080ae <memcpy+0xe>
 80080ba:	bd10      	pop	{r4, pc}

080080bc <_realloc_r>:
 80080bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c0:	4680      	mov	r8, r0
 80080c2:	4615      	mov	r5, r2
 80080c4:	460c      	mov	r4, r1
 80080c6:	b921      	cbnz	r1, 80080d2 <_realloc_r+0x16>
 80080c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080cc:	4611      	mov	r1, r2
 80080ce:	f7ff bc4b 	b.w	8007968 <_malloc_r>
 80080d2:	b92a      	cbnz	r2, 80080e0 <_realloc_r+0x24>
 80080d4:	f7ff fbdc 	bl	8007890 <_free_r>
 80080d8:	2400      	movs	r4, #0
 80080da:	4620      	mov	r0, r4
 80080dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e0:	f000 f81a 	bl	8008118 <_malloc_usable_size_r>
 80080e4:	4285      	cmp	r5, r0
 80080e6:	4606      	mov	r6, r0
 80080e8:	d802      	bhi.n	80080f0 <_realloc_r+0x34>
 80080ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080ee:	d8f4      	bhi.n	80080da <_realloc_r+0x1e>
 80080f0:	4629      	mov	r1, r5
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7ff fc38 	bl	8007968 <_malloc_r>
 80080f8:	4607      	mov	r7, r0
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0ec      	beq.n	80080d8 <_realloc_r+0x1c>
 80080fe:	42b5      	cmp	r5, r6
 8008100:	462a      	mov	r2, r5
 8008102:	4621      	mov	r1, r4
 8008104:	bf28      	it	cs
 8008106:	4632      	movcs	r2, r6
 8008108:	f7ff ffca 	bl	80080a0 <memcpy>
 800810c:	4621      	mov	r1, r4
 800810e:	4640      	mov	r0, r8
 8008110:	f7ff fbbe 	bl	8007890 <_free_r>
 8008114:	463c      	mov	r4, r7
 8008116:	e7e0      	b.n	80080da <_realloc_r+0x1e>

08008118 <_malloc_usable_size_r>:
 8008118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800811c:	1f18      	subs	r0, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfbc      	itt	lt
 8008122:	580b      	ldrlt	r3, [r1, r0]
 8008124:	18c0      	addlt	r0, r0, r3
 8008126:	4770      	bx	lr

08008128 <_init>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr

08008134 <_fini>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr
