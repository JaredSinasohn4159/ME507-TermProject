
Term_Proj_2_Elec_Bugalu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800815c  0800815c  0000915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008230  08008230  0000a0a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008238  08008238  0000a0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008238  08008238  00009238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800823c  0800823c  0000923c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08008240  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200000a4  080082e4  0000a0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  080082e4  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019335  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd6  00000000  00000000  00023409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000263e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011cd  00000000  00000000  00027a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dca  00000000  00000000  00028c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b68f  00000000  00000000  0002ba17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010712d  00000000  00000000  000470a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e1d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066cc  00000000  00000000  0014e218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001548e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008144 	.word	0x08008144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08008144 	.word	0x08008144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <encoder_read_curr_state>:
 *  Created on: May 23, 2024
 *      Author: Jared Sinasohn
 */
#include "encoder_handler.h"

void encoder_read_curr_state(Encoder* encoder){
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint32_t ARR = (int32_t)(encoder->timer->Init.Period );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	613b      	str	r3, [r7, #16]
	encoder->curr_count = encoder->timer->Instance->CNT;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	609a      	str	r2, [r3, #8]
	encoder->curr_time = HAL_GetTick();
 800057c:	f001 f918 	bl	80017b0 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	611a      	str	r2, [r3, #16]
	int32_t overflow = (ARR+1)/2;
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	3301      	adds	r3, #1
 800058a:	085b      	lsrs	r3, r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
	int32_t delta = encoder->curr_count - encoder->prev_count;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	617b      	str	r3, [r7, #20]
	if(delta >= overflow){
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	429a      	cmp	r2, r3
 80005a0:	db05      	blt.n	80005ae <encoder_read_curr_state+0x4e>
		delta = delta - overflow*2;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e008      	b.n	80005c0 <encoder_read_curr_state+0x60>
	}else if(delta <= -1*overflow){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	425b      	negs	r3, r3
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dc03      	bgt.n	80005c0 <encoder_read_curr_state+0x60>
		delta = delta + overflow;
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	617b      	str	r3, [r7, #20]
	}else{
		delta = delta;
	}
	encoder->pos = encoder->pos + delta;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	441a      	add	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	615a      	str	r2, [r3, #20]
	encoder->speed = encoder_calc_speed(encoder,delta);
 80005cc:	6979      	ldr	r1, [r7, #20]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f80f 	bl	80005f2 <encoder_calc_speed>
 80005d4:	4602      	mov	r2, r0
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	619a      	str	r2, [r3, #24]
	encoder->prev_count = encoder->curr_count;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	605a      	str	r2, [r3, #4]
	encoder->prev_time = encoder->curr_time;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	691a      	ldr	r2, [r3, #16]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	60da      	str	r2, [r3, #12]

}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <encoder_calc_speed>:
int32_t encoder_calc_speed(Encoder* encoder, int32_t delta){
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
	return (delta)*1000/((int32_t)(encoder->curr_time - encoder->prev_time));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	6911      	ldr	r1, [r2, #16]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	68d2      	ldr	r2, [r2, #12]
 800060e:	1a8a      	subs	r2, r1, r2
 8000610:	fb93 f3f2 	sdiv	r3, r3, r2
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f001 f853 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f8ed 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 fc53 	bl	8000ed8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 fc21 	bl	8000e78 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000636:	f000 f9ef 	bl	8000a18 <MX_TIM1_Init>
  MX_TIM3_Init();
 800063a:	f000 fa89 	bl	8000b50 <MX_TIM3_Init>
  MX_ADC1_Init();
 800063e:	f000 f935 	bl	80008ac <MX_ADC1_Init>
  MX_I2C2_Init();
 8000642:	f000 f9a9 	bl	8000998 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000646:	f000 fb03 	bl	8000c50 <MX_TIM4_Init>
  MX_TIM5_Init();
 800064a:	f000 fb57 	bl	8000cfc <MX_TIM5_Init>
  MX_TIM8_Init();
 800064e:	f000 fbab 	bl	8000da8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_Init();
 8000652:	f001 f83d 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 8000656:	f000 f8d7 	bl	8000808 <SystemClock_Config>
  MX_GPIO_Init();
 800065a:	f000 fc3d 	bl	8000ed8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800065e:	f000 f99b 	bl	8000998 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000662:	f000 fc09 	bl	8000e78 <MX_USART2_UART_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000666:	213c      	movs	r1, #60	@ 0x3c
 8000668:	4856      	ldr	r0, [pc, #344]	@ (80007c4 <main+0x1a4>)
 800066a:	f004 fba8 	bl	8004dbe <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800066e:	213c      	movs	r1, #60	@ 0x3c
 8000670:	4855      	ldr	r0, [pc, #340]	@ (80007c8 <main+0x1a8>)
 8000672:	f004 fba4 	bl	8004dbe <HAL_TIM_Encoder_Start>
  //! allow for receiving of interrupts through uart
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&char_in, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	4954      	ldr	r1, [pc, #336]	@ (80007cc <main+0x1ac>)
 800067a:	4855      	ldr	r0, [pc, #340]	@ (80007d0 <main+0x1b0>)
 800067c:	f005 fdc8 	bl	8006210 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4854      	ldr	r0, [pc, #336]	@ (80007d4 <main+0x1b4>)
 8000684:	f004 f998 	bl	80049b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4852      	ldr	r0, [pc, #328]	@ (80007d4 <main+0x1b4>)
 800068c:	f004 f994 	bl	80049b8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f002 fb73 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2104      	movs	r1, #4
 80006a2:	484d      	ldr	r0, [pc, #308]	@ (80007d8 <main+0x1b8>)
 80006a4:	f002 fb6e 	bl	8002d84 <HAL_GPIO_WritePin>
  uint8_t i = 0, ret;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80006ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006b0:	221a      	movs	r2, #26
 80006b2:	494a      	ldr	r1, [pc, #296]	@ (80007dc <main+0x1bc>)
 80006b4:	4846      	ldr	r0, [pc, #280]	@ (80007d0 <main+0x1b0>)
 80006b6:	f005 fd21 	bl	80060fc <HAL_UART_Transmit>
        for(i=1; i<128; i++)
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e028      	b.n	8000712 <main+0xf2>
        {
            ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b299      	uxth	r1, r3
 80006c8:	2305      	movs	r3, #5
 80006ca:	2203      	movs	r2, #3
 80006cc:	4844      	ldr	r0, [pc, #272]	@ (80007e0 <main+0x1c0>)
 80006ce:	f002 fc0c 	bl	8002eea <HAL_I2C_IsDeviceReady>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
            if (ret != HAL_OK) /* No ACK Received At That Address */
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d007      	beq.n	80006ec <main+0xcc>
            {
                HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80006dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006e0:	2204      	movs	r2, #4
 80006e2:	4940      	ldr	r1, [pc, #256]	@ (80007e4 <main+0x1c4>)
 80006e4:	483a      	ldr	r0, [pc, #232]	@ (80007d0 <main+0x1b0>)
 80006e6:	f005 fd09 	bl	80060fc <HAL_UART_Transmit>
 80006ea:	e00f      	b.n	800070c <main+0xec>
            }
            else if(ret == HAL_OK)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10c      	bne.n	800070c <main+0xec>
            {
                sprintf(Buffer, "0x%X", i);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	461a      	mov	r2, r3
 80006f6:	493c      	ldr	r1, [pc, #240]	@ (80007e8 <main+0x1c8>)
 80006f8:	483c      	ldr	r0, [pc, #240]	@ (80007ec <main+0x1cc>)
 80006fa:	f007 f883 	bl	8007804 <siprintf>
                HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 80006fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000702:	2219      	movs	r2, #25
 8000704:	4939      	ldr	r1, [pc, #228]	@ (80007ec <main+0x1cc>)
 8000706:	4832      	ldr	r0, [pc, #200]	@ (80007d0 <main+0x1b0>)
 8000708:	f005 fcf8 	bl	80060fc <HAL_UART_Transmit>
        for(i=1; i<128; i++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	2b00      	cmp	r3, #0
 8000718:	dad2      	bge.n	80006c0 <main+0xa0>
            }
        }
        HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 800071a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800071e:	220b      	movs	r2, #11
 8000720:	4933      	ldr	r1, [pc, #204]	@ (80007f0 <main+0x1d0>)
 8000722:	482b      	ldr	r0, [pc, #172]	@ (80007d0 <main+0x1b0>)
 8000724:	f005 fcea 	bl	80060fc <HAL_UART_Transmit>
        uint32_t time = HAL_GetTick();
 8000728:	f001 f842 	bl	80017b0 <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  /* USER CODE BEGIN WHILE */
  //! @brief This is the game loop that runs forever to convert user inputed code into a PWM signal to drive the motors.
  while (1)
  {

	char_in = 'r';
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <main+0x1ac>)
 8000730:	2272      	movs	r2, #114	@ 0x72
 8000732:	701a      	strb	r2, [r3, #0]
	encoder_read_curr_state(&mot_enc);
 8000734:	482f      	ldr	r0, [pc, #188]	@ (80007f4 <main+0x1d4>)
 8000736:	f7ff ff13 	bl	8000560 <encoder_read_curr_state>
					sprintf(Buffer, "Ab \r\n");
					break;
	}*/
	//motor_set_duty_cycle(&m,100);
	//display_task(&t1state);
	if(HAL_GetTick()>time+500){
 800073a:	f001 f839 	bl	80017b0 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000746:	429a      	cmp	r2, r3
 8000748:	d9f1      	bls.n	800072e <main+0x10e>

		sprintf(Buffer, "Curr time: %d  \r\n",(int)(mot_enc.curr_time));
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <main+0x1d4>)
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	461a      	mov	r2, r3
 8000750:	4929      	ldr	r1, [pc, #164]	@ (80007f8 <main+0x1d8>)
 8000752:	4826      	ldr	r0, [pc, #152]	@ (80007ec <main+0x1cc>)
 8000754:	f007 f856 	bl	8007804 <siprintf>
		HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000758:	f242 7310 	movw	r3, #10000	@ 0x2710
 800075c:	2219      	movs	r2, #25
 800075e:	4923      	ldr	r1, [pc, #140]	@ (80007ec <main+0x1cc>)
 8000760:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <main+0x1b0>)
 8000762:	f005 fccb 	bl	80060fc <HAL_UART_Transmit>
		sprintf(Buffer, "Curr count: %d  \r\n",(int)(mot_enc.curr_count));
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <main+0x1d4>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	461a      	mov	r2, r3
 800076c:	4923      	ldr	r1, [pc, #140]	@ (80007fc <main+0x1dc>)
 800076e:	481f      	ldr	r0, [pc, #124]	@ (80007ec <main+0x1cc>)
 8000770:	f007 f848 	bl	8007804 <siprintf>
		HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000774:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000778:	2219      	movs	r2, #25
 800077a:	491c      	ldr	r1, [pc, #112]	@ (80007ec <main+0x1cc>)
 800077c:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <main+0x1b0>)
 800077e:	f005 fcbd 	bl	80060fc <HAL_UART_Transmit>
		sprintf(Buffer, "Prev count: %d  \r\n",(int)(mot_enc.prev_count));
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <main+0x1d4>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	461a      	mov	r2, r3
 8000788:	491d      	ldr	r1, [pc, #116]	@ (8000800 <main+0x1e0>)
 800078a:	4818      	ldr	r0, [pc, #96]	@ (80007ec <main+0x1cc>)
 800078c:	f007 f83a 	bl	8007804 <siprintf>
		HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000790:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000794:	2219      	movs	r2, #25
 8000796:	4915      	ldr	r1, [pc, #84]	@ (80007ec <main+0x1cc>)
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <main+0x1b0>)
 800079a:	f005 fcaf 	bl	80060fc <HAL_UART_Transmit>
		sprintf(Buffer, "Curr speed: %d  \r\n",(int)(mot_enc.speed));
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <main+0x1d4>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4917      	ldr	r1, [pc, #92]	@ (8000804 <main+0x1e4>)
 80007a6:	4811      	ldr	r0, [pc, #68]	@ (80007ec <main+0x1cc>)
 80007a8:	f007 f82c 	bl	8007804 <siprintf>
		HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 80007ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007b0:	2219      	movs	r2, #25
 80007b2:	490e      	ldr	r1, [pc, #56]	@ (80007ec <main+0x1cc>)
 80007b4:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <main+0x1b0>)
 80007b6:	f005 fca1 	bl	80060fc <HAL_UART_Transmit>
		time = HAL_GetTick();
 80007ba:	f000 fff9 	bl	80017b0 <HAL_GetTick>
 80007be:	60b8      	str	r0, [r7, #8]
	char_in = 'r';
 80007c0:	e7b5      	b.n	800072e <main+0x10e>
 80007c2:	bf00      	nop
 80007c4:	20000210 	.word	0x20000210
 80007c8:	2000025c 	.word	0x2000025c
 80007cc:	2000037c 	.word	0x2000037c
 80007d0:	200002f4 	.word	0x200002f4
 80007d4:	20000178 	.word	0x20000178
 80007d8:	48000400 	.word	0x48000400
 80007dc:	20000020 	.word	0x20000020
 80007e0:	20000124 	.word	0x20000124
 80007e4:	2000001c 	.word	0x2000001c
 80007e8:	0800815c 	.word	0x0800815c
 80007ec:	20000380 	.word	0x20000380
 80007f0:	2000003c 	.word	0x2000003c
 80007f4:	20000000 	.word	0x20000000
 80007f8:	08008164 	.word	0x08008164
 80007fc:	08008178 	.word	0x08008178
 8000800:	0800818c 	.word	0x0800818c
 8000804:	080081a0 	.word	0x080081a0

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	@ 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 f814 	bl	8007844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800082e:	f002 fd59 	bl	80032e4 <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f000 fbd8 	bl	8000fec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000844:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2310      	movs	r3, #16
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000856:	230a      	movs	r3, #10
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085a:	2307      	movs	r3, #7
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fd90 	bl	8003390 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000876:	f000 fbb9 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f003 f958 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089e:	f000 fba5 	bl	8000fec <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3758      	adds	r7, #88	@ 0x58
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000990 <MX_ADC1_Init+0xe4>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <MX_ADC1_Init+0xe0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000900:	2201      	movs	r2, #1
 8000902:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ADC1_Init+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_ADC1_Init+0xe0>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000930:	f001 f8d6 	bl	8001ae0 <HAL_ADC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800093a:	f000 fb57 	bl	8000fec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	@ (800098c <MX_ADC1_Init+0xe0>)
 800094a:	f001 fe31 	bl	80025b0 <HAL_ADCEx_MultiModeConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000954:	f000 fb4a 	bl	8000fec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_ADC1_Init+0xe8>)
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095c:	2306      	movs	r3, #6
 800095e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000964:	237f      	movs	r3, #127	@ 0x7f
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000968:	2304      	movs	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_ADC1_Init+0xe0>)
 8000976:	f001 fa03 	bl	8001d80 <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000980:	f000 fb34 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000c0 	.word	0x200000c0
 8000990:	50040000 	.word	0x50040000
 8000994:	3ac04000 	.word	0x3ac04000

08000998 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C2_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C2_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C2_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009d4:	f002 f9ee 	bl	8002db4 <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fb05 	bl	8000fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009e6:	f002 fbd8 	bl	800319a <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fafc 	bl	8000fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C2_Init+0x74>)
 80009f8:	f002 fc1a 	bl	8003230 <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 faf3 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	40005800 	.word	0x40005800
 8000a14:	10909cec 	.word	0x10909cec

08000a18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b096      	sub	sp, #88	@ 0x58
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	222c      	movs	r2, #44	@ 0x2c
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 fefd 	bl	8007844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b4c <MX_TIM1_Init+0x134>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a50:	4b3d      	ldr	r3, [pc, #244]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b3c      	ldr	r3, [pc, #240]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a6a:	4b37      	ldr	r3, [pc, #220]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a76:	4834      	ldr	r0, [pc, #208]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a78:	f003 ff46 	bl	8004908 <HAL_TIM_PWM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fab3 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a96:	4619      	mov	r1, r3
 8000a98:	482b      	ldr	r0, [pc, #172]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000a9a:	f005 f9bd 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000aa4:	f000 faa2 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	481e      	ldr	r0, [pc, #120]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000ace:	f004 fba3 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ad8:	f000 fa88 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000adc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000ae6:	f004 fb97 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000af0:	f000 fa7c 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000b2a:	f005 f9fd 	bl	8005f28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000b34:	f000 fa5a 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM1_Init+0x130>)
 8000b3a:	f000 fc77 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3758      	adds	r7, #88	@ 0x58
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000178 	.word	0x20000178
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6e:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b70:	4a36      	ldr	r2, [pc, #216]	@ (8000c4c <MX_TIM3_Init+0xfc>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000b74:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b76:	225f      	movs	r2, #95	@ 0x5f
 8000b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b80:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b94:	482c      	ldr	r0, [pc, #176]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000b96:	f004 f815 	bl	8004bc4 <HAL_TIM_IC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ba0:	f000 fa24 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4825      	ldr	r0, [pc, #148]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000bb4:	f005 f930 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000bbe:	f000 fa15 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481b      	ldr	r0, [pc, #108]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000bda:	f004 fa80 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000be4:	f000 fa02 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000be8:	2302      	movs	r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4814      	ldr	r0, [pc, #80]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000bf8:	f004 fa71 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000c02:	f000 f9f3 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000c12:	f004 fa64 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c1c:	f000 f9e6 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c20:	2302      	movs	r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <MX_TIM3_Init+0xf8>)
 8000c30:	f004 fa55 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c3a:	f000 f9d7 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001c4 	.word	0x200001c4
 8000c4c:	40000400 	.word	0x40000400

08000c50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2224      	movs	r2, #36	@ 0x24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 fdf0 	bl	8007844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <MX_TIM4_Init+0xa8>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c94:	2303      	movs	r3, #3
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000cc0:	f003 ffd7 	bl	8004c72 <HAL_TIM_Encoder_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cca:	f000 f98f 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000cdc:	f005 f89c 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000ce6:	f000 f981 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	@ 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000210 	.word	0x20000210
 8000cf8:	40000800 	.word	0x40000800

08000cfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	@ 0x30
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2224      	movs	r2, #36	@ 0x24
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f006 fd9a 	bl	8007844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <MX_TIM5_Init+0xa8>)
 8000d1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d6c:	f003 ff81 	bl	8004c72 <HAL_TIM_Encoder_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000d76:	f000 f939 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d88:	f005 f846 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d92:	f000 f92b 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000025c 	.word	0x2000025c
 8000da4:	40000c00 	.word	0x40000c00

08000da8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <MX_TIM8_Init+0xcc>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dde:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de6:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000df2:	481f      	ldr	r0, [pc, #124]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000df4:	f003 fee6 	bl	8004bc4 <HAL_TIM_IC_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000dfe:	f000 f8f5 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000e16:	f004 ffff 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f000 f8e4 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000e3c:	f004 f94f 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000e46:	f000 f8d1 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_TIM8_Init+0xc8>)
 8000e5a:	f004 f940 	bl	80050de <HAL_TIM_IC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000e64:	f000 f8c2 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200002a8 	.word	0x200002a8
 8000e74:	40013400 	.word	0x40013400

08000e78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <MX_USART2_UART_Init+0x5c>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART2_UART_Init+0x58>)
 8000ebc:	f005 f8d0 	bl	8006060 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f000 f891 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002f4 	.word	0x200002f4
 8000ed4:	40004400 	.word	0x40004400

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a35      	ldr	r2, [pc, #212]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a29      	ldr	r2, [pc, #164]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_GPIO_Init+0x108>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f001 ff14 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4820      	ldr	r0, [pc, #128]	@ (8000fe4 <MX_GPIO_Init+0x10c>)
 8000f62:	f001 ff0f 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <MX_GPIO_Init+0x110>)
 8000f7e:	f001 fd57 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000f82:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f001 fd47 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <MX_GPIO_Init+0x10c>)
 8000fba:	f001 fd39 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_GPIO_Init+0x110>)
 8000fd4:	f001 fd2c 	bl	8002a30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_MspInit+0x44>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <HAL_MspInit+0x44>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_MspInit+0x44>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_MspInit+0x44>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001020:	6593      	str	r3, [r2, #88]	@ 0x58
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	@ 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2288      	movs	r2, #136	@ 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fbef 	bl	8007844 <memset>
  if(hadc->Instance==ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a27      	ldr	r2, [pc, #156]	@ (8001108 <HAL_ADC_MspInit+0xc8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d146      	bne.n	80010fe <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001074:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001076:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800107a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001086:	2308      	movs	r3, #8
 8001088:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001096:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 ff75 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010ac:	f7ff ff9e 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	4a15      	ldr	r2, [pc, #84]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_ADC_MspInit+0xcc>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010e0:	2320      	movs	r3, #32
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e6:	230b      	movs	r3, #11
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <HAL_ADC_MspInit+0xd0>)
 80010fa:	f001 fc99 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	37b0      	adds	r7, #176	@ 0xb0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	50040000 	.word	0x50040000
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ac      	sub	sp, #176	@ 0xb0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2288      	movs	r2, #136	@ 0x88
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f006 fb85 	bl	8007844 <memset>
  if(hi2c->Instance==I2C2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <HAL_I2C_MspInit+0xb0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13b      	bne.n	80011bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f002 ff1d 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff ff46 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001178:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800117c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001180:	2312      	movs	r3, #18
 8001182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001192:	2304      	movs	r3, #4
 8001194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800119c:	4619      	mov	r1, r3
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <HAL_I2C_MspInit+0xb8>)
 80011a0:	f001 fc46 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	37b0      	adds	r7, #176	@ 0xb0
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40005800 	.word	0x40005800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000400 	.word	0x48000400

080011d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_TIM_PWM_MspInit+0x38>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10b      	bne.n	80011fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_TIM_PWM_MspInit+0x3c>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <HAL_TIM_PWM_MspInit+0x3c>)
 80011e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <HAL_TIM_PWM_MspInit+0x3c>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a3c      	ldr	r2, [pc, #240]	@ (8001320 <HAL_TIM_IC_MspInit+0x110>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d145      	bne.n	80012be <HAL_TIM_IC_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	4a3b      	ldr	r2, [pc, #236]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6593      	str	r3, [r2, #88]	@ 0x58
 800123e:	4b39      	ldr	r3, [pc, #228]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a35      	ldr	r2, [pc, #212]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a2f      	ldr	r2, [pc, #188]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800127a:	2380      	movs	r3, #128	@ 0x80
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128a:	2302      	movs	r3, #2
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f001 fbca 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	@ (8001328 <HAL_TIM_IC_MspInit+0x118>)
 80012b8:	f001 fbba 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012bc:	e02c      	b.n	8001318 <HAL_TIM_IC_MspInit+0x108>
  else if(htim_ic->Instance==TIM8)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <HAL_TIM_IC_MspInit+0x11c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d127      	bne.n	8001318 <HAL_TIM_IC_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <HAL_TIM_IC_MspInit+0x114>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f8:	2340      	movs	r3, #64	@ 0x40
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001308:	2303      	movs	r3, #3
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <HAL_TIM_IC_MspInit+0x120>)
 8001314:	f001 fb8c 	bl	8002a30 <HAL_GPIO_Init>
}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	@ 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40000400 	.word	0x40000400
 8001324:	40021000 	.word	0x40021000
 8001328:	48000400 	.word	0x48000400
 800132c:	40013400 	.word	0x40013400
 8001330:	48000800 	.word	0x48000800

08001334 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	@ 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a32      	ldr	r2, [pc, #200]	@ (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6593      	str	r3, [r2, #88]	@ 0x58
 8001362:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001386:	23c0      	movs	r3, #192	@ 0xc0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001396:	2302      	movs	r3, #2
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4820      	ldr	r0, [pc, #128]	@ (8001424 <HAL_TIM_Encoder_MspInit+0xf0>)
 80013a2:	f001 fb45 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013a6:	e035      	b.n	8001414 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_TIM_Encoder_MspInit+0xf4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d130      	bne.n	8001414 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f001 fb16 	bl	8002a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2032      	movs	r0, #50	@ 0x32
 800140a:	f001 fa5c 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800140e:	2032      	movs	r0, #50	@ 0x32
 8001410:	f001 fa75 	bl	80028fe <HAL_NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	@ 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40000800 	.word	0x40000800
 8001420:	40021000 	.word	0x40021000
 8001424:	48000400 	.word	0x48000400
 8001428:	40000c00 	.word	0x40000c00

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <HAL_TIM_MspPostInit+0x68>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11d      	bne.n	800148a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_TIM_MspPostInit+0x6c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001486:	f001 fad3 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0ac      	sub	sp, #176	@ 0xb0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2288      	movs	r2, #136	@ 0x88
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 f9c1 	bl	8007844 <memset>
  if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a25      	ldr	r2, [pc, #148]	@ (800155c <HAL_UART_MspInit+0xc0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d143      	bne.n	8001554 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fd59 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff fd82 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	4a16      	ldr	r2, [pc, #88]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_UART_MspInit+0xc4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001518:	230c      	movs	r3, #12
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001530:	2307      	movs	r3, #7
 8001532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001540:	f001 fa76 	bl	8002a30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2026      	movs	r0, #38	@ 0x26
 800154a:	f001 f9bc 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800154e:	2026      	movs	r0, #38	@ 0x26
 8001550:	f001 f9d5 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	37b0      	adds	r7, #176	@ 0xb0
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40004400 	.word	0x40004400
 8001560:	40021000 	.word	0x40021000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <NMI_Handler+0x4>

0800156c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <MemManage_Handler+0x4>

0800157c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <UsageFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ba:	f000 f8e5 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <USART2_IRQHandler+0x10>)
 80015ca:	f004 fe6d 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200002f4 	.word	0x200002f4

080015d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <TIM5_IRQHandler+0x10>)
 80015de:	f003 fc7c 	bl	8004eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000025c 	.word	0x2000025c

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f006 f91a 	bl	8007854 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20018000 	.word	0x20018000
 800164c:	00000400 	.word	0x00000400
 8001650:	2000039c 	.word	0x2000039c
 8001654:	200004f0 	.word	0x200004f0

08001658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001680:	f7ff ffea 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopForever+0xe>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopForever+0x16>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f006 f8d9 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ae:	f7fe ffb7 	bl	8000620 <main>

080016b2 <LoopForever>:

LoopForever:
    b LoopForever
 80016b2:	e7fe      	b.n	80016b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016c0:	08008240 	.word	0x08008240
  ldr r2, =_sbss
 80016c4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016c8:	200004ec 	.word	0x200004ec

080016cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC1_2_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_Init+0x3c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <HAL_Init+0x3c>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f001 f8e2 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ec:	2000      	movs	r0, #0
 80016ee:	f000 f80f 	bl	8001710 <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	e001      	b.n	8001702 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fe:	f7ff fc7b 	bl	8000ff8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f8ed 	bl	800291a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f001 f8b7 	bl	80028c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000050 	.word	0x20000050
 8001780:	20000048 	.word	0x20000048
 8001784:	2000004c 	.word	0x2000004c

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000050 	.word	0x20000050
 80017ac:	200003a0 	.word	0x200003a0

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200003a0 	.word	0x200003a0

080017c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3360      	adds	r3, #96	@ 0x60
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <LL_ADC_SetOffset+0x44>)
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	4313      	orrs	r3, r2
 8001860:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	03fff000 	.word	0x03fff000

08001878 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3360      	adds	r3, #96	@ 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3360      	adds	r3, #96	@ 0x60
 80018b4:	461a      	mov	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3330      	adds	r3, #48	@ 0x30
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	211f      	movs	r1, #31
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0e9b      	lsrs	r3, r3, #26
 8001912:	f003 011f 	and.w	r1, r3, #31
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3314      	adds	r3, #20
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0e5b      	lsrs	r3, r3, #25
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	0d1b      	lsrs	r3, r3, #20
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2107      	movs	r1, #7
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0d1b      	lsrs	r3, r3, #20
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0318 	and.w	r3, r3, #24
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019ac:	40d9      	lsrs	r1, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	400b      	ands	r3, r1
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	0007ffff 	.word	0x0007ffff

080019d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6093      	str	r3, [r2, #8]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_IsEnabled+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_IsEnabled+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d101      	bne.n	8001ad0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e130      	b.n	8001d5c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fa99 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff67 	bl	80019f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff4d 	bl	80019d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff82 	bl	8001a44 <LL_ADC_IsInternalRegulatorEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff66 	bl	8001a1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b50:	4b84      	ldr	r3, [pc, #528]	@ (8001d64 <HAL_ADC_Init+0x284>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	4a84      	ldr	r2, [pc, #528]	@ (8001d68 <HAL_ADC_Init+0x288>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff64 	bl	8001a44 <LL_ADC_IsInternalRegulatorEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff75 	bl	8001a92 <LL_ADC_REG_IsConversionOngoing>
 8001ba8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80c9 	bne.w	8001d4a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 80c5 	bne.w	8001d4a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bc8:	f043 0202 	orr.w	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff49 	bl	8001a6c <LL_ADC_IsEnabled>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d115      	bne.n	8001c0c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be0:	4862      	ldr	r0, [pc, #392]	@ (8001d6c <HAL_ADC_Init+0x28c>)
 8001be2:	f7ff ff43 	bl	8001a6c <LL_ADC_IsEnabled>
 8001be6:	4604      	mov	r4, r0
 8001be8:	4861      	ldr	r0, [pc, #388]	@ (8001d70 <HAL_ADC_Init+0x290>)
 8001bea:	f7ff ff3f 	bl	8001a6c <LL_ADC_IsEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	431c      	orrs	r4, r3
 8001bf2:	4860      	ldr	r0, [pc, #384]	@ (8001d74 <HAL_ADC_Init+0x294>)
 8001bf4:	f7ff ff3a 	bl	8001a6c <LL_ADC_IsEnabled>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	485c      	ldr	r0, [pc, #368]	@ (8001d78 <HAL_ADC_Init+0x298>)
 8001c08:	f7ff fdde 	bl	80017c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e5b      	ldrb	r3, [r3, #25]
 8001c10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d106      	bne.n	8001c48 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	045b      	lsls	r3, r3, #17
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <HAL_ADC_Init+0x29c>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff1b 	bl	8001ab8 <LL_ADC_INJ_IsConversionOngoing>
 8001c82:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13d      	bne.n	8001d06 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d13a      	bne.n	8001d06 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c94:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c9c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cac:	f023 0302 	bic.w	r3, r3, #2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d118      	bne.n	8001cf6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10c      	bne.n	8001d28 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	f023 010f 	bic.w	r1, r3, #15
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d26:	e007      	b.n	8001d38 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020f 	bic.w	r2, r2, #15
 8001d36:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f023 0303 	bic.w	r3, r3, #3
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d48:	e007      	b.n	8001d5a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3724      	adds	r7, #36	@ 0x24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	20000048 	.word	0x20000048
 8001d68:	053e2d63 	.word	0x053e2d63
 8001d6c:	50040000 	.word	0x50040000
 8001d70:	50040100 	.word	0x50040100
 8001d74:	50040200 	.word	0x50040200
 8001d78:	50040300 	.word	0x50040300
 8001d7c:	fff0c007 	.word	0xfff0c007

08001d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0b6      	sub	sp, #216	@ 0xd8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x22>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e3c9      	b.n	8002536 <HAL_ADC_ConfigChannel+0x7b6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe6f 	bl	8001a92 <LL_ADC_REG_IsConversionOngoing>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 83aa 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d824      	bhi.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	3b02      	subs	r3, #2
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d81b      	bhi.n	8001e0e <HAL_ADC_ConfigChannel+0x8e>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <HAL_ADC_ConfigChannel+0x5c>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001e05 	.word	0x08001e05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001dec:	230c      	movs	r3, #12
 8001dee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001df2:	e010      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001df4:	2312      	movs	r3, #18
 8001df6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001dfa:	e00c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001dfc:	2318      	movs	r3, #24
 8001dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e02:	e008      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e0e:	2306      	movs	r3, #6
 8001e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e24:	f7ff fd59 	bl	80018da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe30 	bl	8001a92 <LL_ADC_REG_IsConversionOngoing>
 8001e32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe3c 	bl	8001ab8 <LL_ADC_INJ_IsConversionOngoing>
 8001e40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 81a4 	bne.w	8002196 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 819f 	bne.w	8002196 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f7ff fd64 	bl	8001932 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6919      	ldr	r1, [r3, #16]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e9c:	f7ff fcc8 	bl	8001830 <LL_ADC_SetOffset>
 8001ea0:	e179      	b.n	8002196 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fce5 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x14e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fcda 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	e01e      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x18c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fccf 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ef4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e004      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1a4>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	e018      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1d6>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e004      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc9e 	bl	80018a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fc82 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x214>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc77 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	e01e      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x252>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fc6c 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e004      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x26a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	e018      	b.n	800201c <HAL_ADC_ConfigChannel+0x29c>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002002:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002006:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800200e:	2320      	movs	r3, #32
 8002010:	e004      	b.n	800201c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002012:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	2101      	movs	r1, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc3b 	bl	80018a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2102      	movs	r1, #2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fc1f 	bl	8001878 <LL_ADC_GetOffsetChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_ADC_ConfigChannel+0x2da>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2102      	movs	r1, #2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fc14 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	e01e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x318>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2102      	movs	r1, #2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fc09 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800207c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e004      	b.n	8002096 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x330>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	e014      	b.n	80020da <HAL_ADC_ConfigChannel+0x35a>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80020be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80020c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e004      	b.n	80020da <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80020d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2102      	movs	r1, #2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fbdc 	bl	80018a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2103      	movs	r1, #3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fbc0 	bl	8001878 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x398>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2103      	movs	r1, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fbb5 	bl	8001878 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	e017      	b.n	8002148 <HAL_ADC_ConfigChannel+0x3c8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2103      	movs	r1, #3
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fbaa 	bl	8001878 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002132:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e003      	b.n	8002146 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800213e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x3e0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	e011      	b.n	8002184 <HAL_ADC_ConfigChannel+0x404>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800216e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002170:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800217c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002184:	429a      	cmp	r2, r3
 8002186:	d106      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	2103      	movs	r1, #3
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fb87 	bl	80018a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc66 	bl	8001a6c <LL_ADC_IsEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8140 	bne.w	8002428 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fbe7 	bl	8001988 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a8f      	ldr	r2, [pc, #572]	@ (80023fc <HAL_ADC_ConfigChannel+0x67c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f040 8131 	bne.w	8002428 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x46e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	bf94      	ite	ls
 80021e6:	2301      	movls	r3, #1
 80021e8:	2300      	movhi	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e019      	b.n	8002222 <HAL_ADC_ConfigChannel+0x4a2>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2b09      	cmp	r3, #9
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002222:	2b00      	cmp	r3, #0
 8002224:	d079      	beq.n	800231a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x4c2>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	3301      	adds	r3, #1
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002240:	e015      	b.n	800226e <HAL_ADC_ConfigChannel+0x4ee>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002252:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800225e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_ADC_ConfigChannel+0x50e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	e017      	b.n	80022be <HAL_ADC_ConfigChannel+0x53e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	ea42 0103 	orr.w	r1, r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x564>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 021f 	and.w	r2, r3, #31
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	051b      	lsls	r3, r3, #20
 80022e2:	e018      	b.n	8002316 <HAL_ADC_ConfigChannel+0x596>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002316:	430b      	orrs	r3, r1
 8002318:	e081      	b.n	800241e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x5b6>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	3301      	adds	r3, #1
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002334:	e015      	b.n	8002362 <HAL_ADC_ConfigChannel+0x5e2>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	069b      	lsls	r3, r3, #26
 800235e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x602>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	3301      	adds	r3, #1
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	e017      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x632>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	61bb      	str	r3, [r7, #24]
  return result;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	ea42 0103 	orr.w	r1, r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_ADC_ConfigChannel+0x65e>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 021f 	and.w	r2, r3, #31
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	3b1e      	subs	r3, #30
 80023d6:	051b      	lsls	r3, r3, #20
 80023d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	e01e      	b.n	800241c <HAL_ADC_ConfigChannel+0x69c>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	60fb      	str	r3, [r7, #12]
  return result;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80023f6:	2320      	movs	r3, #32
 80023f8:	e006      	b.n	8002408 <HAL_ADC_ConfigChannel+0x688>
 80023fa:	bf00      	nop
 80023fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	3b1e      	subs	r3, #30
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002422:	4619      	mov	r1, r3
 8002424:	f7ff fa85 	bl	8001932 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_ADC_ConfigChannel+0x7c0>)
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d07a      	beq.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002434:	4843      	ldr	r0, [pc, #268]	@ (8002544 <HAL_ADC_ConfigChannel+0x7c4>)
 8002436:	f7ff f9ed 	bl	8001814 <LL_ADC_GetCommonPathInternalCh>
 800243a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a41      	ldr	r2, [pc, #260]	@ (8002548 <HAL_ADC_ConfigChannel+0x7c8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d12c      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800244c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d126      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3c      	ldr	r2, [pc, #240]	@ (800254c <HAL_ADC_ConfigChannel+0x7cc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x6e8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3b      	ldr	r2, [pc, #236]	@ (8002550 <HAL_ADC_ConfigChannel+0x7d0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d15d      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800246c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002470:	4619      	mov	r1, r3
 8002472:	4834      	ldr	r0, [pc, #208]	@ (8002544 <HAL_ADC_ConfigChannel+0x7c4>)
 8002474:	f7ff f9bb 	bl	80017ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <HAL_ADC_ConfigChannel+0x7d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <HAL_ADC_ConfigChannel+0x7d8>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002492:	e002      	b.n	800249a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3b01      	subs	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a0:	e040      	b.n	8002524 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2d      	ldr	r2, [pc, #180]	@ (800255c <HAL_ADC_ConfigChannel+0x7dc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d118      	bne.n	80024de <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d112      	bne.n	80024de <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a23      	ldr	r2, [pc, #140]	@ (800254c <HAL_ADC_ConfigChannel+0x7cc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x74c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <HAL_ADC_ConfigChannel+0x7d0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d12d      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d4:	4619      	mov	r1, r3
 80024d6:	481b      	ldr	r0, [pc, #108]	@ (8002544 <HAL_ADC_ConfigChannel+0x7c4>)
 80024d8:	f7ff f989 	bl	80017ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	e024      	b.n	8002528 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002560 <HAL_ADC_ConfigChannel+0x7e0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d120      	bne.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11a      	bne.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <HAL_ADC_ConfigChannel+0x7cc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d115      	bne.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002506:	4619      	mov	r1, r3
 8002508:	480e      	ldr	r0, [pc, #56]	@ (8002544 <HAL_ADC_ConfigChannel+0x7c4>)
 800250a:	f7ff f970 	bl	80017ee <LL_ADC_SetCommonPathInternalCh>
 800250e:	e00c      	b.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002522:	e002      	b.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002524:	bf00      	nop
 8002526:	e000      	b.n	800252a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002528:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002532:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002536:	4618      	mov	r0, r3
 8002538:	37d8      	adds	r7, #216	@ 0xd8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	80080000 	.word	0x80080000
 8002544:	50040300 	.word	0x50040300
 8002548:	c7520000 	.word	0xc7520000
 800254c:	50040000 	.word	0x50040000
 8002550:	50040200 	.word	0x50040200
 8002554:	20000048 	.word	0x20000048
 8002558:	053e2d63 	.word	0x053e2d63
 800255c:	cb840000 	.word	0xcb840000
 8002560:	80000001 	.word	0x80000001

08002564 <LL_ADC_IsEnabled>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <LL_ADC_IsEnabled+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_ADC_IsEnabled+0x1a>
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_REG_IsConversionOngoing>:
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d101      	bne.n	80025a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b09f      	sub	sp, #124	@ 0x7c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e093      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80025d6:	2300      	movs	r3, #0
 80025d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80025da:	2300      	movs	r3, #0
 80025dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a47      	ldr	r2, [pc, #284]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025e8:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	e001      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e072      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ffb9 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002618:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ffb3 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d154      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800262a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800262c:	2b00      	cmp	r3, #0
 800262e:	d151      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002630:	4b35      	ldr	r3, [pc, #212]	@ (8002708 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002632:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d02c      	beq.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800263c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800264e:	035b      	lsls	r3, r3, #13
 8002650:	430b      	orrs	r3, r1
 8002652:	431a      	orrs	r2, r3
 8002654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002656:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002658:	4829      	ldr	r0, [pc, #164]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800265a:	f7ff ff83 	bl	8002564 <LL_ADC_IsEnabled>
 800265e:	4604      	mov	r4, r0
 8002660:	4828      	ldr	r0, [pc, #160]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002662:	f7ff ff7f 	bl	8002564 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	431c      	orrs	r4, r3
 800266a:	4828      	ldr	r0, [pc, #160]	@ (800270c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800266c:	f7ff ff7a 	bl	8002564 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	4323      	orrs	r3, r4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d137      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	430a      	orrs	r2, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002692:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002694:	e028      	b.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a2:	4817      	ldr	r0, [pc, #92]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026a4:	f7ff ff5e 	bl	8002564 <LL_ADC_IsEnabled>
 80026a8:	4604      	mov	r4, r0
 80026aa:	4816      	ldr	r0, [pc, #88]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ac:	f7ff ff5a 	bl	8002564 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	431c      	orrs	r4, r3
 80026b4:	4815      	ldr	r0, [pc, #84]	@ (800270c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026b6:	f7ff ff55 	bl	8002564 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4323      	orrs	r3, r4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026ca:	f023 030f 	bic.w	r3, r3, #15
 80026ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026d2:	e009      	b.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80026e6:	e000      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	377c      	adds	r7, #124	@ 0x7c
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	50040000 	.word	0x50040000
 8002704:	50040100 	.word	0x50040100
 8002708:	50040300 	.word	0x50040300
 800270c:	50040200 	.word	0x50040200

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d008      	beq.n	800295c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2204      	movs	r2, #4
 800294e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e022      	b.n	80029a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f003 021c 	and.w	r2, r3, #28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d005      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e029      	b.n	8002a26 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 020e 	bic.w	r2, r2, #14
 80029e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f003 021c 	and.w	r2, r3, #28
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
    }
  }
  return status;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e17f      	b.n	8002d40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8171 	beq.w	8002d3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d005      	beq.n	8002a70 <HAL_GPIO_Init+0x40>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d130      	bne.n	8002ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0201 	and.w	r2, r3, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d118      	bne.n	8002b10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	6939      	ldr	r1, [r7, #16]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80ac 	beq.w	8002d3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d60 <HAL_GPIO_Init+0x330>)
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d60 <HAL_GPIO_Init+0x330>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bee:	4b5c      	ldr	r3, [pc, #368]	@ (8002d60 <HAL_GPIO_Init+0x330>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x242>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4f      	ldr	r2, [pc, #316]	@ (8002d68 <HAL_GPIO_Init+0x338>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x23e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4e      	ldr	r2, [pc, #312]	@ (8002d6c <HAL_GPIO_Init+0x33c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x23a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4d      	ldr	r2, [pc, #308]	@ (8002d70 <HAL_GPIO_Init+0x340>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x236>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4c      	ldr	r2, [pc, #304]	@ (8002d74 <HAL_GPIO_Init+0x344>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x232>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	@ (8002d78 <HAL_GPIO_Init+0x348>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x22e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4a      	ldr	r2, [pc, #296]	@ (8002d7c <HAL_GPIO_Init+0x34c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x22a>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c72:	2300      	movs	r3, #0
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c84:	4937      	ldr	r1, [pc, #220]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cb6:	4a32      	ldr	r2, [pc, #200]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ce0:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_GPIO_Init+0x350>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f ae78 	bne.w	8002a40 <HAL_GPIO_Init+0x10>
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	48001000 	.word	0x48001000
 8002d78:	48001400 	.word	0x48001400
 8002d7c:	48001800 	.word	0x48001800
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08d      	b.n	8002ee2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f99a 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	@ 0x24
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e006      	b.n	8002e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d108      	bne.n	8002e56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	e007      	b.n	8002e66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	@ 0x28
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 80f3 	bne.w	80030f2 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0e9      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_IsDeviceReady+0x44>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e0e2      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2224      	movs	r2, #36	@ 0x24
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_I2C_IsDeviceReady+0x72>
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_IsDeviceReady+0x80>
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fc1e 	bl	80017b0 <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fa2:	e034      	b.n	800300e <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d01a      	beq.n	8002fe2 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7fe fc00 	bl	80017b0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <HAL_I2C_IsDeviceReady+0xd8>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e088      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <HAL_I2C_IsDeviceReady+0x130>
 8003014:	7fbb      	ldrb	r3, [r7, #30]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0c4      	beq.n	8002fa4 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d01a      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2120      	movs	r1, #32
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f862 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e058      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2220      	movs	r2, #32
 8003048:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e04a      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2120      	movs	r1, #32
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f847 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e03d      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2210      	movs	r2, #16
 800307e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2220      	movs	r2, #32
 8003086:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d118      	bne.n	80030c2 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800309e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2120      	movs	r1, #32
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f826 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01c      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2220      	movs	r2, #32
 80030c0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f63f af39 	bhi.w	8002f44 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310c:	e031      	b.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d02d      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe fb4b 	bl	80017b0 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d122      	bne.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d113      	bne.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	429a      	cmp	r2, r3
 800318e:	d0be      	beq.n	800310e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d138      	bne.n	8003222 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e032      	b.n	8003224 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2224      	movs	r2, #36	@ 0x24
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d139      	bne.n	80032ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e033      	b.n	80032bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003282:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40007000 	.word	0x40007000

080032e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f2:	d130      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f4:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003300:	d038      	beq.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003302:	4b20      	ldr	r3, [pc, #128]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800330a:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003312:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2232      	movs	r2, #50	@ 0x32
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0c9b      	lsrs	r3, r3, #18
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003328:	e002      	b.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3b01      	subs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333c:	d102      	bne.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f2      	bne.n	800332a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003344:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003350:	d110      	bne.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e00f      	b.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003362:	d007      	beq.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800336c:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000
 8003388:	20000048 	.word	0x20000048
 800338c:	431bde83 	.word	0x431bde83

08003390 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e3ca      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b97      	ldr	r3, [pc, #604]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b94      	ldr	r3, [pc, #592]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80e4 	beq.w	800358c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_RCC_OscConfig+0x4a>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f040 808b 	bne.w	80034e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8087 	bne.w	80034e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033da:	4b89      	ldr	r3, [pc, #548]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e3a2      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	4b82      	ldr	r3, [pc, #520]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCC_OscConfig+0x7c>
 8003402:	4b7f      	ldr	r3, [pc, #508]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800340a:	e005      	b.n	8003418 <HAL_RCC_OscConfig+0x88>
 800340c:	4b7c      	ldr	r3, [pc, #496]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003418:	4293      	cmp	r3, r2
 800341a:	d223      	bcs.n	8003464 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd55 	bl	8003ed0 <RCC_SetFlashLatencyFromMSIRange>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e383      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003430:	4b73      	ldr	r3, [pc, #460]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a72      	ldr	r2, [pc, #456]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b70      	ldr	r3, [pc, #448]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	496d      	ldr	r1, [pc, #436]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344e:	4b6c      	ldr	r3, [pc, #432]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	4968      	ldr	r1, [pc, #416]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 8003462:	e025      	b.n	80034b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003464:	4b66      	ldr	r3, [pc, #408]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a65      	ldr	r2, [pc, #404]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b63      	ldr	r3, [pc, #396]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4960      	ldr	r1, [pc, #384]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003482:	4b5f      	ldr	r3, [pc, #380]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	495b      	ldr	r1, [pc, #364]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd15 	bl	8003ed0 <RCC_SetFlashLatencyFromMSIRange>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e343      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b0:	f000 fc4a 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b52      	ldr	r3, [pc, #328]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	4950      	ldr	r1, [pc, #320]	@ (8003604 <HAL_RCC_OscConfig+0x274>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003608 <HAL_RCC_OscConfig+0x278>)
 80034ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d0:	4b4e      	ldr	r3, [pc, #312]	@ (800360c <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe f91b 	bl	8001710 <HAL_InitTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d052      	beq.n	800358a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	e327      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f0:	4b43      	ldr	r3, [pc, #268]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a42      	ldr	r2, [pc, #264]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fc:	f7fe f958 	bl	80017b0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003504:	f7fe f954 	bl	80017b0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e310      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003516:	4b3a      	ldr	r3, [pc, #232]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003522:	4b37      	ldr	r3, [pc, #220]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a36      	ldr	r2, [pc, #216]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b34      	ldr	r3, [pc, #208]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4931      	ldr	r1, [pc, #196]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003540:	4b2f      	ldr	r3, [pc, #188]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	492c      	ldr	r1, [pc, #176]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
 8003554:	e01a      	b.n	800358c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003556:	4b2a      	ldr	r3, [pc, #168]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003562:	f7fe f925 	bl	80017b0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356a:	f7fe f921 	bl	80017b0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e2dd      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357c:	4b20      	ldr	r3, [pc, #128]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x1da>
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d074      	beq.n	8003682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x21a>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d10e      	bne.n	80035c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d064      	beq.n	8003680 <HAL_RCC_OscConfig+0x2f0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d160      	bne.n	8003680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e2ba      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x24a>
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	e026      	b.n	8003628 <HAL_RCC_OscConfig+0x298>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e2:	d115      	bne.n	8003610 <HAL_RCC_OscConfig+0x280>
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a05      	ldr	r2, [pc, #20]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a02      	ldr	r2, [pc, #8]	@ (8003600 <HAL_RCC_OscConfig+0x270>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x298>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	080081b4 	.word	0x080081b4
 8003608:	20000048 	.word	0x20000048
 800360c:	2000004c 	.word	0x2000004c
 8003610:	4ba0      	ldr	r3, [pc, #640]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a9f      	ldr	r2, [pc, #636]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b9d      	ldr	r3, [pc, #628]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9c      	ldr	r2, [pc, #624]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe f8be 	bl	80017b0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f8ba 	bl	80017b0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	@ 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e276      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	4b92      	ldr	r3, [pc, #584]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x2a8>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe f8aa 	bl	80017b0 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe f8a6 	bl	80017b0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e262      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	4b88      	ldr	r3, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d0>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d060      	beq.n	8003750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_OscConfig+0x310>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d119      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d116      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x328>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e23f      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b76      	ldr	r3, [pc, #472]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	4973      	ldr	r1, [pc, #460]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	e040      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d023      	beq.n	800371e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6e      	ldr	r2, [pc, #440]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe f865 	bl	80017b0 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fe f861 	bl	80017b0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e21d      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fc:	4b65      	ldr	r3, [pc, #404]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b62      	ldr	r3, [pc, #392]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	495f      	ldr	r1, [pc, #380]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
 800371c:	e018      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371e:	4b5d      	ldr	r3, [pc, #372]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5c      	ldr	r2, [pc, #368]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe f841 	bl	80017b0 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe f83d 	bl	80017b0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1f9      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003744:	4b53      	ldr	r3, [pc, #332]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d03c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01c      	beq.n	800379e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003764:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	4a4a      	ldr	r2, [pc, #296]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe f81c 	bl	80017b0 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe f818 	bl	80017b0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1d4      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378e:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCC_OscConfig+0x3ec>
 800379c:	e01b      	b.n	80037d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fd ffff 	bl	80017b0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fd fffb 	bl	80017b0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1b7      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ef      	bne.n	80037b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a6 	beq.w	8003930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b27      	ldr	r3, [pc, #156]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a26      	ldr	r2, [pc, #152]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_RCC_OscConfig+0x508>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d118      	bne.n	800384e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381c:	4b1e      	ldr	r3, [pc, #120]	@ (8003898 <HAL_RCC_OscConfig+0x508>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1d      	ldr	r2, [pc, #116]	@ (8003898 <HAL_RCC_OscConfig+0x508>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003828:	f7fd ffc2 	bl	80017b0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd ffbe 	bl	80017b0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e17a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_RCC_OscConfig+0x508>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x4d8>
 8003856:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003866:	e029      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d115      	bne.n	800389c <HAL_RCC_OscConfig+0x50c>
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003876:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a03      	ldr	r2, [pc, #12]	@ (8003894 <HAL_RCC_OscConfig+0x504>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003890:	e014      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
 800389c:	4b9c      	ldr	r3, [pc, #624]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	4a9b      	ldr	r2, [pc, #620]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038ac:	4b98      	ldr	r3, [pc, #608]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	4a97      	ldr	r2, [pc, #604]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd ff74 	bl	80017b0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd ff70 	bl	80017b0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e12a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ed      	beq.n	80038cc <HAL_RCC_OscConfig+0x53c>
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff5d 	bl	80017b0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd ff59 	bl	80017b0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e113      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	4b7f      	ldr	r3, [pc, #508]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ed      	bne.n	80038fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b7a      	ldr	r3, [pc, #488]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	4a79      	ldr	r2, [pc, #484]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80fe 	beq.w	8003b36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	2b02      	cmp	r3, #2
 8003940:	f040 80d0 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003944:	4b72      	ldr	r3, [pc, #456]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	429a      	cmp	r2, r3
 8003956:	d130      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	3b01      	subs	r3, #1
 8003964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d127      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003974:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11f      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003984:	2a07      	cmp	r2, #7
 8003986:	bf14      	ite	ne
 8003988:	2201      	movne	r2, #1
 800398a:	2200      	moveq	r2, #0
 800398c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398e:	4293      	cmp	r3, r2
 8003990:	d113      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d06e      	beq.n	8003a98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d069      	beq.n	8003a94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039c0:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039cc:	4b50      	ldr	r3, [pc, #320]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ad      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e8:	f7fd fee2 	bl	80017b0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fede 	bl	80017b0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e09a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	4b43      	ldr	r3, [pc, #268]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0e:	4b40      	ldr	r3, [pc, #256]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_RCC_OscConfig+0x784>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a28:	0212      	lsls	r2, r2, #8
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a30:	0852      	lsrs	r2, r2, #1
 8003a32:	3a01      	subs	r2, #1
 8003a34:	0552      	lsls	r2, r2, #21
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a3c:	0852      	lsrs	r2, r2, #1
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	0652      	lsls	r2, r2, #25
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a48:	0912      	lsrs	r2, r2, #4
 8003a4a:	0452      	lsls	r2, r2, #17
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4930      	ldr	r1, [pc, #192]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a54:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a2a      	ldr	r2, [pc, #168]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6c:	f7fd fea0 	bl	80017b0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fe9c 	bl	80017b0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	e050      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a98:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d148      	bne.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab0:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003abc:	f7fd fe78 	bl	80017b0 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fe74 	bl	80017b0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e030      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x734>
 8003ae2:	e028      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d023      	beq.n	8003b32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fe5b 	bl	80017b0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afc:	e00c      	b.n	8003b18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd fe57 	bl	80017b0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d905      	bls.n	8003b18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e013      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ec      	bne.n	8003afe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4905      	ldr	r1, [pc, #20]	@ (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_OscConfig+0x7b4>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	feeefffc 	.word	0xfeeefffc

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0e7      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b75      	ldr	r3, [pc, #468]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b72      	ldr	r3, [pc, #456]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4970      	ldr	r1, [pc, #448]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cf      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d908      	bls.n	8003bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b63      	ldr	r3, [pc, #396]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4960      	ldr	r1, [pc, #384]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b5a      	ldr	r3, [pc, #360]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0a6      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	4b54      	ldr	r3, [pc, #336]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e09a      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e086      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b46      	ldr	r3, [pc, #280]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4943      	ldr	r1, [pc, #268]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fdbe 	bl	80017b0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd fdba 	bl	80017b0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e06e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d208      	bcs.n	8003c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	492b      	ldr	r1, [pc, #172]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8e:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d210      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 0207 	bic.w	r2, r3, #7
 8003ca4:	4923      	ldr	r1, [pc, #140]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e036      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4918      	ldr	r1, [pc, #96]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce8:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4910      	ldr	r1, [pc, #64]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cfc:	f000 f824 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	490b      	ldr	r1, [pc, #44]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f4>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
 8003d18:	4a09      	ldr	r2, [pc, #36]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_RCC_ClockConfig+0x1fc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fcf5 	bl	8001710 <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	080081b4 	.word	0x080081b4
 8003d40:	20000048 	.word	0x20000048
 8003d44:	2000004c 	.word	0x2000004c

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	@ 0x24
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d56:	4b3e      	ldr	r3, [pc, #248]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d11e      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d7c:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d134      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0xa6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dec:	e005      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	617b      	str	r3, [r7, #20]
      break;
 8003dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e00:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	fb03 f202 	mul.w	r2, r3, r2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0e5b      	lsrs	r3, r3, #25
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e40:	69bb      	ldr	r3, [r7, #24]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	080081cc 	.word	0x080081cc
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000048 	.word	0x20000048

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4904      	ldr	r1, [pc, #16]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	080081c4 	.word	0x080081c4

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ea8:	f7ff ffda 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	080081c4 	.word	0x080081c4

08003ed0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003edc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ee8:	f7ff f9ee 	bl	80032c8 <HAL_PWREx_GetVoltageRange>
 8003eec:	6178      	str	r0, [r7, #20]
 8003eee:	e014      	b.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efc:	4b22      	ldr	r3, [pc, #136]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f08:	f7ff f9de 	bl	80032c8 <HAL_PWREx_GetVoltageRange>
 8003f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f20:	d10b      	bne.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b80      	cmp	r3, #128	@ 0x80
 8003f26:	d919      	bls.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f2c:	d902      	bls.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f2e:	2302      	movs	r3, #2
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e013      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f34:	2301      	movs	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	e010      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	@ 0x80
 8003f3e:	d902      	bls.n	8003f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f40:	2303      	movs	r3, #3
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e00a      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b80      	cmp	r3, #128	@ 0x80
 8003f4a:	d102      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e004      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b70      	cmp	r3, #112	@ 0x70
 8003f56:	d101      	bne.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f58:	2301      	movs	r3, #1
 8003f5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	4909      	ldr	r1, [pc, #36]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40022000 	.word	0x40022000

08003f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d041      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fb4:	d02a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fba:	d824      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc6:	d81e      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd2:	e018      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd4:	4b86      	ldr	r3, [pc, #536]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a85      	ldr	r2, [pc, #532]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe0:	e015      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fabb 	bl	8004564 <RCCEx_PLLSAI1_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff2:	e00c      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fba6 	bl	800474c <RCCEx_PLLSAI2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004004:	e003      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	74fb      	strb	r3, [r7, #19]
      break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004014:	4b76      	ldr	r3, [pc, #472]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004022:	4973      	ldr	r1, [pc, #460]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800402a:	e001      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d041      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004040:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004044:	d02a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800404a:	d824      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800404c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004056:	d81e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800405c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004060:	d010      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004062:	e018      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004064:	4b62      	ldr	r3, [pc, #392]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a61      	ldr	r2, [pc, #388]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004070:	e015      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fa73 	bl	8004564 <RCCEx_PLLSAI1_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fb5e 	bl	800474c <RCCEx_PLLSAI2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a4:	4b52      	ldr	r3, [pc, #328]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b2:	494f      	ldr	r1, [pc, #316]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a0 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040d2:	4b47      	ldr	r3, [pc, #284]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b41      	ldr	r3, [pc, #260]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	4a40      	ldr	r2, [pc, #256]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f4:	4b3e      	ldr	r3, [pc, #248]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004100:	2301      	movs	r3, #1
 8004102:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a3a      	ldr	r2, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004110:	f7fd fb4e 	bl	80017b0 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fd fb4a 	bl	80017b0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	74fb      	strb	r3, [r7, #19]
        break;
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800412c:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d15c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413e:	4b2c      	ldr	r3, [pc, #176]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004148:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01f      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	429a      	cmp	r2, r3
 800415a:	d019      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800415c:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004166:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416e:	4a20      	ldr	r2, [pc, #128]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fb09 	bl	80017b0 <HAL_GetTick>
 800419e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a0:	e00b      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd fb05 	bl	80017b0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d902      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	74fb      	strb	r3, [r7, #19]
            break;
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ba:	4b0d      	ldr	r3, [pc, #52]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ec      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ce:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041de:	4904      	ldr	r1, [pc, #16]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041e6:	e009      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b9e      	ldr	r3, [pc, #632]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	4a9d      	ldr	r2, [pc, #628]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421a:	4b98      	ldr	r3, [pc, #608]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	4994      	ldr	r1, [pc, #592]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800423c:	4b8f      	ldr	r3, [pc, #572]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 020c 	bic.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	498c      	ldr	r1, [pc, #560]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425e:	4b87      	ldr	r3, [pc, #540]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4983      	ldr	r1, [pc, #524]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004280:	4b7e      	ldr	r3, [pc, #504]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	497b      	ldr	r1, [pc, #492]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042a2:	4b76      	ldr	r3, [pc, #472]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b0:	4972      	ldr	r1, [pc, #456]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c4:	4b6d      	ldr	r3, [pc, #436]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	496a      	ldr	r1, [pc, #424]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e6:	4b65      	ldr	r3, [pc, #404]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	4961      	ldr	r1, [pc, #388]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004308:	4b5c      	ldr	r3, [pc, #368]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	4959      	ldr	r1, [pc, #356]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800432a:	4b54      	ldr	r3, [pc, #336]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004338:	4950      	ldr	r1, [pc, #320]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800434c:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	4948      	ldr	r1, [pc, #288]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436e:	4b43      	ldr	r3, [pc, #268]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	493f      	ldr	r1, [pc, #252]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d028      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004390:	4b3a      	ldr	r3, [pc, #232]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439e:	4937      	ldr	r1, [pc, #220]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ae:	d106      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b0:	4b32      	ldr	r3, [pc, #200]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a31      	ldr	r2, [pc, #196]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ba:	60d3      	str	r3, [r2, #12]
 80043bc:	e011      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f8c8 	bl	8004564 <RCCEx_PLLSAI1_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d028      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ee:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	491f      	ldr	r1, [pc, #124]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800440c:	d106      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440e:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a1a      	ldr	r2, [pc, #104]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004414:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004418:	60d3      	str	r3, [r2, #12]
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f899 	bl	8004564 <RCCEx_PLLSAI1_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	4908      	ldr	r1, [pc, #32]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b03      	ldr	r3, [pc, #12]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a02      	ldr	r2, [pc, #8]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
 8004478:	e014      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f867 	bl	8004564 <RCCEx_PLLSAI1_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044be:	4928      	ldr	r1, [pc, #160]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ce:	d10d      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f844 	bl	8004564 <RCCEx_PLLSAI1_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d014      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	74bb      	strb	r3, [r7, #18]
 80044ea:	e011      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3320      	adds	r3, #32
 80044fa:	2102      	movs	r1, #2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f925 	bl	800474c <RCCEx_PLLSAI2_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800451c:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	490d      	ldr	r1, [pc, #52]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004544:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	4904      	ldr	r1, [pc, #16]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004556:	7cbb      	ldrb	r3, [r7, #18]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000

08004564 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004572:	4b75      	ldr	r3, [pc, #468]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800457e:	4b72      	ldr	r3, [pc, #456]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0203 	and.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d10d      	bne.n	80045aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
       ||
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004596:	4b6c      	ldr	r3, [pc, #432]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
       ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d047      	beq.n	800463a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e044      	b.n	800463a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d018      	beq.n	80045ea <RCCEx_PLLSAI1_Config+0x86>
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d825      	bhi.n	8004608 <RCCEx_PLLSAI1_Config+0xa4>
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d002      	beq.n	80045c6 <RCCEx_PLLSAI1_Config+0x62>
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d009      	beq.n	80045d8 <RCCEx_PLLSAI1_Config+0x74>
 80045c4:	e020      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045c6:	4b60      	ldr	r3, [pc, #384]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11d      	bne.n	800460e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d6:	e01a      	b.n	800460e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d116      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e8:	e013      	b.n	8004612 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045ea:	4b57      	ldr	r3, [pc, #348]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045f6:	4b54      	ldr	r3, [pc, #336]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004606:	e006      	b.n	8004616 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e004      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004616:	bf00      	nop
    }

    if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800461e:	4b4a      	ldr	r3, [pc, #296]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	430b      	orrs	r3, r1
 8004634:	4944      	ldr	r1, [pc, #272]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d17d      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004640:	4b41      	ldr	r3, [pc, #260]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a40      	ldr	r2, [pc, #256]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800464a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fd f8b0 	bl	80017b0 <HAL_GetTick>
 8004650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004652:	e009      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004654:	f7fd f8ac 	bl	80017b0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	73fb      	strb	r3, [r7, #15]
        break;
 8004666:	e005      	b.n	8004674 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004668:	4b37      	ldr	r3, [pc, #220]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ef      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d160      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d111      	bne.n	80046a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004680:	4b31      	ldr	r3, [pc, #196]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	0211      	lsls	r1, r2, #8
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	0912      	lsrs	r2, r2, #4
 8004698:	0452      	lsls	r2, r2, #17
 800469a:	430a      	orrs	r2, r1
 800469c:	492a      	ldr	r1, [pc, #168]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]
 80046a2:	e027      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d112      	bne.n	80046d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046aa:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6892      	ldr	r2, [r2, #8]
 80046ba:	0211      	lsls	r1, r2, #8
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6912      	ldr	r2, [r2, #16]
 80046c0:	0852      	lsrs	r2, r2, #1
 80046c2:	3a01      	subs	r2, #1
 80046c4:	0552      	lsls	r2, r2, #21
 80046c6:	430a      	orrs	r2, r1
 80046c8:	491f      	ldr	r1, [pc, #124]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	610b      	str	r3, [r1, #16]
 80046ce:	e011      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	0211      	lsls	r1, r2, #8
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6952      	ldr	r2, [r2, #20]
 80046e6:	0852      	lsrs	r2, r2, #1
 80046e8:	3a01      	subs	r2, #1
 80046ea:	0652      	lsls	r2, r2, #25
 80046ec:	430a      	orrs	r2, r1
 80046ee:	4916      	ldr	r1, [pc, #88]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046f4:	4b14      	ldr	r3, [pc, #80]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a13      	ldr	r2, [pc, #76]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd f856 	bl	80017b0 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004706:	e009      	b.n	800471c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004708:	f7fd f852 	bl	80017b0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d902      	bls.n	800471c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	73fb      	strb	r3, [r7, #15]
          break;
 800471a:	e005      	b.n	8004728 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ef      	beq.n	8004708 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800472e:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	4904      	ldr	r1, [pc, #16]	@ (8004748 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000

0800474c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475a:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004766:	4b67      	ldr	r3, [pc, #412]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d10d      	bne.n	8004792 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
       ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800477e:	4b61      	ldr	r3, [pc, #388]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
       ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d047      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e044      	b.n	8004822 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d018      	beq.n	80047d2 <RCCEx_PLLSAI2_Config+0x86>
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d825      	bhi.n	80047f0 <RCCEx_PLLSAI2_Config+0xa4>
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d002      	beq.n	80047ae <RCCEx_PLLSAI2_Config+0x62>
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d009      	beq.n	80047c0 <RCCEx_PLLSAI2_Config+0x74>
 80047ac:	e020      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ae:	4b55      	ldr	r3, [pc, #340]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11d      	bne.n	80047f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047be:	e01a      	b.n	80047f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047c0:	4b50      	ldr	r3, [pc, #320]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d116      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d0:	e013      	b.n	80047fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047de:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ee:	e006      	b.n	80047fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
      break;
 80047f4:	e004      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004806:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	430b      	orrs	r3, r1
 800481c:	4939      	ldr	r1, [pc, #228]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d167      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004828:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a35      	ldr	r2, [pc, #212]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004834:	f7fc ffbc 	bl	80017b0 <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800483a:	e009      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483c:	f7fc ffb8 	bl	80017b0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d902      	bls.n	8004850 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	73fb      	strb	r3, [r7, #15]
        break;
 800484e:	e005      	b.n	800485c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004850:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ef      	bne.n	800483c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d14a      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d111      	bne.n	800488c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004868:	4b26      	ldr	r3, [pc, #152]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6892      	ldr	r2, [r2, #8]
 8004878:	0211      	lsls	r1, r2, #8
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	0912      	lsrs	r2, r2, #4
 8004880:	0452      	lsls	r2, r2, #17
 8004882:	430a      	orrs	r2, r1
 8004884:	491f      	ldr	r1, [pc, #124]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	614b      	str	r3, [r1, #20]
 800488a:	e011      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800488c:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004894:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6892      	ldr	r2, [r2, #8]
 800489c:	0211      	lsls	r1, r2, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6912      	ldr	r2, [r2, #16]
 80048a2:	0852      	lsrs	r2, r2, #1
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0652      	lsls	r2, r2, #25
 80048a8:	430a      	orrs	r2, r1
 80048aa:	4916      	ldr	r1, [pc, #88]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a13      	ldr	r2, [pc, #76]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fc ff78 	bl	80017b0 <HAL_GetTick>
 80048c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048c2:	e009      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048c4:	f7fc ff74 	bl	80017b0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d902      	bls.n	80048d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	73fb      	strb	r3, [r7, #15]
          break;
 80048d6:	e005      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ef      	beq.n	80048c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4904      	ldr	r1, [pc, #16]	@ (8004904 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e049      	b.n	80049ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fc4e 	bl	80011d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fdac 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x24>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e03c      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d109      	bne.n	80049f6 <HAL_TIM_PWM_Start+0x3e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e02f      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d109      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x58>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e022      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d109      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x72>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e015      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x8c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e09c      	b.n	8004b98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xb6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a6c:	e023      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xc6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a7c:	e01b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xd6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8c:	e013      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xe6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xf6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	e003      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2201      	movs	r2, #1
 8004abc:	6839      	ldr	r1, [r7, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 f984 	bl	8005dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a35      	ldr	r2, [pc, #212]	@ (8004ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x13e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a34      	ldr	r2, [pc, #208]	@ (8004ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x13e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a32      	ldr	r2, [pc, #200]	@ (8004ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x13e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a31      	ldr	r2, [pc, #196]	@ (8004bac <HAL_TIM_PWM_Start+0x1f4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start+0x13e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_Start+0x142>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_TIM_PWM_Start+0x144>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a22      	ldr	r2, [pc, #136]	@ (8004ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b22:	d018      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	@ (8004bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a21      	ldr	r2, [pc, #132]	@ (8004bb8 <HAL_TIM_PWM_Start+0x200>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <HAL_TIM_PWM_Start+0x204>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x19e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a15      	ldr	r2, [pc, #84]	@ (8004ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d115      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <HAL_TIM_PWM_Start+0x208>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b06      	cmp	r3, #6
 8004b66:	d015      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x1dc>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6e:	d011      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	e008      	b.n	8004b94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e000      	b.n	8004b96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40013400 	.word	0x40013400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	00010007 	.word	0x00010007

08004bc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e049      	b.n	8004c6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fb10 	bl	8001210 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fc4e 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e097      	b.n	8004db6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fb4a 	bl	8001334 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fbec 	bl	80054a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf4:	f023 0303 	bic.w	r3, r3, #3
 8004cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	4313      	orrs	r3, r2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d12:	f023 030c 	bic.w	r3, r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	011a      	lsls	r2, r3, #4
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	4313      	orrs	r3, r2
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d50:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d58:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4313      	orrs	r3, r2
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dde:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d110      	bne.n	8004e10 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004df4:	7b7b      	ldrb	r3, [r7, #13]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d001      	beq.n	8004dfe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e069      	b.n	8004ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0e:	e031      	b.n	8004e74 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d110      	bne.n	8004e38 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e16:	7bbb      	ldrb	r3, [r7, #14]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d102      	bne.n	8004e22 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e1c:	7b3b      	ldrb	r3, [r7, #12]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e055      	b.n	8004ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e36:	e01d      	b.n	8004e74 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e3e:	7bbb      	ldrb	r3, [r7, #14]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e44:	7b7b      	ldrb	r3, [r7, #13]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4a:	7b3b      	ldrb	r3, [r7, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e03e      	b.n	8004ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_Encoder_Start+0xc4>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d008      	beq.n	8004e92 <HAL_TIM_Encoder_Start+0xd4>
 8004e80:	e00f      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 ff9e 	bl	8005dcc <TIM_CCxChannelCmd>
      break;
 8004e90:	e016      	b.n	8004ec0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	2104      	movs	r1, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 ff96 	bl	8005dcc <TIM_CCxChannelCmd>
      break;
 8004ea0:	e00e      	b.n	8004ec0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 ff8e 	bl	8005dcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 ff87 	bl	8005dcc <TIM_CCxChannelCmd>
      break;
 8004ebe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01b      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0202 	mvn.w	r2, #2
 8004f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa9f 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8004f2a:	e005      	b.n	8004f38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa91 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 faa2 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01b      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0204 	mvn.w	r2, #4
 8004f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fa79 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8004f76:	e005      	b.n	8004f84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa6b 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa7c 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f06f 0208 	mvn.w	r2, #8
 8004fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2204      	movs	r2, #4
 8004fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fa53 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8004fc2:	e005      	b.n	8004fd0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa45 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa56 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d020      	beq.n	8005022 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01b      	beq.n	8005022 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0210 	mvn.w	r2, #16
 8004ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa2d 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 800500e:	e005      	b.n	800501c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fa1f 	bl	8005454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fa30 	bl	800547c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f06f 0201 	mvn.w	r2, #1
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f9fd 	bl	8005440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 ffe7 	bl	8006038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 ffdf 	bl	800604c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9ef 	bl	8005490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0220 	mvn.w	r2, #32
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 ffa7 	bl	8006024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e088      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x130>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11b      	bne.n	8005142 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800511a:	f000 fd33 	bl	8005b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 020c 	bic.w	r2, r2, #12
 800512c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6999      	ldr	r1, [r3, #24]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	619a      	str	r2, [r3, #24]
 8005140:	e060      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d11c      	bne.n	8005182 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005158:	f000 fd82 	bl	8005c60 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800516a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
 8005180:	e040      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005198:	f000 fd9f 	bl	8005cda <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 020c 	bic.w	r2, r2, #12
 80051aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69d9      	ldr	r1, [r3, #28]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	61da      	str	r2, [r3, #28]
 80051be:	e021      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	d11c      	bne.n	8005200 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051d6:	f000 fdbc 	bl	8005d52 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	021a      	lsls	r2, r3, #8
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	61da      	str	r2, [r3, #28]
 80051fe:	e001      	b.n	8005204 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005232:	2302      	movs	r3, #2
 8005234:	e0ff      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f996 	bl	80055d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a5      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa06 	bl	80056f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e084      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa6f 	bl	800580c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e064      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fad7 	bl	800591c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e043      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fb20 	bl	80059f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053e2:	e023      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fb64 	bl	8005ab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005424:	e002      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a40      	ldr	r2, [pc, #256]	@ (80055b8 <TIM_Base_SetConfig+0x114>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d00f      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3d      	ldr	r2, [pc, #244]	@ (80055bc <TIM_Base_SetConfig+0x118>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3c      	ldr	r2, [pc, #240]	@ (80055c0 <TIM_Base_SetConfig+0x11c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3b      	ldr	r2, [pc, #236]	@ (80055c4 <TIM_Base_SetConfig+0x120>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a3a      	ldr	r2, [pc, #232]	@ (80055c8 <TIM_Base_SetConfig+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2f      	ldr	r2, [pc, #188]	@ (80055b8 <TIM_Base_SetConfig+0x114>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d01b      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2c      	ldr	r2, [pc, #176]	@ (80055bc <TIM_Base_SetConfig+0x118>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d017      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2b      	ldr	r2, [pc, #172]	@ (80055c0 <TIM_Base_SetConfig+0x11c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2a      	ldr	r2, [pc, #168]	@ (80055c4 <TIM_Base_SetConfig+0x120>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a29      	ldr	r2, [pc, #164]	@ (80055c8 <TIM_Base_SetConfig+0x124>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a28      	ldr	r2, [pc, #160]	@ (80055cc <TIM_Base_SetConfig+0x128>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a27      	ldr	r2, [pc, #156]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x9a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a10      	ldr	r2, [pc, #64]	@ (80055b8 <TIM_Base_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a12      	ldr	r2, [pc, #72]	@ (80055c8 <TIM_Base_SetConfig+0x124>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a11      	ldr	r2, [pc, #68]	@ (80055cc <TIM_Base_SetConfig+0x128>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <TIM_Base_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a0f      	ldr	r2, [pc, #60]	@ (80055d4 <TIM_Base_SetConfig+0x130>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800

080055d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 0302 	bic.w	r3, r3, #2
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <TIM_OC1_SetConfig+0x10c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_OC1_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a2b      	ldr	r2, [pc, #172]	@ (80056e8 <TIM_OC1_SetConfig+0x110>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC1_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a2a      	ldr	r2, [pc, #168]	@ (80056ec <TIM_OC1_SetConfig+0x114>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC1_SetConfig+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a29      	ldr	r2, [pc, #164]	@ (80056f0 <TIM_OC1_SetConfig+0x118>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC1_SetConfig+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a28      	ldr	r2, [pc, #160]	@ (80056f4 <TIM_OC1_SetConfig+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10c      	bne.n	8005672 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0308 	bic.w	r3, r3, #8
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1b      	ldr	r2, [pc, #108]	@ (80056e4 <TIM_OC1_SetConfig+0x10c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_OC1_SetConfig+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a1a      	ldr	r2, [pc, #104]	@ (80056e8 <TIM_OC1_SetConfig+0x110>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_OC1_SetConfig+0xc2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <TIM_OC1_SetConfig+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_OC1_SetConfig+0xc2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <TIM_OC1_SetConfig+0x118>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC1_SetConfig+0xc2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <TIM_OC1_SetConfig+0x11c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d111      	bne.n	80056be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40013400 	.word	0x40013400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800

080056f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f023 0210 	bic.w	r2, r3, #16
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a28      	ldr	r2, [pc, #160]	@ (80057f8 <TIM_OC2_SetConfig+0x100>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC2_SetConfig+0x6c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a27      	ldr	r2, [pc, #156]	@ (80057fc <TIM_OC2_SetConfig+0x104>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10d      	bne.n	8005780 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800577e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1d      	ldr	r2, [pc, #116]	@ (80057f8 <TIM_OC2_SetConfig+0x100>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00f      	beq.n	80057a8 <TIM_OC2_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1c      	ldr	r2, [pc, #112]	@ (80057fc <TIM_OC2_SetConfig+0x104>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_OC2_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1b      	ldr	r2, [pc, #108]	@ (8005800 <TIM_OC2_SetConfig+0x108>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_OC2_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1a      	ldr	r2, [pc, #104]	@ (8005804 <TIM_OC2_SetConfig+0x10c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC2_SetConfig+0xb0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a19      	ldr	r2, [pc, #100]	@ (8005808 <TIM_OC2_SetConfig+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d113      	bne.n	80057d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a27      	ldr	r2, [pc, #156]	@ (8005908 <TIM_OC3_SetConfig+0xfc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC3_SetConfig+0x6a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a26      	ldr	r2, [pc, #152]	@ (800590c <TIM_OC3_SetConfig+0x100>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10d      	bne.n	8005892 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800587c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <TIM_OC3_SetConfig+0xfc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_OC3_SetConfig+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <TIM_OC3_SetConfig+0x100>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_OC3_SetConfig+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005910 <TIM_OC3_SetConfig+0x104>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_OC3_SetConfig+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a19      	ldr	r2, [pc, #100]	@ (8005914 <TIM_OC3_SetConfig+0x108>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC3_SetConfig+0xae>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <TIM_OC3_SetConfig+0x10c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d113      	bne.n	80058e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800596a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_OC4_SetConfig+0xc0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00f      	beq.n	80059a0 <TIM_OC4_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <TIM_OC4_SetConfig+0xc4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC4_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <TIM_OC4_SetConfig+0xc8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC4_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a15      	ldr	r2, [pc, #84]	@ (80059e8 <TIM_OC4_SetConfig+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC4_SetConfig+0x84>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a14      	ldr	r2, [pc, #80]	@ (80059ec <TIM_OC4_SetConfig+0xd0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d109      	bne.n	80059b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	019b      	lsls	r3, r3, #6
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <TIM_OC5_SetConfig+0xb4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <TIM_OC5_SetConfig+0x7a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_OC5_SetConfig+0xb8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <TIM_OC5_SetConfig+0x7a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <TIM_OC5_SetConfig+0xbc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <TIM_OC5_SetConfig+0x7a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <TIM_OC5_SetConfig+0xc0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_OC5_SetConfig+0x7a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <TIM_OC5_SetConfig+0xc4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d109      	bne.n	8005a7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800

08005ab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	051b      	lsls	r3, r3, #20
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <TIM_OC6_SetConfig+0xb8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_OC6_SetConfig+0x7c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <TIM_OC6_SetConfig+0xbc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_OC6_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <TIM_OC6_SetConfig+0xc0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC6_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <TIM_OC6_SetConfig+0xc4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC6_SetConfig+0x7c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a14      	ldr	r2, [pc, #80]	@ (8005b80 <TIM_OC6_SetConfig+0xc8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d109      	bne.n	8005b48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 0201 	bic.w	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a26      	ldr	r2, [pc, #152]	@ (8005c48 <TIM_TI1_SetConfig+0xc4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d017      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb8:	d013      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	@ (8005c4c <TIM_TI1_SetConfig+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <TIM_TI1_SetConfig+0xcc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a21      	ldr	r2, [pc, #132]	@ (8005c54 <TIM_TI1_SetConfig+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	@ (8005c58 <TIM_TI1_SetConfig+0xd4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <TIM_TI1_SetConfig+0xd8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <TIM_TI1_SetConfig+0x62>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <TIM_TI1_SetConfig+0x64>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e003      	b.n	8005c06 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f023 030a 	bic.w	r3, r3, #10
 8005c20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 030a 	and.w	r3, r3, #10
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40014000 	.word	0x40014000

08005c60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	031b      	lsls	r3, r3, #12
 8005daa:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2201      	movs	r2, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e068      	b.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2e      	ldr	r2, [pc, #184]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d018      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a13      	ldr	r2, [pc, #76]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40014000 	.word	0x40014000

08005f28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e065      	b.n	8006010 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a16      	ldr	r2, [pc, #88]	@ (800601c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	@ (8006020 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d115      	bne.n	8005ffe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400

08006024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e040      	b.n	80060f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fa0a 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 feca 	bl	8006e40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fc0f 	bl	80068d0 <UART_SetConfig>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e01b      	b.n	80060f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 ff49 	bl	8006f84 <UART_CheckIdleState>
 80060f2:	4603      	mov	r3, r0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	@ 0x28
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006110:	2b20      	cmp	r3, #32
 8006112:	d177      	bne.n	8006204 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Transmit+0x24>
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e070      	b.n	8006206 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2221      	movs	r2, #33	@ 0x21
 8006130:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006132:	f7fb fb3d 	bl	80017b0 <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006150:	d108      	bne.n	8006164 <HAL_UART_Transmit+0x68>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	e003      	b.n	800616c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800616c:	e02f      	b.n	80061ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	2180      	movs	r1, #128	@ 0x80
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 ffab 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e03b      	b.n	8006206 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a0:	b292      	uxth	r2, r2
 80061a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3302      	adds	r3, #2
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	e007      	b.n	80061bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1c9      	bne.n	800616e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2140      	movs	r1, #64	@ 0x40
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 ff75 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e005      	b.n	8006206 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006224:	2b20      	cmp	r3, #32
 8006226:	d137      	bne.n	8006298 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_UART_Receive_IT+0x24>
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e030      	b.n	800629a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a18      	ldr	r2, [pc, #96]	@ (80062a4 <HAL_UART_Receive_IT+0x94>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01f      	beq.n	8006288 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	613b      	str	r3, [r7, #16]
   return(result);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	61bb      	str	r3, [r7, #24]
   return(result);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	461a      	mov	r2, r3
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 ff88 	bl	80071a4 <UART_Start_Receive_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	e000      	b.n	800629a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	@ 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40008000 	.word	0x40008000

080062a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0ba      	sub	sp, #232	@ 0xe8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062d6:	4013      	ands	r3, r2
 80062d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 82ae 	beq.w	8006862 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
      }
      return;
 800630e:	e2a8      	b.n	8006862 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8117 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800631a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800632a:	4b85      	ldr	r3, [pc, #532]	@ (8006540 <HAL_UART_IRQHandler+0x298>)
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 810a 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d011      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800635a:	f043 0201 	orr.w	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d011      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
 8006370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2202      	movs	r2, #2
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800638a:	f043 0204 	orr.w	r2, r3, #4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d011      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2204      	movs	r2, #4
 80063b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2208      	movs	r2, #8
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006408:	2b00      	cmp	r3, #0
 800640a:	d012      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8214 	beq.w	8006866 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800644a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800646c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800647e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006482:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04f      	beq.n	800652a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff50 	bl	8007330 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d141      	bne.n	8006522 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f6:	4a13      	ldr	r2, [pc, #76]	@ (8006544 <HAL_UART_IRQHandler+0x29c>)
 80064f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fc fa55 	bl	80029ae <HAL_DMA_Abort_IT>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00f      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9c2 	bl	80068a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e00b      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9be 	bl	80068a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e007      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9ba 	bl	80068a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006538:	e195      	b.n	8006866 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653a:	bf00      	nop
    return;
 800653c:	e193      	b.n	8006866 <HAL_UART_IRQHandler+0x5be>
 800653e:	bf00      	nop
 8006540:	04000120 	.word	0x04000120
 8006544:	080073f9 	.word	0x080073f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 814e 	bne.w	80067ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8147 	beq.w	80067ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8140 	beq.w	80067ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2210      	movs	r2, #16
 8006574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006580:	2b40      	cmp	r3, #64	@ 0x40
 8006582:	f040 80b8 	bne.w	80066f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8167 	beq.w	800686a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 815f 	bcs.w	800686a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8086 	bne.w	80066d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1da      	bne.n	80065c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800663a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a4:	f023 0310 	bic.w	r3, r3, #16
 80066a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e4      	bne.n	8006694 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fc f92f 	bl	8002932 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8e2 	bl	80068b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066f4:	e0b9      	b.n	800686a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006702:	b29b      	uxth	r3, r3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80ab 	beq.w	800686e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a6 	beq.w	800686e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
 8006746:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800674a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e4      	bne.n	8006722 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	623b      	str	r3, [r7, #32]
   return(result);
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800677c:	633a      	str	r2, [r7, #48]	@ 0x30
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e3      	bne.n	8006758 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0310 	bic.w	r3, r3, #16
 80067b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f866 	bl	80068b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ec:	e03f      	b.n	800686e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <HAL_UART_IRQHandler+0x570>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800680e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ffed 	bl	80077f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006816:	e02d      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01c      	beq.n	8006872 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    }
    return;
 8006840:	e017      	b.n	8006872 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d012      	beq.n	8006874 <HAL_UART_IRQHandler+0x5cc>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fde2 	bl	8007424 <UART_EndTransmit_IT>
    return;
 8006860:	e008      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006862:	bf00      	nop
 8006864:	e006      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006866:	bf00      	nop
 8006868:	e004      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
      return;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
      return;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006872:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006874:	37e8      	adds	r7, #232	@ 0xe8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop

0800687c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d4:	b08a      	sub	sp, #40	@ 0x28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4ba4      	ldr	r3, [pc, #656]	@ (8006b90 <UART_SetConfig+0x2c0>)
 8006900:	4013      	ands	r3, r2
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006908:	430b      	orrs	r3, r1
 800690a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a99      	ldr	r2, [pc, #612]	@ (8006b94 <UART_SetConfig+0x2c4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006938:	4313      	orrs	r3, r2
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a90      	ldr	r2, [pc, #576]	@ (8006b98 <UART_SetConfig+0x2c8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d126      	bne.n	80069a8 <UART_SetConfig+0xd8>
 800695a:	4b90      	ldr	r3, [pc, #576]	@ (8006b9c <UART_SetConfig+0x2cc>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d81b      	bhi.n	80069a0 <UART_SetConfig+0xd0>
 8006968:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <UART_SetConfig+0xa0>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006981 	.word	0x08006981
 8006974:	08006991 	.word	0x08006991
 8006978:	08006989 	.word	0x08006989
 800697c:	08006999 	.word	0x08006999
 8006980:	2301      	movs	r3, #1
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006986:	e116      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800698e:	e112      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006996:	e10e      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699e:	e10a      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a6:	e106      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7c      	ldr	r2, [pc, #496]	@ (8006ba0 <UART_SetConfig+0x2d0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d138      	bne.n	8006a24 <UART_SetConfig+0x154>
 80069b2:	4b7a      	ldr	r3, [pc, #488]	@ (8006b9c <UART_SetConfig+0x2cc>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b8:	f003 030c 	and.w	r3, r3, #12
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	d82d      	bhi.n	8006a1c <UART_SetConfig+0x14c>
 80069c0:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <UART_SetConfig+0xf8>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	08006a1d 	.word	0x08006a1d
 80069d4:	08006a1d 	.word	0x08006a1d
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a1d 	.word	0x08006a1d
 80069e4:	08006a1d 	.word	0x08006a1d
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a02:	e0d8      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a04:	2302      	movs	r3, #2
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0a:	e0d4      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a12:	e0d0      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a14:	2308      	movs	r3, #8
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1a:	e0cc      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e0c8      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5e      	ldr	r2, [pc, #376]	@ (8006ba4 <UART_SetConfig+0x2d4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d125      	bne.n	8006a7a <UART_SetConfig+0x1aa>
 8006a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8006b9c <UART_SetConfig+0x2cc>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a38:	2b30      	cmp	r3, #48	@ 0x30
 8006a3a:	d016      	beq.n	8006a6a <UART_SetConfig+0x19a>
 8006a3c:	2b30      	cmp	r3, #48	@ 0x30
 8006a3e:	d818      	bhi.n	8006a72 <UART_SetConfig+0x1a2>
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d00a      	beq.n	8006a5a <UART_SetConfig+0x18a>
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d814      	bhi.n	8006a72 <UART_SetConfig+0x1a2>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <UART_SetConfig+0x182>
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d008      	beq.n	8006a62 <UART_SetConfig+0x192>
 8006a50:	e00f      	b.n	8006a72 <UART_SetConfig+0x1a2>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a58:	e0ad      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a60:	e0a9      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a62:	2304      	movs	r3, #4
 8006a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a68:	e0a5      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a70:	e0a1      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a72:	2310      	movs	r3, #16
 8006a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a78:	e09d      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006ba8 <UART_SetConfig+0x2d8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d125      	bne.n	8006ad0 <UART_SetConfig+0x200>
 8006a84:	4b45      	ldr	r3, [pc, #276]	@ (8006b9c <UART_SetConfig+0x2cc>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a90:	d016      	beq.n	8006ac0 <UART_SetConfig+0x1f0>
 8006a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a94:	d818      	bhi.n	8006ac8 <UART_SetConfig+0x1f8>
 8006a96:	2b80      	cmp	r3, #128	@ 0x80
 8006a98:	d00a      	beq.n	8006ab0 <UART_SetConfig+0x1e0>
 8006a9a:	2b80      	cmp	r3, #128	@ 0x80
 8006a9c:	d814      	bhi.n	8006ac8 <UART_SetConfig+0x1f8>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <UART_SetConfig+0x1d8>
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d008      	beq.n	8006ab8 <UART_SetConfig+0x1e8>
 8006aa6:	e00f      	b.n	8006ac8 <UART_SetConfig+0x1f8>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aae:	e082      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab6:	e07e      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006abe:	e07a      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac6:	e076      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ace:	e072      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a35      	ldr	r2, [pc, #212]	@ (8006bac <UART_SetConfig+0x2dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d12a      	bne.n	8006b30 <UART_SetConfig+0x260>
 8006ada:	4b30      	ldr	r3, [pc, #192]	@ (8006b9c <UART_SetConfig+0x2cc>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae8:	d01a      	beq.n	8006b20 <UART_SetConfig+0x250>
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d81b      	bhi.n	8006b28 <UART_SetConfig+0x258>
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af4:	d00c      	beq.n	8006b10 <UART_SetConfig+0x240>
 8006af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006afa:	d815      	bhi.n	8006b28 <UART_SetConfig+0x258>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <UART_SetConfig+0x238>
 8006b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x248>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x258>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0e:	e052      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b16:	e04e      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b1e:	e04a      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b26:	e046      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b2e:	e042      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a17      	ldr	r2, [pc, #92]	@ (8006b94 <UART_SetConfig+0x2c4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d13a      	bne.n	8006bb0 <UART_SetConfig+0x2e0>
 8006b3a:	4b18      	ldr	r3, [pc, #96]	@ (8006b9c <UART_SetConfig+0x2cc>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x2b0>
 8006b4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b4e:	d81b      	bhi.n	8006b88 <UART_SetConfig+0x2b8>
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x2a0>
 8006b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b5a:	d815      	bhi.n	8006b88 <UART_SetConfig+0x2b8>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x298>
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x2a8>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x2b8>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6e:	e022      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b76:	e01e      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b7e:	e01a      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b86:	e016      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b8e:	e012      	b.n	8006bb6 <UART_SetConfig+0x2e6>
 8006b90:	efff69f3 	.word	0xefff69f3
 8006b94:	40008000 	.word	0x40008000
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	40005000 	.word	0x40005000
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a9f      	ldr	r2, [pc, #636]	@ (8006e38 <UART_SetConfig+0x568>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d17a      	bne.n	8006cb6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d824      	bhi.n	8006c12 <UART_SetConfig+0x342>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <UART_SetConfig+0x300>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006c13 	.word	0x08006c13
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c13 	.word	0x08006c13
 8006be0:	08006c03 	.word	0x08006c03
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c0b 	.word	0x08006c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fd f940 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006bf8:	61f8      	str	r0, [r7, #28]
        break;
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8006e3c <UART_SetConfig+0x56c>)
 8006bfe:	61fb      	str	r3, [r7, #28]
        break;
 8006c00:	e00d      	b.n	8006c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fd f8a1 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8006c06:	61f8      	str	r0, [r7, #28]
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0e:	61fb      	str	r3, [r7, #28]
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80fb 	beq.w	8006e1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d305      	bcc.n	8006c42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d903      	bls.n	8006c4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c48:	e0e8      	b.n	8006e1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	461c      	mov	r4, r3
 8006c50:	4615      	mov	r5, r2
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	022b      	lsls	r3, r5, #8
 8006c5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c60:	0222      	lsls	r2, r4, #8
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	6849      	ldr	r1, [r1, #4]
 8006c66:	0849      	lsrs	r1, r1, #1
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	4681      	mov	r9, r0
 8006c6e:	eb12 0a08 	adds.w	sl, r2, r8
 8006c72:	eb43 0b09 	adc.w	fp, r3, r9
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c84:	4650      	mov	r0, sl
 8006c86:	4659      	mov	r1, fp
 8006c88:	f7f9 faf2 	bl	8000270 <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4613      	mov	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9a:	d308      	bcc.n	8006cae <UART_SetConfig+0x3de>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca2:	d204      	bcs.n	8006cae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	e0b6      	b.n	8006e1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cb4:	e0b2      	b.n	8006e1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbe:	d15e      	bne.n	8006d7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d828      	bhi.n	8006d1a <UART_SetConfig+0x44a>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x400>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	08006d1b 	.word	0x08006d1b
 8006ce0:	08006d0b 	.word	0x08006d0b
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006d1b 	.word	0x08006d1b
 8006cec:	08006d1b 	.word	0x08006d1b
 8006cf0:	08006d13 	.word	0x08006d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fd f8c0 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	61f8      	str	r0, [r7, #28]
        break;
 8006cfa:	e014      	b.n	8006d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7fd f8d2 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8006d00:	61f8      	str	r0, [r7, #28]
        break;
 8006d02:	e010      	b.n	8006d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d04:	4b4d      	ldr	r3, [pc, #308]	@ (8006e3c <UART_SetConfig+0x56c>)
 8006d06:	61fb      	str	r3, [r7, #28]
        break;
 8006d08:	e00d      	b.n	8006d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0a:	f7fd f81d 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8006d0e:	61f8      	str	r0, [r7, #28]
        break;
 8006d10:	e009      	b.n	8006d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	61fb      	str	r3, [r7, #28]
        break;
 8006d18:	e005      	b.n	8006d26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d077      	beq.n	8006e1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	005a      	lsls	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b0f      	cmp	r3, #15
 8006d46:	d916      	bls.n	8006d76 <UART_SetConfig+0x4a6>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4e:	d212      	bcs.n	8006d76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f023 030f 	bic.w	r3, r3, #15
 8006d58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	8afb      	ldrh	r3, [r7, #22]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	8afa      	ldrh	r2, [r7, #22]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	e052      	b.n	8006e1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d7c:	e04e      	b.n	8006e1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d827      	bhi.n	8006dd6 <UART_SetConfig+0x506>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <UART_SetConfig+0x4bc>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006dd7 	.word	0x08006dd7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006dd7 	.word	0x08006dd7
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006dcf 	.word	0x08006dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fd f862 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006db4:	61f8      	str	r0, [r7, #28]
        break;
 8006db6:	e014      	b.n	8006de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db8:	f7fd f874 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8006dbc:	61f8      	str	r0, [r7, #28]
        break;
 8006dbe:	e010      	b.n	8006de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e3c <UART_SetConfig+0x56c>)
 8006dc2:	61fb      	str	r3, [r7, #28]
        break;
 8006dc4:	e00d      	b.n	8006de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc6:	f7fc ffbf 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8006dca:	61f8      	str	r0, [r7, #28]
        break;
 8006dcc:	e009      	b.n	8006de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dd2:	61fb      	str	r3, [r7, #28]
        break;
 8006dd4:	e005      	b.n	8006de2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006de0:	bf00      	nop
    }

    if (pclk != 0U)
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d019      	beq.n	8006e1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	085a      	lsrs	r2, r3, #1
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b0f      	cmp	r3, #15
 8006e00:	d909      	bls.n	8006e16 <UART_SetConfig+0x546>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e08:	d205      	bcs.n	8006e16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60da      	str	r2, [r3, #12]
 8006e14:	e002      	b.n	8006e1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3728      	adds	r7, #40	@ 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e36:	bf00      	nop
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	00f42400 	.word	0x00f42400

08006e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01a      	beq.n	8006f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3e:	d10a      	bne.n	8006f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  }
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b098      	sub	sp, #96	@ 0x60
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f94:	f7fa fc0c 	bl	80017b0 <HAL_GetTick>
 8006f98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d12e      	bne.n	8007006 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f88c 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d021      	beq.n	8007006 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e062      	b.n	80070cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d149      	bne.n	80070a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007014:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f856 	bl	80070d4 <UART_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d03c      	beq.n	80070a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	623b      	str	r3, [r7, #32]
   return(result);
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800704c:	633b      	str	r3, [r7, #48]	@ 0x30
 800704e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007080:	61fa      	str	r2, [r7, #28]
 8007082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	69b9      	ldr	r1, [r7, #24]
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	617b      	str	r3, [r7, #20]
   return(result);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e011      	b.n	80070cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3758      	adds	r7, #88	@ 0x58
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	e049      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d045      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fa fb5f 	bl	80017b0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <UART_WaitOnFlagUntilTimeout+0x30>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e048      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d031      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b08      	cmp	r3, #8
 8007122:	d110      	bne.n	8007146 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2208      	movs	r2, #8
 800712a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f8ff 	bl	8007330 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2208      	movs	r2, #8
 8007136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e029      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007154:	d111      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800715e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f8e5 	bl	8007330 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e00f      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d0a6      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b097      	sub	sp, #92	@ 0x5c
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d6:	d10e      	bne.n	80071f6 <UART_Start_Receive_IT+0x52>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <UART_Start_Receive_IT+0x48>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071ea:	e02d      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	22ff      	movs	r2, #255	@ 0xff
 80071f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071f4:	e028      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10d      	bne.n	800721a <UART_Start_Receive_IT+0x76>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <UART_Start_Receive_IT+0x6c>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	22ff      	movs	r2, #255	@ 0xff
 800720a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800720e:	e01b      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	227f      	movs	r2, #127	@ 0x7f
 8007214:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007218:	e016      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007222:	d10d      	bne.n	8007240 <UART_Start_Receive_IT+0x9c>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <UART_Start_Receive_IT+0x92>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	227f      	movs	r2, #127	@ 0x7f
 8007230:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007234:	e008      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	223f      	movs	r2, #63	@ 0x3f
 800723a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800723e:	e003      	b.n	8007248 <UART_Start_Receive_IT+0xa4>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2222      	movs	r2, #34	@ 0x22
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3308      	adds	r3, #8
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	f043 0301 	orr.w	r3, r3, #1
 800726e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007278:	64ba      	str	r2, [r7, #72]	@ 0x48
 800727a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800727e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e5      	bne.n	8007258 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007294:	d107      	bne.n	80072a6 <UART_Start_Receive_IT+0x102>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a21      	ldr	r2, [pc, #132]	@ (8007328 <UART_Start_Receive_IT+0x184>)
 80072a2:	669a      	str	r2, [r3, #104]	@ 0x68
 80072a4:	e002      	b.n	80072ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a20      	ldr	r2, [pc, #128]	@ (800732c <UART_Start_Receive_IT+0x188>)
 80072aa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d019      	beq.n	80072e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80072c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e6      	bne.n	80072b4 <UART_Start_Receive_IT+0x110>
 80072e6:	e018      	b.n	800731a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	613b      	str	r3, [r7, #16]
   return(result);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f043 0320 	orr.w	r3, r3, #32
 80072fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	69f9      	ldr	r1, [r7, #28]
 800730c:	6a3a      	ldr	r2, [r7, #32]
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	61bb      	str	r3, [r7, #24]
   return(result);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	375c      	adds	r7, #92	@ 0x5c
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	08007635 	.word	0x08007635
 800732c:	08007479 	.word	0x08007479

08007330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b095      	sub	sp, #84	@ 0x54
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007356:	643b      	str	r3, [r7, #64]	@ 0x40
 8007358:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800735c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	61fb      	str	r3, [r7, #28]
   return(result);
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800738a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800738c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d118      	bne.n	80073d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f023 0310 	bic.w	r3, r3, #16
 80073ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6979      	ldr	r1, [r7, #20]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	613b      	str	r3, [r7, #16]
   return(result);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e6      	bne.n	80073a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80073ec:	bf00      	nop
 80073ee:	3754      	adds	r7, #84	@ 0x54
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fa44 	bl	80068a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	60bb      	str	r3, [r7, #8]
   return(result);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e6      	bne.n	800742c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fa06 	bl	800687c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007470:	bf00      	nop
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b09c      	sub	sp, #112	@ 0x70
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007486:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007490:	2b22      	cmp	r3, #34	@ 0x22
 8007492:	f040 80be 	bne.w	8007612 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800749c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074a4:	b2d9      	uxtb	r1, r3
 80074a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	400a      	ands	r2, r1
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 80a3 	bne.w	8007626 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007500:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007504:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800750c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	667b      	str	r3, [r7, #100]	@ 0x64
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007532:	647a      	str	r2, [r7, #68]	@ 0x44
 8007534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a34      	ldr	r2, [pc, #208]	@ (8007630 <UART_RxISR_8BIT+0x1b8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d01f      	beq.n	80075a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d018      	beq.n	80075a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	623b      	str	r3, [r7, #32]
   return(result);
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007586:	663b      	str	r3, [r7, #96]	@ 0x60
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007590:	633b      	str	r3, [r7, #48]	@ 0x30
 8007592:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d12e      	bne.n	800760a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0310 	bic.w	r3, r3, #16
 80075c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	617b      	str	r3, [r7, #20]
   return(result);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d103      	bne.n	80075fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2210      	movs	r2, #16
 80075f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f958 	bl	80068b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007608:	e00d      	b.n	8007626 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f940 	bl	8006890 <HAL_UART_RxCpltCallback>
}
 8007610:	e009      	b.n	8007626 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	8b1b      	ldrh	r3, [r3, #24]
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0208 	orr.w	r2, r2, #8
 8007622:	b292      	uxth	r2, r2
 8007624:	831a      	strh	r2, [r3, #24]
}
 8007626:	bf00      	nop
 8007628:	3770      	adds	r7, #112	@ 0x70
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40008000 	.word	0x40008000

08007634 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b09c      	sub	sp, #112	@ 0x70
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007642:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764c:	2b22      	cmp	r3, #34	@ 0x22
 800764e:	f040 80be 	bne.w	80077ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007658:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007660:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007662:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007666:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800766a:	4013      	ands	r3, r2
 800766c:	b29a      	uxth	r2, r3
 800766e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007670:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	1c9a      	adds	r2, r3, #2
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	f040 80a3 	bne.w	80077e2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80076bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e6      	bne.n	800769c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	f023 0301 	bic.w	r3, r3, #1
 80076e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80076f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e5      	bne.n	80076ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a34      	ldr	r2, [pc, #208]	@ (80077ec <UART_RxISR_16BIT+0x1b8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d01f      	beq.n	8007760 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d018      	beq.n	8007760 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	61fb      	str	r3, [r7, #28]
   return(result);
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800774c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800774e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007764:	2b01      	cmp	r3, #1
 8007766:	d12e      	bne.n	80077c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800778c:	61bb      	str	r3, [r7, #24]
 800778e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e6      	bne.n	800776e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d103      	bne.n	80077b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2210      	movs	r2, #16
 80077b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff f87a 	bl	80068b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c4:	e00d      	b.n	80077e2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff f862 	bl	8006890 <HAL_UART_RxCpltCallback>
}
 80077cc:	e009      	b.n	80077e2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	8b1b      	ldrh	r3, [r3, #24]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0208 	orr.w	r2, r2, #8
 80077de:	b292      	uxth	r2, r2
 80077e0:	831a      	strh	r2, [r3, #24]
}
 80077e2:	bf00      	nop
 80077e4:	3770      	adds	r7, #112	@ 0x70
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40008000 	.word	0x40008000

080077f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <siprintf>:
 8007804:	b40e      	push	{r1, r2, r3}
 8007806:	b500      	push	{lr}
 8007808:	b09c      	sub	sp, #112	@ 0x70
 800780a:	ab1d      	add	r3, sp, #116	@ 0x74
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	9006      	str	r0, [sp, #24]
 8007810:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007814:	4809      	ldr	r0, [pc, #36]	@ (800783c <siprintf+0x38>)
 8007816:	9107      	str	r1, [sp, #28]
 8007818:	9104      	str	r1, [sp, #16]
 800781a:	4909      	ldr	r1, [pc, #36]	@ (8007840 <siprintf+0x3c>)
 800781c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007820:	9105      	str	r1, [sp, #20]
 8007822:	6800      	ldr	r0, [r0, #0]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	a902      	add	r1, sp, #8
 8007828:	f000 f994 	bl	8007b54 <_svfiprintf_r>
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	b01c      	add	sp, #112	@ 0x70
 8007834:	f85d eb04 	ldr.w	lr, [sp], #4
 8007838:	b003      	add	sp, #12
 800783a:	4770      	bx	lr
 800783c:	20000054 	.word	0x20000054
 8007840:	ffff0208 	.word	0xffff0208

08007844 <memset>:
 8007844:	4402      	add	r2, r0
 8007846:	4603      	mov	r3, r0
 8007848:	4293      	cmp	r3, r2
 800784a:	d100      	bne.n	800784e <memset+0xa>
 800784c:	4770      	bx	lr
 800784e:	f803 1b01 	strb.w	r1, [r3], #1
 8007852:	e7f9      	b.n	8007848 <memset+0x4>

08007854 <__errno>:
 8007854:	4b01      	ldr	r3, [pc, #4]	@ (800785c <__errno+0x8>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000054 	.word	0x20000054

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4d0d      	ldr	r5, [pc, #52]	@ (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	@ (800789c <__libc_init_array+0x3c>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2600      	movs	r6, #0
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4d0b      	ldr	r5, [pc, #44]	@ (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	@ (80078a4 <__libc_init_array+0x44>)
 8007874:	f000 fc66 	bl	8008144 <_init>
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2600      	movs	r6, #0
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	08008238 	.word	0x08008238
 800789c:	08008238 	.word	0x08008238
 80078a0:	08008238 	.word	0x08008238
 80078a4:	0800823c 	.word	0x0800823c

080078a8 <__retarget_lock_acquire_recursive>:
 80078a8:	4770      	bx	lr

080078aa <__retarget_lock_release_recursive>:
 80078aa:	4770      	bx	lr

080078ac <_free_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4605      	mov	r5, r0
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d041      	beq.n	8007938 <_free_r+0x8c>
 80078b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b8:	1f0c      	subs	r4, r1, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	18e4      	addlt	r4, r4, r3
 80078c0:	f000 f8e0 	bl	8007a84 <__malloc_lock>
 80078c4:	4a1d      	ldr	r2, [pc, #116]	@ (800793c <_free_r+0x90>)
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	b933      	cbnz	r3, 80078d8 <_free_r+0x2c>
 80078ca:	6063      	str	r3, [r4, #4]
 80078cc:	6014      	str	r4, [r2, #0]
 80078ce:	4628      	mov	r0, r5
 80078d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d4:	f000 b8dc 	b.w	8007a90 <__malloc_unlock>
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d908      	bls.n	80078ee <_free_r+0x42>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	1821      	adds	r1, r4, r0
 80078e0:	428b      	cmp	r3, r1
 80078e2:	bf01      	itttt	eq
 80078e4:	6819      	ldreq	r1, [r3, #0]
 80078e6:	685b      	ldreq	r3, [r3, #4]
 80078e8:	1809      	addeq	r1, r1, r0
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	e7ed      	b.n	80078ca <_free_r+0x1e>
 80078ee:	461a      	mov	r2, r3
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b10b      	cbz	r3, 80078f8 <_free_r+0x4c>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d9fa      	bls.n	80078ee <_free_r+0x42>
 80078f8:	6811      	ldr	r1, [r2, #0]
 80078fa:	1850      	adds	r0, r2, r1
 80078fc:	42a0      	cmp	r0, r4
 80078fe:	d10b      	bne.n	8007918 <_free_r+0x6c>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	4401      	add	r1, r0
 8007904:	1850      	adds	r0, r2, r1
 8007906:	4283      	cmp	r3, r0
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	d1e0      	bne.n	80078ce <_free_r+0x22>
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	6053      	str	r3, [r2, #4]
 8007912:	4408      	add	r0, r1
 8007914:	6010      	str	r0, [r2, #0]
 8007916:	e7da      	b.n	80078ce <_free_r+0x22>
 8007918:	d902      	bls.n	8007920 <_free_r+0x74>
 800791a:	230c      	movs	r3, #12
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	e7d6      	b.n	80078ce <_free_r+0x22>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	1821      	adds	r1, r4, r0
 8007924:	428b      	cmp	r3, r1
 8007926:	bf04      	itt	eq
 8007928:	6819      	ldreq	r1, [r3, #0]
 800792a:	685b      	ldreq	r3, [r3, #4]
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	bf04      	itt	eq
 8007930:	1809      	addeq	r1, r1, r0
 8007932:	6021      	streq	r1, [r4, #0]
 8007934:	6054      	str	r4, [r2, #4]
 8007936:	e7ca      	b.n	80078ce <_free_r+0x22>
 8007938:	bd38      	pop	{r3, r4, r5, pc}
 800793a:	bf00      	nop
 800793c:	200004e8 	.word	0x200004e8

08007940 <sbrk_aligned>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	4e0f      	ldr	r6, [pc, #60]	@ (8007980 <sbrk_aligned+0x40>)
 8007944:	460c      	mov	r4, r1
 8007946:	6831      	ldr	r1, [r6, #0]
 8007948:	4605      	mov	r5, r0
 800794a:	b911      	cbnz	r1, 8007952 <sbrk_aligned+0x12>
 800794c:	f000 fba6 	bl	800809c <_sbrk_r>
 8007950:	6030      	str	r0, [r6, #0]
 8007952:	4621      	mov	r1, r4
 8007954:	4628      	mov	r0, r5
 8007956:	f000 fba1 	bl	800809c <_sbrk_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	d103      	bne.n	8007966 <sbrk_aligned+0x26>
 800795e:	f04f 34ff 	mov.w	r4, #4294967295
 8007962:	4620      	mov	r0, r4
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	1cc4      	adds	r4, r0, #3
 8007968:	f024 0403 	bic.w	r4, r4, #3
 800796c:	42a0      	cmp	r0, r4
 800796e:	d0f8      	beq.n	8007962 <sbrk_aligned+0x22>
 8007970:	1a21      	subs	r1, r4, r0
 8007972:	4628      	mov	r0, r5
 8007974:	f000 fb92 	bl	800809c <_sbrk_r>
 8007978:	3001      	adds	r0, #1
 800797a:	d1f2      	bne.n	8007962 <sbrk_aligned+0x22>
 800797c:	e7ef      	b.n	800795e <sbrk_aligned+0x1e>
 800797e:	bf00      	nop
 8007980:	200004e4 	.word	0x200004e4

08007984 <_malloc_r>:
 8007984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007988:	1ccd      	adds	r5, r1, #3
 800798a:	f025 0503 	bic.w	r5, r5, #3
 800798e:	3508      	adds	r5, #8
 8007990:	2d0c      	cmp	r5, #12
 8007992:	bf38      	it	cc
 8007994:	250c      	movcc	r5, #12
 8007996:	2d00      	cmp	r5, #0
 8007998:	4606      	mov	r6, r0
 800799a:	db01      	blt.n	80079a0 <_malloc_r+0x1c>
 800799c:	42a9      	cmp	r1, r5
 800799e:	d904      	bls.n	80079aa <_malloc_r+0x26>
 80079a0:	230c      	movs	r3, #12
 80079a2:	6033      	str	r3, [r6, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a80 <_malloc_r+0xfc>
 80079ae:	f000 f869 	bl	8007a84 <__malloc_lock>
 80079b2:	f8d8 3000 	ldr.w	r3, [r8]
 80079b6:	461c      	mov	r4, r3
 80079b8:	bb44      	cbnz	r4, 8007a0c <_malloc_r+0x88>
 80079ba:	4629      	mov	r1, r5
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff ffbf 	bl	8007940 <sbrk_aligned>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	4604      	mov	r4, r0
 80079c6:	d158      	bne.n	8007a7a <_malloc_r+0xf6>
 80079c8:	f8d8 4000 	ldr.w	r4, [r8]
 80079cc:	4627      	mov	r7, r4
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	d143      	bne.n	8007a5a <_malloc_r+0xd6>
 80079d2:	2c00      	cmp	r4, #0
 80079d4:	d04b      	beq.n	8007a6e <_malloc_r+0xea>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	4639      	mov	r1, r7
 80079da:	4630      	mov	r0, r6
 80079dc:	eb04 0903 	add.w	r9, r4, r3
 80079e0:	f000 fb5c 	bl	800809c <_sbrk_r>
 80079e4:	4581      	cmp	r9, r0
 80079e6:	d142      	bne.n	8007a6e <_malloc_r+0xea>
 80079e8:	6821      	ldr	r1, [r4, #0]
 80079ea:	1a6d      	subs	r5, r5, r1
 80079ec:	4629      	mov	r1, r5
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ffa6 	bl	8007940 <sbrk_aligned>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d03a      	beq.n	8007a6e <_malloc_r+0xea>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	442b      	add	r3, r5
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	bb62      	cbnz	r2, 8007a60 <_malloc_r+0xdc>
 8007a06:	f8c8 7000 	str.w	r7, [r8]
 8007a0a:	e00f      	b.n	8007a2c <_malloc_r+0xa8>
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	1b52      	subs	r2, r2, r5
 8007a10:	d420      	bmi.n	8007a54 <_malloc_r+0xd0>
 8007a12:	2a0b      	cmp	r2, #11
 8007a14:	d917      	bls.n	8007a46 <_malloc_r+0xc2>
 8007a16:	1961      	adds	r1, r4, r5
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	6025      	str	r5, [r4, #0]
 8007a1c:	bf18      	it	ne
 8007a1e:	6059      	strne	r1, [r3, #4]
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	bf08      	it	eq
 8007a24:	f8c8 1000 	streq.w	r1, [r8]
 8007a28:	5162      	str	r2, [r4, r5]
 8007a2a:	604b      	str	r3, [r1, #4]
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 f82f 	bl	8007a90 <__malloc_unlock>
 8007a32:	f104 000b 	add.w	r0, r4, #11
 8007a36:	1d23      	adds	r3, r4, #4
 8007a38:	f020 0007 	bic.w	r0, r0, #7
 8007a3c:	1ac2      	subs	r2, r0, r3
 8007a3e:	bf1c      	itt	ne
 8007a40:	1a1b      	subne	r3, r3, r0
 8007a42:	50a3      	strne	r3, [r4, r2]
 8007a44:	e7af      	b.n	80079a6 <_malloc_r+0x22>
 8007a46:	6862      	ldr	r2, [r4, #4]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	bf0c      	ite	eq
 8007a4c:	f8c8 2000 	streq.w	r2, [r8]
 8007a50:	605a      	strne	r2, [r3, #4]
 8007a52:	e7eb      	b.n	8007a2c <_malloc_r+0xa8>
 8007a54:	4623      	mov	r3, r4
 8007a56:	6864      	ldr	r4, [r4, #4]
 8007a58:	e7ae      	b.n	80079b8 <_malloc_r+0x34>
 8007a5a:	463c      	mov	r4, r7
 8007a5c:	687f      	ldr	r7, [r7, #4]
 8007a5e:	e7b6      	b.n	80079ce <_malloc_r+0x4a>
 8007a60:	461a      	mov	r2, r3
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d1fb      	bne.n	8007a60 <_malloc_r+0xdc>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6053      	str	r3, [r2, #4]
 8007a6c:	e7de      	b.n	8007a2c <_malloc_r+0xa8>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	6033      	str	r3, [r6, #0]
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 f80c 	bl	8007a90 <__malloc_unlock>
 8007a78:	e794      	b.n	80079a4 <_malloc_r+0x20>
 8007a7a:	6005      	str	r5, [r0, #0]
 8007a7c:	e7d6      	b.n	8007a2c <_malloc_r+0xa8>
 8007a7e:	bf00      	nop
 8007a80:	200004e8 	.word	0x200004e8

08007a84 <__malloc_lock>:
 8007a84:	4801      	ldr	r0, [pc, #4]	@ (8007a8c <__malloc_lock+0x8>)
 8007a86:	f7ff bf0f 	b.w	80078a8 <__retarget_lock_acquire_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	200004e0 	.word	0x200004e0

08007a90 <__malloc_unlock>:
 8007a90:	4801      	ldr	r0, [pc, #4]	@ (8007a98 <__malloc_unlock+0x8>)
 8007a92:	f7ff bf0a 	b.w	80078aa <__retarget_lock_release_recursive>
 8007a96:	bf00      	nop
 8007a98:	200004e0 	.word	0x200004e0

08007a9c <__ssputs_r>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	688e      	ldr	r6, [r1, #8]
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	42be      	cmp	r6, r7
 8007aa6:	680b      	ldr	r3, [r1, #0]
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	4690      	mov	r8, r2
 8007aae:	d82d      	bhi.n	8007b0c <__ssputs_r+0x70>
 8007ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ab8:	d026      	beq.n	8007b08 <__ssputs_r+0x6c>
 8007aba:	6965      	ldr	r5, [r4, #20]
 8007abc:	6909      	ldr	r1, [r1, #16]
 8007abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ac2:	eba3 0901 	sub.w	r9, r3, r1
 8007ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aca:	1c7b      	adds	r3, r7, #1
 8007acc:	444b      	add	r3, r9
 8007ace:	106d      	asrs	r5, r5, #1
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	bf38      	it	cc
 8007ad4:	461d      	movcc	r5, r3
 8007ad6:	0553      	lsls	r3, r2, #21
 8007ad8:	d527      	bpl.n	8007b2a <__ssputs_r+0x8e>
 8007ada:	4629      	mov	r1, r5
 8007adc:	f7ff ff52 	bl	8007984 <_malloc_r>
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	b360      	cbz	r0, 8007b3e <__ssputs_r+0xa2>
 8007ae4:	6921      	ldr	r1, [r4, #16]
 8007ae6:	464a      	mov	r2, r9
 8007ae8:	f000 fae8 	bl	80080bc <memcpy>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	6126      	str	r6, [r4, #16]
 8007afa:	6165      	str	r5, [r4, #20]
 8007afc:	444e      	add	r6, r9
 8007afe:	eba5 0509 	sub.w	r5, r5, r9
 8007b02:	6026      	str	r6, [r4, #0]
 8007b04:	60a5      	str	r5, [r4, #8]
 8007b06:	463e      	mov	r6, r7
 8007b08:	42be      	cmp	r6, r7
 8007b0a:	d900      	bls.n	8007b0e <__ssputs_r+0x72>
 8007b0c:	463e      	mov	r6, r7
 8007b0e:	6820      	ldr	r0, [r4, #0]
 8007b10:	4632      	mov	r2, r6
 8007b12:	4641      	mov	r1, r8
 8007b14:	f000 faa8 	bl	8008068 <memmove>
 8007b18:	68a3      	ldr	r3, [r4, #8]
 8007b1a:	1b9b      	subs	r3, r3, r6
 8007b1c:	60a3      	str	r3, [r4, #8]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	4433      	add	r3, r6
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	2000      	movs	r0, #0
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	f000 fad4 	bl	80080d8 <_realloc_r>
 8007b30:	4606      	mov	r6, r0
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d1e0      	bne.n	8007af8 <__ssputs_r+0x5c>
 8007b36:	6921      	ldr	r1, [r4, #16]
 8007b38:	4650      	mov	r0, sl
 8007b3a:	f7ff feb7 	bl	80078ac <_free_r>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	f8ca 3000 	str.w	r3, [sl]
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e7e9      	b.n	8007b26 <__ssputs_r+0x8a>
	...

08007b54 <_svfiprintf_r>:
 8007b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	4698      	mov	r8, r3
 8007b5a:	898b      	ldrh	r3, [r1, #12]
 8007b5c:	061b      	lsls	r3, r3, #24
 8007b5e:	b09d      	sub	sp, #116	@ 0x74
 8007b60:	4607      	mov	r7, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	4614      	mov	r4, r2
 8007b66:	d510      	bpl.n	8007b8a <_svfiprintf_r+0x36>
 8007b68:	690b      	ldr	r3, [r1, #16]
 8007b6a:	b973      	cbnz	r3, 8007b8a <_svfiprintf_r+0x36>
 8007b6c:	2140      	movs	r1, #64	@ 0x40
 8007b6e:	f7ff ff09 	bl	8007984 <_malloc_r>
 8007b72:	6028      	str	r0, [r5, #0]
 8007b74:	6128      	str	r0, [r5, #16]
 8007b76:	b930      	cbnz	r0, 8007b86 <_svfiprintf_r+0x32>
 8007b78:	230c      	movs	r3, #12
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	b01d      	add	sp, #116	@ 0x74
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	2340      	movs	r3, #64	@ 0x40
 8007b88:	616b      	str	r3, [r5, #20]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b8e:	2320      	movs	r3, #32
 8007b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b98:	2330      	movs	r3, #48	@ 0x30
 8007b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d38 <_svfiprintf_r+0x1e4>
 8007b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ba2:	f04f 0901 	mov.w	r9, #1
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	469a      	mov	sl, r3
 8007baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bae:	b10a      	cbz	r2, 8007bb4 <_svfiprintf_r+0x60>
 8007bb0:	2a25      	cmp	r2, #37	@ 0x25
 8007bb2:	d1f9      	bne.n	8007ba8 <_svfiprintf_r+0x54>
 8007bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb8:	d00b      	beq.n	8007bd2 <_svfiprintf_r+0x7e>
 8007bba:	465b      	mov	r3, fp
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ff6b 	bl	8007a9c <__ssputs_r>
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f000 80a7 	beq.w	8007d1a <_svfiprintf_r+0x1c6>
 8007bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bce:	445a      	add	r2, fp
 8007bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 809f 	beq.w	8007d1a <_svfiprintf_r+0x1c6>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be6:	f10a 0a01 	add.w	sl, sl, #1
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	9307      	str	r3, [sp, #28]
 8007bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bf4:	4654      	mov	r4, sl
 8007bf6:	2205      	movs	r2, #5
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	484e      	ldr	r0, [pc, #312]	@ (8007d38 <_svfiprintf_r+0x1e4>)
 8007bfe:	f7f8 fae7 	bl	80001d0 <memchr>
 8007c02:	9a04      	ldr	r2, [sp, #16]
 8007c04:	b9d8      	cbnz	r0, 8007c3e <_svfiprintf_r+0xea>
 8007c06:	06d0      	lsls	r0, r2, #27
 8007c08:	bf44      	itt	mi
 8007c0a:	2320      	movmi	r3, #32
 8007c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c10:	0711      	lsls	r1, r2, #28
 8007c12:	bf44      	itt	mi
 8007c14:	232b      	movmi	r3, #43	@ 0x2b
 8007c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c20:	d015      	beq.n	8007c4e <_svfiprintf_r+0xfa>
 8007c22:	9a07      	ldr	r2, [sp, #28]
 8007c24:	4654      	mov	r4, sl
 8007c26:	2000      	movs	r0, #0
 8007c28:	f04f 0c0a 	mov.w	ip, #10
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c32:	3b30      	subs	r3, #48	@ 0x30
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d94b      	bls.n	8007cd0 <_svfiprintf_r+0x17c>
 8007c38:	b1b0      	cbz	r0, 8007c68 <_svfiprintf_r+0x114>
 8007c3a:	9207      	str	r2, [sp, #28]
 8007c3c:	e014      	b.n	8007c68 <_svfiprintf_r+0x114>
 8007c3e:	eba0 0308 	sub.w	r3, r0, r8
 8007c42:	fa09 f303 	lsl.w	r3, r9, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	46a2      	mov	sl, r4
 8007c4c:	e7d2      	b.n	8007bf4 <_svfiprintf_r+0xa0>
 8007c4e:	9b03      	ldr	r3, [sp, #12]
 8007c50:	1d19      	adds	r1, r3, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	9103      	str	r1, [sp, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bfbb      	ittet	lt
 8007c5a:	425b      	neglt	r3, r3
 8007c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c60:	9307      	strge	r3, [sp, #28]
 8007c62:	9307      	strlt	r3, [sp, #28]
 8007c64:	bfb8      	it	lt
 8007c66:	9204      	strlt	r2, [sp, #16]
 8007c68:	7823      	ldrb	r3, [r4, #0]
 8007c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c6c:	d10a      	bne.n	8007c84 <_svfiprintf_r+0x130>
 8007c6e:	7863      	ldrb	r3, [r4, #1]
 8007c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c72:	d132      	bne.n	8007cda <_svfiprintf_r+0x186>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	9203      	str	r2, [sp, #12]
 8007c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c80:	3402      	adds	r4, #2
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d48 <_svfiprintf_r+0x1f4>
 8007c88:	7821      	ldrb	r1, [r4, #0]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	f7f8 fa9f 	bl	80001d0 <memchr>
 8007c92:	b138      	cbz	r0, 8007ca4 <_svfiprintf_r+0x150>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	eba0 000a 	sub.w	r0, r0, sl
 8007c9a:	2240      	movs	r2, #64	@ 0x40
 8007c9c:	4082      	lsls	r2, r0
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	3401      	adds	r4, #1
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca8:	4824      	ldr	r0, [pc, #144]	@ (8007d3c <_svfiprintf_r+0x1e8>)
 8007caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cae:	2206      	movs	r2, #6
 8007cb0:	f7f8 fa8e 	bl	80001d0 <memchr>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d036      	beq.n	8007d26 <_svfiprintf_r+0x1d2>
 8007cb8:	4b21      	ldr	r3, [pc, #132]	@ (8007d40 <_svfiprintf_r+0x1ec>)
 8007cba:	bb1b      	cbnz	r3, 8007d04 <_svfiprintf_r+0x1b0>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	3307      	adds	r3, #7
 8007cc0:	f023 0307 	bic.w	r3, r3, #7
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cca:	4433      	add	r3, r6
 8007ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cce:	e76a      	b.n	8007ba6 <_svfiprintf_r+0x52>
 8007cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	e7a8      	b.n	8007c2c <_svfiprintf_r+0xd8>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	3401      	adds	r4, #1
 8007cde:	9305      	str	r3, [sp, #20]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cec:	3a30      	subs	r2, #48	@ 0x30
 8007cee:	2a09      	cmp	r2, #9
 8007cf0:	d903      	bls.n	8007cfa <_svfiprintf_r+0x1a6>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0c6      	beq.n	8007c84 <_svfiprintf_r+0x130>
 8007cf6:	9105      	str	r1, [sp, #20]
 8007cf8:	e7c4      	b.n	8007c84 <_svfiprintf_r+0x130>
 8007cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cfe:	4604      	mov	r4, r0
 8007d00:	2301      	movs	r3, #1
 8007d02:	e7f0      	b.n	8007ce6 <_svfiprintf_r+0x192>
 8007d04:	ab03      	add	r3, sp, #12
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	462a      	mov	r2, r5
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d44 <_svfiprintf_r+0x1f0>)
 8007d0c:	a904      	add	r1, sp, #16
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f3af 8000 	nop.w
 8007d14:	1c42      	adds	r2, r0, #1
 8007d16:	4606      	mov	r6, r0
 8007d18:	d1d6      	bne.n	8007cc8 <_svfiprintf_r+0x174>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	065b      	lsls	r3, r3, #25
 8007d1e:	f53f af2d 	bmi.w	8007b7c <_svfiprintf_r+0x28>
 8007d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d24:	e72c      	b.n	8007b80 <_svfiprintf_r+0x2c>
 8007d26:	ab03      	add	r3, sp, #12
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	462a      	mov	r2, r5
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <_svfiprintf_r+0x1f0>)
 8007d2e:	a904      	add	r1, sp, #16
 8007d30:	4638      	mov	r0, r7
 8007d32:	f000 f879 	bl	8007e28 <_printf_i>
 8007d36:	e7ed      	b.n	8007d14 <_svfiprintf_r+0x1c0>
 8007d38:	080081fc 	.word	0x080081fc
 8007d3c:	08008206 	.word	0x08008206
 8007d40:	00000000 	.word	0x00000000
 8007d44:	08007a9d 	.word	0x08007a9d
 8007d48:	08008202 	.word	0x08008202

08007d4c <_printf_common>:
 8007d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	4616      	mov	r6, r2
 8007d52:	4698      	mov	r8, r3
 8007d54:	688a      	ldr	r2, [r1, #8]
 8007d56:	690b      	ldr	r3, [r1, #16]
 8007d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	bfb8      	it	lt
 8007d60:	4613      	movlt	r3, r2
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d68:	4607      	mov	r7, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b10a      	cbz	r2, 8007d72 <_printf_common+0x26>
 8007d6e:	3301      	adds	r3, #1
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0699      	lsls	r1, r3, #26
 8007d76:	bf42      	ittt	mi
 8007d78:	6833      	ldrmi	r3, [r6, #0]
 8007d7a:	3302      	addmi	r3, #2
 8007d7c:	6033      	strmi	r3, [r6, #0]
 8007d7e:	6825      	ldr	r5, [r4, #0]
 8007d80:	f015 0506 	ands.w	r5, r5, #6
 8007d84:	d106      	bne.n	8007d94 <_printf_common+0x48>
 8007d86:	f104 0a19 	add.w	sl, r4, #25
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	6832      	ldr	r2, [r6, #0]
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dc26      	bgt.n	8007de2 <_printf_common+0x96>
 8007d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	3b00      	subs	r3, #0
 8007d9c:	bf18      	it	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	0692      	lsls	r2, r2, #26
 8007da2:	d42b      	bmi.n	8007dfc <_printf_common+0xb0>
 8007da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007da8:	4641      	mov	r1, r8
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c8      	blx	r9
 8007dae:	3001      	adds	r0, #1
 8007db0:	d01e      	beq.n	8007df0 <_printf_common+0xa4>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	f003 0306 	and.w	r3, r3, #6
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	bf02      	ittt	eq
 8007dbe:	68e5      	ldreq	r5, [r4, #12]
 8007dc0:	6833      	ldreq	r3, [r6, #0]
 8007dc2:	1aed      	subeq	r5, r5, r3
 8007dc4:	68a3      	ldr	r3, [r4, #8]
 8007dc6:	bf0c      	ite	eq
 8007dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dcc:	2500      	movne	r5, #0
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bfc4      	itt	gt
 8007dd2:	1a9b      	subgt	r3, r3, r2
 8007dd4:	18ed      	addgt	r5, r5, r3
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	341a      	adds	r4, #26
 8007dda:	42b5      	cmp	r5, r6
 8007ddc:	d11a      	bne.n	8007e14 <_printf_common+0xc8>
 8007dde:	2000      	movs	r0, #0
 8007de0:	e008      	b.n	8007df4 <_printf_common+0xa8>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4652      	mov	r2, sl
 8007de6:	4641      	mov	r1, r8
 8007de8:	4638      	mov	r0, r7
 8007dea:	47c8      	blx	r9
 8007dec:	3001      	adds	r0, #1
 8007dee:	d103      	bne.n	8007df8 <_printf_common+0xac>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df8:	3501      	adds	r5, #1
 8007dfa:	e7c6      	b.n	8007d8a <_printf_common+0x3e>
 8007dfc:	18e1      	adds	r1, r4, r3
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	2030      	movs	r0, #48	@ 0x30
 8007e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e06:	4422      	add	r2, r4
 8007e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e10:	3302      	adds	r3, #2
 8007e12:	e7c7      	b.n	8007da4 <_printf_common+0x58>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4622      	mov	r2, r4
 8007e18:	4641      	mov	r1, r8
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c8      	blx	r9
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d0e6      	beq.n	8007df0 <_printf_common+0xa4>
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7d9      	b.n	8007dda <_printf_common+0x8e>
	...

08007e28 <_printf_i>:
 8007e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	7e0f      	ldrb	r7, [r1, #24]
 8007e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e30:	2f78      	cmp	r7, #120	@ 0x78
 8007e32:	4691      	mov	r9, r2
 8007e34:	4680      	mov	r8, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e3e:	d807      	bhi.n	8007e50 <_printf_i+0x28>
 8007e40:	2f62      	cmp	r7, #98	@ 0x62
 8007e42:	d80a      	bhi.n	8007e5a <_printf_i+0x32>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	f000 80d2 	beq.w	8007fee <_printf_i+0x1c6>
 8007e4a:	2f58      	cmp	r7, #88	@ 0x58
 8007e4c:	f000 80b9 	beq.w	8007fc2 <_printf_i+0x19a>
 8007e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e58:	e03a      	b.n	8007ed0 <_printf_i+0xa8>
 8007e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e5e:	2b15      	cmp	r3, #21
 8007e60:	d8f6      	bhi.n	8007e50 <_printf_i+0x28>
 8007e62:	a101      	add	r1, pc, #4	@ (adr r1, 8007e68 <_printf_i+0x40>)
 8007e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007e51 	.word	0x08007e51
 8007e74:	08007e51 	.word	0x08007e51
 8007e78:	08007e51 	.word	0x08007e51
 8007e7c:	08007e51 	.word	0x08007e51
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007e51 	.word	0x08007e51
 8007e88:	08007e51 	.word	0x08007e51
 8007e8c:	08007e51 	.word	0x08007e51
 8007e90:	08007e51 	.word	0x08007e51
 8007e94:	08007fd5 	.word	0x08007fd5
 8007e98:	08007eff 	.word	0x08007eff
 8007e9c:	08007f8f 	.word	0x08007f8f
 8007ea0:	08007e51 	.word	0x08007e51
 8007ea4:	08007e51 	.word	0x08007e51
 8007ea8:	08007ff7 	.word	0x08007ff7
 8007eac:	08007e51 	.word	0x08007e51
 8007eb0:	08007eff 	.word	0x08007eff
 8007eb4:	08007e51 	.word	0x08007e51
 8007eb8:	08007e51 	.word	0x08007e51
 8007ebc:	08007f97 	.word	0x08007f97
 8007ec0:	6833      	ldr	r3, [r6, #0]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6032      	str	r2, [r6, #0]
 8007ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e09d      	b.n	8008010 <_printf_i+0x1e8>
 8007ed4:	6833      	ldr	r3, [r6, #0]
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	1d19      	adds	r1, r3, #4
 8007eda:	6031      	str	r1, [r6, #0]
 8007edc:	0606      	lsls	r6, r0, #24
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0xbc>
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	e003      	b.n	8007eec <_printf_i+0xc4>
 8007ee4:	0645      	lsls	r5, r0, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0xb8>
 8007ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	da03      	bge.n	8007ef8 <_printf_i+0xd0>
 8007ef0:	232d      	movs	r3, #45	@ 0x2d
 8007ef2:	426d      	negs	r5, r5
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef8:	4859      	ldr	r0, [pc, #356]	@ (8008060 <_printf_i+0x238>)
 8007efa:	230a      	movs	r3, #10
 8007efc:	e011      	b.n	8007f22 <_printf_i+0xfa>
 8007efe:	6821      	ldr	r1, [r4, #0]
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	0608      	lsls	r0, r1, #24
 8007f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f08:	d402      	bmi.n	8007f10 <_printf_i+0xe8>
 8007f0a:	0649      	lsls	r1, r1, #25
 8007f0c:	bf48      	it	mi
 8007f0e:	b2ad      	uxthmi	r5, r5
 8007f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f12:	4853      	ldr	r0, [pc, #332]	@ (8008060 <_printf_i+0x238>)
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	bf14      	ite	ne
 8007f18:	230a      	movne	r3, #10
 8007f1a:	2308      	moveq	r3, #8
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f22:	6866      	ldr	r6, [r4, #4]
 8007f24:	60a6      	str	r6, [r4, #8]
 8007f26:	2e00      	cmp	r6, #0
 8007f28:	bfa2      	ittt	ge
 8007f2a:	6821      	ldrge	r1, [r4, #0]
 8007f2c:	f021 0104 	bicge.w	r1, r1, #4
 8007f30:	6021      	strge	r1, [r4, #0]
 8007f32:	b90d      	cbnz	r5, 8007f38 <_printf_i+0x110>
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	d04b      	beq.n	8007fd0 <_printf_i+0x1a8>
 8007f38:	4616      	mov	r6, r2
 8007f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f42:	5dc7      	ldrb	r7, [r0, r7]
 8007f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f48:	462f      	mov	r7, r5
 8007f4a:	42bb      	cmp	r3, r7
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	d9f4      	bls.n	8007f3a <_printf_i+0x112>
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d10b      	bne.n	8007f6c <_printf_i+0x144>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	07df      	lsls	r7, r3, #31
 8007f58:	d508      	bpl.n	8007f6c <_printf_i+0x144>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	bfde      	ittt	le
 8007f62:	2330      	movle	r3, #48	@ 0x30
 8007f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f6c:	1b92      	subs	r2, r2, r6
 8007f6e:	6122      	str	r2, [r4, #16]
 8007f70:	f8cd a000 	str.w	sl, [sp]
 8007f74:	464b      	mov	r3, r9
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fee6 	bl	8007d4c <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14a      	bne.n	800801a <_printf_i+0x1f2>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b004      	add	sp, #16
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f043 0320 	orr.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	4833      	ldr	r0, [pc, #204]	@ (8008064 <_printf_i+0x23c>)
 8007f98:	2778      	movs	r7, #120	@ 0x78
 8007f9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6831      	ldr	r1, [r6, #0]
 8007fa2:	061f      	lsls	r7, r3, #24
 8007fa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fa8:	d402      	bmi.n	8007fb0 <_printf_i+0x188>
 8007faa:	065f      	lsls	r7, r3, #25
 8007fac:	bf48      	it	mi
 8007fae:	b2ad      	uxthmi	r5, r5
 8007fb0:	6031      	str	r1, [r6, #0]
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	bf44      	itt	mi
 8007fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fba:	6023      	strmi	r3, [r4, #0]
 8007fbc:	b11d      	cbz	r5, 8007fc6 <_printf_i+0x19e>
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	e7ac      	b.n	8007f1c <_printf_i+0xf4>
 8007fc2:	4827      	ldr	r0, [pc, #156]	@ (8008060 <_printf_i+0x238>)
 8007fc4:	e7e9      	b.n	8007f9a <_printf_i+0x172>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f023 0320 	bic.w	r3, r3, #32
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	e7f6      	b.n	8007fbe <_printf_i+0x196>
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	e7bd      	b.n	8007f50 <_printf_i+0x128>
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	6825      	ldr	r5, [r4, #0]
 8007fd8:	6961      	ldr	r1, [r4, #20]
 8007fda:	1d18      	adds	r0, r3, #4
 8007fdc:	6030      	str	r0, [r6, #0]
 8007fde:	062e      	lsls	r6, r5, #24
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0x1c0>
 8007fe4:	6019      	str	r1, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <_printf_i+0x1c6>
 8007fe8:	0668      	lsls	r0, r5, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0x1bc>
 8007fec:	8019      	strh	r1, [r3, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	4616      	mov	r6, r2
 8007ff4:	e7bc      	b.n	8007f70 <_printf_i+0x148>
 8007ff6:	6833      	ldr	r3, [r6, #0]
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	6032      	str	r2, [r6, #0]
 8007ffc:	681e      	ldr	r6, [r3, #0]
 8007ffe:	6862      	ldr	r2, [r4, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	4630      	mov	r0, r6
 8008004:	f7f8 f8e4 	bl	80001d0 <memchr>
 8008008:	b108      	cbz	r0, 800800e <_printf_i+0x1e6>
 800800a:	1b80      	subs	r0, r0, r6
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	6863      	ldr	r3, [r4, #4]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2300      	movs	r3, #0
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008018:	e7aa      	b.n	8007f70 <_printf_i+0x148>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	4632      	mov	r2, r6
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d0ad      	beq.n	8007f84 <_printf_i+0x15c>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	079b      	lsls	r3, r3, #30
 800802c:	d413      	bmi.n	8008056 <_printf_i+0x22e>
 800802e:	68e0      	ldr	r0, [r4, #12]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	4298      	cmp	r0, r3
 8008034:	bfb8      	it	lt
 8008036:	4618      	movlt	r0, r3
 8008038:	e7a6      	b.n	8007f88 <_printf_i+0x160>
 800803a:	2301      	movs	r3, #1
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d09d      	beq.n	8007f84 <_printf_i+0x15c>
 8008048:	3501      	adds	r5, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	42ab      	cmp	r3, r5
 8008052:	dcf2      	bgt.n	800803a <_printf_i+0x212>
 8008054:	e7eb      	b.n	800802e <_printf_i+0x206>
 8008056:	2500      	movs	r5, #0
 8008058:	f104 0619 	add.w	r6, r4, #25
 800805c:	e7f5      	b.n	800804a <_printf_i+0x222>
 800805e:	bf00      	nop
 8008060:	0800820d 	.word	0x0800820d
 8008064:	0800821e 	.word	0x0800821e

08008068 <memmove>:
 8008068:	4288      	cmp	r0, r1
 800806a:	b510      	push	{r4, lr}
 800806c:	eb01 0402 	add.w	r4, r1, r2
 8008070:	d902      	bls.n	8008078 <memmove+0x10>
 8008072:	4284      	cmp	r4, r0
 8008074:	4623      	mov	r3, r4
 8008076:	d807      	bhi.n	8008088 <memmove+0x20>
 8008078:	1e43      	subs	r3, r0, #1
 800807a:	42a1      	cmp	r1, r4
 800807c:	d008      	beq.n	8008090 <memmove+0x28>
 800807e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008086:	e7f8      	b.n	800807a <memmove+0x12>
 8008088:	4402      	add	r2, r0
 800808a:	4601      	mov	r1, r0
 800808c:	428a      	cmp	r2, r1
 800808e:	d100      	bne.n	8008092 <memmove+0x2a>
 8008090:	bd10      	pop	{r4, pc}
 8008092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800809a:	e7f7      	b.n	800808c <memmove+0x24>

0800809c <_sbrk_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d06      	ldr	r5, [pc, #24]	@ (80080b8 <_sbrk_r+0x1c>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	f7f9 faa0 	bl	80015ec <_sbrk>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_sbrk_r+0x1a>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_sbrk_r+0x1a>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	200004dc 	.word	0x200004dc

080080bc <memcpy>:
 80080bc:	440a      	add	r2, r1
 80080be:	4291      	cmp	r1, r2
 80080c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c4:	d100      	bne.n	80080c8 <memcpy+0xc>
 80080c6:	4770      	bx	lr
 80080c8:	b510      	push	{r4, lr}
 80080ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d2:	4291      	cmp	r1, r2
 80080d4:	d1f9      	bne.n	80080ca <memcpy+0xe>
 80080d6:	bd10      	pop	{r4, pc}

080080d8 <_realloc_r>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4680      	mov	r8, r0
 80080de:	4615      	mov	r5, r2
 80080e0:	460c      	mov	r4, r1
 80080e2:	b921      	cbnz	r1, 80080ee <_realloc_r+0x16>
 80080e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	4611      	mov	r1, r2
 80080ea:	f7ff bc4b 	b.w	8007984 <_malloc_r>
 80080ee:	b92a      	cbnz	r2, 80080fc <_realloc_r+0x24>
 80080f0:	f7ff fbdc 	bl	80078ac <_free_r>
 80080f4:	2400      	movs	r4, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	f000 f81a 	bl	8008134 <_malloc_usable_size_r>
 8008100:	4285      	cmp	r5, r0
 8008102:	4606      	mov	r6, r0
 8008104:	d802      	bhi.n	800810c <_realloc_r+0x34>
 8008106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800810a:	d8f4      	bhi.n	80080f6 <_realloc_r+0x1e>
 800810c:	4629      	mov	r1, r5
 800810e:	4640      	mov	r0, r8
 8008110:	f7ff fc38 	bl	8007984 <_malloc_r>
 8008114:	4607      	mov	r7, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	d0ec      	beq.n	80080f4 <_realloc_r+0x1c>
 800811a:	42b5      	cmp	r5, r6
 800811c:	462a      	mov	r2, r5
 800811e:	4621      	mov	r1, r4
 8008120:	bf28      	it	cs
 8008122:	4632      	movcs	r2, r6
 8008124:	f7ff ffca 	bl	80080bc <memcpy>
 8008128:	4621      	mov	r1, r4
 800812a:	4640      	mov	r0, r8
 800812c:	f7ff fbbe 	bl	80078ac <_free_r>
 8008130:	463c      	mov	r4, r7
 8008132:	e7e0      	b.n	80080f6 <_realloc_r+0x1e>

08008134 <_malloc_usable_size_r>:
 8008134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008138:	1f18      	subs	r0, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	bfbc      	itt	lt
 800813e:	580b      	ldrlt	r3, [r1, r0]
 8008140:	18c0      	addlt	r0, r0, r3
 8008142:	4770      	bx	lr

08008144 <_init>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr

08008150 <_fini>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr
