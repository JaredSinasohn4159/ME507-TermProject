
Term_Proj_2_Elec_Bugalu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080093b0  080093b0  0000a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094dc  080094dc  0000b16c  2**0
                  CONTENTS
  4 .ARM          00000008  080094dc  080094dc  0000a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e4  080094e4  0000b16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080094ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000016c  08009658  0000b16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08009658  0000b660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2c9  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a7  00000000  00000000  00026465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00029a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  0002b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296aa  00000000  00000000  0002c3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9be  00000000  00000000  00055a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010732f  00000000  00000000  00073427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  0017a79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00181048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009398 	.word	0x08009398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	08009398 	.word	0x08009398

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <run>:
 *  Created on: May 29, 2024
 *      Author: Jared Sinasohn
 */
#include "CLController.h"

uint32_t run(CLController* con,  int32_t measured){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	con->curr = measured;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	619a      	str	r2, [r3, #24]
	con->curr_time = HAL_GetTick();
 8000570:	f001 fccc 	bl	8001f0c <HAL_GetTick>
 8000574:	4602      	mov	r2, r0
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	62da      	str	r2, [r3, #44]	@ 0x2c
	con->err = con->setpoint - con->curr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691a      	ldr	r2, [r3, #16]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	61da      	str	r2, [r3, #28]
	con->err_acc = con->err_acc + con->err;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6a1a      	ldr	r2, [r3, #32]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	441a      	add	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	621a      	str	r2, [r3, #32]
	con->eff = (con->kf * measured)/1000000 + (con->kp * con->err)/1000000 + (con->ki * con->err_acc)/1000000;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	ed93 7a03 	vldr	s14, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	ee07 3a90 	vmov	s15, r3
 80005a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005aa:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80006d8 <run+0x178>
 80005ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	edd3 6a00 	vldr	s13, [r3]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	ee07 3a90 	vmov	s15, r3
 80005c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80005c8:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 80006d8 <run+0x178>
 80005cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6a1b      	ldr	r3, [r3, #32]
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80005ea:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 80006d8 <run+0x178>
 80005ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fa:	ee17 2a90 	vmov	r2, s15
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	615a      	str	r2, [r3, #20]
	if(con->kd > 0){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	edd3 7a02 	vldr	s15, [r3, #8]
 8000608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	dd11      	ble.n	8000636 <run+0xd6>
		con->prev_err_list[con->prev_err_index] = con->err;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	69d9      	ldr	r1, [r3, #28]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	320e      	adds	r2, #14
 8000622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		con->prev_err_index += 1;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	if(con->kd > 0 && con->prev_err_index >= con->prev_err_list_length){
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	edd3 7a02 	vldr	s15, [r3, #8]
 800063c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000644:	dd3e      	ble.n	80006c4 <run+0x164>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800064c:	461a      	mov	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000652:	429a      	cmp	r2, r3
 8000654:	d336      	bcc.n	80006c4 <run+0x164>
		con->slope = ((con->prev_err_list[con->prev_err_index-1]-con->prev_err_list[0]))*1000/(con->curr_time - con->initial_time);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800065c:	1e5a      	subs	r2, r3, #1
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	320e      	adds	r2, #14
 8000662:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000670:	fb02 f303 	mul.w	r3, r2, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	fbb1 f3f3 	udiv	r3, r1, r3
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	631a      	str	r2, [r3, #48]	@ 0x30
		con->eff += con->kd * con->slope;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	edd3 6a02 	vldr	s13, [r3, #8]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b4:	ee17 2a90 	vmov	r2, s15
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	615a      	str	r2, [r3, #20]
		con->prev_err_index = 0;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	con->initial_time = con->curr_time;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
	return con->eff;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	695b      	ldr	r3, [r3, #20]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	49742400 	.word	0x49742400

080006dc <display_note>:
//uint16_t* note_addresses = [1101100001111000,1101101101110101,1101101101110100,1101101100000000,1110001111001001,1110001111001000,1101101100110001,1101101100110000,1101000000110000,1101101101010001,1101101101010000,1101100001111001];
//uint16_t* note_addresses = {55416,56181,56180,56064,58313,58312,56113,56112,53296,56145,56144,55417};
uint16_t disp_addr = 0b11000001;
uint8_t Pitch_Message[] = "Current Pitch: ";
uint8_t Pitch_Buffer[50] = {0};
uint8_t display_note(Display* disp, uint8_t note){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	if(disp->curr_note == note){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d102      	bne.n	80006f8 <display_note+0x1c>
		return disp->curr_note;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	e06f      	b.n	80007d8 <display_note+0xfc>
	}
	disp->curr_note = note;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Mem_Write(disp->hi2c, disp_addr, 0x15, 1, (uint8_t*)0b01010101, 1, 250);
	HAL_I2C_Mem_Write(disp->hi2c, disp_addr, 0x16, 1, (uint8_t*)0b01010101, 1, 250);
	HAL_I2C_Mem_Write(disp->hi2c, disp_addr, 0x17, 1, (uint8_t*)0b01010101, 1, 250);
	disp->curr_note = note;
	HAL_I2C_Master_Transmit((disp->hi2c), disp_addr, ((uint8_t*)&note_addresses[disp->curr_note]),2,100);*/
	switch(disp->curr_note){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b0b      	cmp	r3, #11
 8000704:	d856      	bhi.n	80007b4 <display_note+0xd8>
 8000706:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <display_note+0x30>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	0800073d 	.word	0x0800073d
 8000710:	08000747 	.word	0x08000747
 8000714:	08000751 	.word	0x08000751
 8000718:	0800075b 	.word	0x0800075b
 800071c:	08000765 	.word	0x08000765
 8000720:	0800076f 	.word	0x0800076f
 8000724:	08000779 	.word	0x08000779
 8000728:	08000783 	.word	0x08000783
 800072c:	0800078d 	.word	0x0800078d
 8000730:	08000797 	.word	0x08000797
 8000734:	080007a1 	.word	0x080007a1
 8000738:	080007ab 	.word	0x080007ab
			case 0:
				sprintf(Pitch_Buffer, "A  \r\n");
 800073c:	4928      	ldr	r1, [pc, #160]	@ (80007e0 <display_note+0x104>)
 800073e:	4829      	ldr	r0, [pc, #164]	@ (80007e4 <display_note+0x108>)
 8000740:	f008 f98a 	bl	8008a58 <siprintf>
				break;
 8000744:	e036      	b.n	80007b4 <display_note+0xd8>
			case 1:
						sprintf(Pitch_Buffer, "Bb \r\n");
 8000746:	4928      	ldr	r1, [pc, #160]	@ (80007e8 <display_note+0x10c>)
 8000748:	4826      	ldr	r0, [pc, #152]	@ (80007e4 <display_note+0x108>)
 800074a:	f008 f985 	bl	8008a58 <siprintf>
						break;
 800074e:	e031      	b.n	80007b4 <display_note+0xd8>
			case 2:
						sprintf(Pitch_Buffer, "B  \r\n");
 8000750:	4926      	ldr	r1, [pc, #152]	@ (80007ec <display_note+0x110>)
 8000752:	4824      	ldr	r0, [pc, #144]	@ (80007e4 <display_note+0x108>)
 8000754:	f008 f980 	bl	8008a58 <siprintf>
						break;
 8000758:	e02c      	b.n	80007b4 <display_note+0xd8>
			case 3:
						sprintf(Pitch_Buffer, "C  \r\n");
 800075a:	4925      	ldr	r1, [pc, #148]	@ (80007f0 <display_note+0x114>)
 800075c:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <display_note+0x108>)
 800075e:	f008 f97b 	bl	8008a58 <siprintf>
						break;
 8000762:	e027      	b.n	80007b4 <display_note+0xd8>
			case 4:
						sprintf(Pitch_Buffer, "Db \r\n");
 8000764:	4923      	ldr	r1, [pc, #140]	@ (80007f4 <display_note+0x118>)
 8000766:	481f      	ldr	r0, [pc, #124]	@ (80007e4 <display_note+0x108>)
 8000768:	f008 f976 	bl	8008a58 <siprintf>
						break;
 800076c:	e022      	b.n	80007b4 <display_note+0xd8>
			case 5:
						sprintf(Pitch_Buffer, "D  \r\n");
 800076e:	4922      	ldr	r1, [pc, #136]	@ (80007f8 <display_note+0x11c>)
 8000770:	481c      	ldr	r0, [pc, #112]	@ (80007e4 <display_note+0x108>)
 8000772:	f008 f971 	bl	8008a58 <siprintf>
						break;
 8000776:	e01d      	b.n	80007b4 <display_note+0xd8>
			case 6:
						sprintf(Pitch_Buffer, "Eb \r\n");
 8000778:	4920      	ldr	r1, [pc, #128]	@ (80007fc <display_note+0x120>)
 800077a:	481a      	ldr	r0, [pc, #104]	@ (80007e4 <display_note+0x108>)
 800077c:	f008 f96c 	bl	8008a58 <siprintf>
						break;
 8000780:	e018      	b.n	80007b4 <display_note+0xd8>
			case 7:
						sprintf(Pitch_Buffer, "E  \r\n");
 8000782:	491f      	ldr	r1, [pc, #124]	@ (8000800 <display_note+0x124>)
 8000784:	4817      	ldr	r0, [pc, #92]	@ (80007e4 <display_note+0x108>)
 8000786:	f008 f967 	bl	8008a58 <siprintf>
						break;
 800078a:	e013      	b.n	80007b4 <display_note+0xd8>
			case 8:
						sprintf(Pitch_Buffer, "F  \r\n");
 800078c:	491d      	ldr	r1, [pc, #116]	@ (8000804 <display_note+0x128>)
 800078e:	4815      	ldr	r0, [pc, #84]	@ (80007e4 <display_note+0x108>)
 8000790:	f008 f962 	bl	8008a58 <siprintf>
						break;
 8000794:	e00e      	b.n	80007b4 <display_note+0xd8>
			case 9:
						sprintf(Pitch_Buffer, "Gb \r\n");
 8000796:	491c      	ldr	r1, [pc, #112]	@ (8000808 <display_note+0x12c>)
 8000798:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <display_note+0x108>)
 800079a:	f008 f95d 	bl	8008a58 <siprintf>
						break;
 800079e:	e009      	b.n	80007b4 <display_note+0xd8>
			case 10:
						sprintf(Pitch_Buffer, "G  \r\n");
 80007a0:	491a      	ldr	r1, [pc, #104]	@ (800080c <display_note+0x130>)
 80007a2:	4810      	ldr	r0, [pc, #64]	@ (80007e4 <display_note+0x108>)
 80007a4:	f008 f958 	bl	8008a58 <siprintf>
						break;
 80007a8:	e004      	b.n	80007b4 <display_note+0xd8>
			case 11:
						sprintf(Pitch_Buffer, "Ab \r\n");
 80007aa:	4919      	ldr	r1, [pc, #100]	@ (8000810 <display_note+0x134>)
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <display_note+0x108>)
 80007ae:	f008 f953 	bl	8008a58 <siprintf>
						break;
 80007b2:	bf00      	nop
		}
		HAL_UART_Transmit(disp->huart, Pitch_Message, sizeof(Pitch_Message), 10000);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6898      	ldr	r0, [r3, #8]
 80007b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007bc:	2210      	movs	r2, #16
 80007be:	4915      	ldr	r1, [pc, #84]	@ (8000814 <display_note+0x138>)
 80007c0:	f006 fdc6 	bl	8007350 <HAL_UART_Transmit>
		HAL_UART_Transmit(disp->huart, Pitch_Buffer, sizeof(Pitch_Buffer), 10000);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6898      	ldr	r0, [r3, #8]
 80007c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007cc:	2232      	movs	r2, #50	@ 0x32
 80007ce:	4905      	ldr	r1, [pc, #20]	@ (80007e4 <display_note+0x108>)
 80007d0:	f006 fdbe 	bl	8007350 <HAL_UART_Transmit>
	return disp->curr_note;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080093b0 	.word	0x080093b0
 80007e4:	20000188 	.word	0x20000188
 80007e8:	080093b8 	.word	0x080093b8
 80007ec:	080093c0 	.word	0x080093c0
 80007f0:	080093c8 	.word	0x080093c8
 80007f4:	080093d0 	.word	0x080093d0
 80007f8:	080093d8 	.word	0x080093d8
 80007fc:	080093e0 	.word	0x080093e0
 8000800:	080093e8 	.word	0x080093e8
 8000804:	080093f0 	.word	0x080093f0
 8000808:	080093f8 	.word	0x080093f8
 800080c:	08009400 	.word	0x08009400
 8000810:	08009408 	.word	0x08009408
 8000814:	20000000 	.word	0x20000000

08000818 <encoder_read_curr_state>:
 *  Created on: May 23, 2024
 *      Author: Jared Sinasohn
 */
#include "encoder_handler.h"

void encoder_read_curr_state(Encoder* encoder){
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	encoder->prev_count = encoder->curr_count;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	609a      	str	r2, [r3, #8]
	encoder->prev_time = encoder->curr_time;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	611a      	str	r2, [r3, #16]
	encoder->curr_count = encoder->timer->Instance->CNT;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	60da      	str	r2, [r3, #12]
	encoder->curr_time = encoder->timing_timer->Instance->CNT;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	615a      	str	r2, [r3, #20]
	encoder->dx = delta(encoder->timer, encoder->prev_count,encoder->curr_count);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6899      	ldr	r1, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	461a      	mov	r2, r3
 8000856:	f000 f83f 	bl	80008d8 <delta>
 800085a:	4602      	mov	r2, r0
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	621a      	str	r2, [r3, #32]
	int32_t dt = delta(encoder->timing_timer, encoder->prev_time,encoder->curr_time);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6858      	ldr	r0, [r3, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6919      	ldr	r1, [r3, #16]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	461a      	mov	r2, r3
 800086e:	f000 f833 	bl	80008d8 <delta>
 8000872:	60f8      	str	r0, [r7, #12]
	encoder->pos = encoder->pos + encoder->dx;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	699a      	ldr	r2, [r3, #24]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	441a      	add	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	619a      	str	r2, [r3, #24]
	encoder->speed = encoder_calc_speed(encoder,encoder->dx,dt);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f808 	bl	80008a0 <encoder_calc_speed>
 8000890:	4602      	mov	r2, r0
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	61da      	str	r2, [r3, #28]

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <encoder_calc_speed>:
int32_t encoder_calc_speed(Encoder* encoder, int32_t dx,int32_t dt){
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	if(dt == 0){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <encoder_calc_speed+0x18>
		return encoder->speed;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	e006      	b.n	80008c6 <encoder_calc_speed+0x26>
	}
	return ((dx)*1000000)/dt;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <encoder_calc_speed+0x34>)
 80008bc:	fb03 f202 	mul.w	r2, r3, r2
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	000f4240 	.word	0x000f4240

080008d8 <delta>:
	encoder->curr_time = HAL_GetTick();
	encoder->pos = 0;
	encoder->speed = 0;
}

int32_t delta(TIM_HandleTypeDef* timer, uint32_t initial, uint32_t final){
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	@ 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	uint32_t ARR = (int32_t)(timer->Init.Period );
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	61bb      	str	r3, [r7, #24]
	int32_t overflow = ((ARR-1)/2)+1;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	085b      	lsrs	r3, r3, #1
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
	int32_t delta = final-initial;
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	61fb      	str	r3, [r7, #28]
	if(delta >= overflow){
 80008fc:	69fa      	ldr	r2, [r7, #28]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	db05      	blt.n	8000910 <delta+0x38>
		delta = delta - overflow*2;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	e008      	b.n	8000922 <delta+0x4a>
	}else if(delta <= -1*overflow){
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	425b      	negs	r3, r3
 8000914:	69fa      	ldr	r2, [r7, #28]
 8000916:	429a      	cmp	r2, r3
 8000918:	dc03      	bgt.n	8000922 <delta+0x4a>
		delta = delta + overflow;
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	4413      	add	r3, r2
 8000920:	61fb      	str	r3, [r7, #28]
	}
	return delta;
 8000922:	69fb      	ldr	r3, [r7, #28]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3724      	adds	r7, #36	@ 0x24
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <display_task>:
void motor_task (uint8_t* state);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display_task(uint8_t* state){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	switch(*state){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <display_task+0x16>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d004      	beq.n	800094e <display_task+0x1e>
	case 1:
		ptch = get_pitch(&pe);
		display_note(&display,ptch);
		break;
	}
}
 8000944:	e011      	b.n	800096a <display_task+0x3a>
		*state = 1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
		break;
 800094c:	e00d      	b.n	800096a <display_task+0x3a>
		ptch = get_pitch(&pe);
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <display_task+0x44>)
 8000950:	f000 fe98 	bl	8001684 <get_pitch>
 8000954:	4603      	mov	r3, r0
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <display_task+0x48>)
 8000958:	6013      	str	r3, [r2, #0]
		display_note(&display,ptch);
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <display_task+0x48>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	@ (800097c <display_task+0x4c>)
 8000964:	f7ff feba 	bl	80006dc <display_note>
		break;
 8000968:	bf00      	nop
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000c8 	.word	0x200000c8
 8000978:	200004fc 	.word	0x200004fc
 800097c:	200000d4 	.word	0x200000d4

08000980 <motor_task>:
void motor_task (uint8_t* state){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	switch(*state){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <motor_task+0x16>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00e      	beq.n	80009b2 <motor_task+0x32>
					HAL_UART_Transmit(&huart2, Eff_Buffer, sizeof(Eff_Buffer), 10000);*/
				}
				break;
			}
	}
}
 8000994:	e043      	b.n	8000a1e <motor_task+0x9e>
			*state = 1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
			timmy = HAL_GetTick();
 800099c:	f001 fab6 	bl	8001f0c <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a21      	ldr	r2, [pc, #132]	@ (8000a28 <motor_task+0xa8>)
 80009a4:	6013      	str	r3, [r2, #0]
			timmy2 = HAL_GetTick();
 80009a6:	f001 fab1 	bl	8001f0c <HAL_GetTick>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <motor_task+0xac>)
 80009ae:	6013      	str	r3, [r2, #0]
			break;
 80009b0:	e035      	b.n	8000a1e <motor_task+0x9e>
			if(HAL_GetTick() >= timmy + 2){
 80009b2:	f001 faab 	bl	8001f0c <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <motor_task+0xa8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3302      	adds	r3, #2
 80009be:	429a      	cmp	r2, r3
 80009c0:	d32d      	bcc.n	8000a1e <motor_task+0x9e>
				timmy = HAL_GetTick();
 80009c2:	f001 faa3 	bl	8001f0c <HAL_GetTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <motor_task+0xa8>)
 80009ca:	6013      	str	r3, [r2, #0]
				m_con.setpoint = motor_speeds[ptch];
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <motor_task+0xb0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <motor_task+0xb4>)
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <motor_task+0xb8>)
 80009d8:	6113      	str	r3, [r2, #16]
				encoder_read_curr_state(&mot_enc);
 80009da:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <motor_task+0xbc>)
 80009dc:	f7ff ff1c 	bl	8000818 <encoder_read_curr_state>
				eff = run(&m_con,mot_enc.speed);
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <motor_task+0xbc>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4814      	ldr	r0, [pc, #80]	@ (8000a38 <motor_task+0xb8>)
 80009e8:	f7ff fdba 	bl	8000560 <run>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <motor_task+0xc0>)
 80009f2:	601a      	str	r2, [r3, #0]
				motor_set_duty_cycle(&m, eff);
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <motor_task+0xc0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <motor_task+0xc4>)
 80009fc:	f000 fdc6 	bl	800158c <motor_set_duty_cycle>
				if(HAL_GetTick() >= timmy2 + 1000){
 8000a00:	f001 fa84 	bl	8001f0c <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <motor_task+0xac>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d304      	bcc.n	8000a1c <motor_task+0x9c>
					timmy2 = HAL_GetTick();
 8000a12:	f001 fa7b 	bl	8001f0c <HAL_GetTick>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <motor_task+0xac>)
 8000a1a:	6013      	str	r3, [r2, #0]
				break;
 8000a1c:	bf00      	nop
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000500 	.word	0x20000500
 8000a2c:	20000504 	.word	0x20000504
 8000a30:	200004fc 	.word	0x200004fc
 8000a34:	200000e0 	.word	0x200000e0
 8000a38:	20000068 	.word	0x20000068
 8000a3c:	20000044 	.word	0x20000044
 8000a40:	2000050c 	.word	0x2000050c
 8000a44:	20000010 	.word	0x20000010

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f001 f9ed 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f965 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 fd09 	bl	800146c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 fcd7 	bl	800140c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a5e:	f000 fa67 	bl	8000f30 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a62:	f000 fb01 	bl	8001068 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a66:	f000 f9ad 	bl	8000dc4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000a6a:	f000 fa21 	bl	8000eb0 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000a6e:	f000 fb7b 	bl	8001168 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a72:	f000 fbcf 	bl	8001214 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a76:	f000 fc61 	bl	800133c <MX_TIM8_Init>
  MX_TIM6_Init();
 8000a7a:	f000 fc29 	bl	80012d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MX_I2C2_Init();
 8000a7e:	f000 fa17 	bl	8000eb0 <MX_I2C2_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a82:	213c      	movs	r1, #60	@ 0x3c
 8000a84:	4896      	ldr	r0, [pc, #600]	@ (8000ce0 <main+0x298>)
 8000a86:	f005 fa16 	bl	8005eb6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000a8a:	213c      	movs	r1, #60	@ 0x3c
 8000a8c:	4895      	ldr	r0, [pc, #596]	@ (8000ce4 <main+0x29c>)
 8000a8e:	f005 faa0 	bl	8005fd2 <HAL_TIM_Encoder_Start_IT>
  //! allow for receiving of interrupts through uart
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&char_in, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	4994      	ldr	r1, [pc, #592]	@ (8000ce8 <main+0x2a0>)
 8000a96:	4895      	ldr	r0, [pc, #596]	@ (8000cec <main+0x2a4>)
 8000a98:	f006 fce4 	bl	8007464 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4894      	ldr	r0, [pc, #592]	@ (8000cf0 <main+0x2a8>)
 8000aa0:	f004 ffac 	bl	80059fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4892      	ldr	r0, [pc, #584]	@ (8000cf0 <main+0x2a8>)
 8000aa8:	f004 ffa8 	bl	80059fc <HAL_TIM_PWM_Start>
  htim5.Instance->CNT = ((htim5.Init.Period)+1)/2;
 8000aac:	4b8d      	ldr	r3, [pc, #564]	@ (8000ce4 <main+0x29c>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	4b8c      	ldr	r3, [pc, #560]	@ (8000ce4 <main+0x29c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	0852      	lsrs	r2, r2, #1
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim6);
 8000aba:	488e      	ldr	r0, [pc, #568]	@ (8000cf4 <main+0x2ac>)
 8000abc:	f004 fede 	bl	800587c <HAL_TIM_Base_Start>
  uint8_t i = 0, ret;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f002 fd2b 	bl	8003528 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4888      	ldr	r0, [pc, #544]	@ (8000cf8 <main+0x2b0>)
 8000ad8:	f002 fd26 	bl	8003528 <HAL_GPIO_WritePin>
  uint8_t aTxBuffer[2] = {};
 8000adc:	2300      	movs	r3, #0
 8000ade:	80bb      	strh	r3, [r7, #4]
  aTxBuffer[0] = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	713b      	strb	r3, [r7, #4]
  aTxBuffer[1] = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	717b      	strb	r3, [r7, #5]
  uint8_t lvl = 85;
 8000ae8:	2355      	movs	r3, #85	@ 0x55
 8000aea:	75bb      	strb	r3, [r7, #22]
  uint8_t addr = 0b11000000;
 8000aec:	23c0      	movs	r3, #192	@ 0xc0
 8000aee:	757b      	strb	r3, [r7, #21]
  HAL_I2C_Mem_Read(&hi2c2, addr, 0x00, 1, led_buff, 1, 500);
 8000af0:	7d7b      	ldrb	r3, [r7, #21]
 8000af2:	b299      	uxth	r1, r3
 8000af4:	4b81      	ldr	r3, [pc, #516]	@ (8000cfc <main+0x2b4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2301      	movs	r3, #1
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	487d      	ldr	r0, [pc, #500]	@ (8000d00 <main+0x2b8>)
 8000b0c:	f002 fed4 	bl	80038b8 <HAL_I2C_Mem_Read>
    sprintf(Buffer, "Reg 0x14x: %X \r\n",led_buff);
 8000b10:	4b7a      	ldr	r3, [pc, #488]	@ (8000cfc <main+0x2b4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	497b      	ldr	r1, [pc, #492]	@ (8000d04 <main+0x2bc>)
 8000b18:	487b      	ldr	r0, [pc, #492]	@ (8000d08 <main+0x2c0>)
 8000b1a:	f007 ff9d 	bl	8008a58 <siprintf>
    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000b1e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000b22:	2232      	movs	r2, #50	@ 0x32
 8000b24:	4978      	ldr	r1, [pc, #480]	@ (8000d08 <main+0x2c0>)
 8000b26:	4871      	ldr	r0, [pc, #452]	@ (8000cec <main+0x2a4>)
 8000b28:	f006 fc12 	bl	8007350 <HAL_UART_Transmit>
  HAL_Delay(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b30:	f001 f9f8 	bl	8001f24 <HAL_Delay>
  ret = HAL_I2C_Mem_Write(&hi2c2, 0b11000000, 0x14, 1, lvl, 1, 500);
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	2301      	movs	r3, #1
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	9200      	str	r2, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	2214      	movs	r2, #20
 8000b48:	21c0      	movs	r1, #192	@ 0xc0
 8000b4a:	486d      	ldr	r0, [pc, #436]	@ (8000d00 <main+0x2b8>)
 8000b4c:	f002 fda0 	bl	8003690 <HAL_I2C_Mem_Write>
 8000b50:	4603      	mov	r3, r0
 8000b52:	753b      	strb	r3, [r7, #20]
  }else if(ret == HAL_OK)
  {
      sprintf(Buffer, "worked!\n\r");
      HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
  }*/
  HAL_Delay(500);
 8000b54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b58:	f001 f9e4 	bl	8001f24 <HAL_Delay>
  ret = HAL_I2C_Mem_Write(&hi2c2, 0b11000000, 0x15, 1, lvl, 1, 500);
 8000b5c:	7dbb      	ldrb	r3, [r7, #22]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	9200      	str	r2, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2215      	movs	r2, #21
 8000b70:	21c0      	movs	r1, #192	@ 0xc0
 8000b72:	4863      	ldr	r0, [pc, #396]	@ (8000d00 <main+0x2b8>)
 8000b74:	f002 fd8c 	bl	8003690 <HAL_I2C_Mem_Write>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	753b      	strb	r3, [r7, #20]
    }else if(ret == HAL_OK)
    {
        sprintf(Buffer, "worked!\n\r");
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
    }*/
  HAL_Delay(500);
 8000b7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b80:	f001 f9d0 	bl	8001f24 <HAL_Delay>
  ret = HAL_I2C_Mem_Write(&hi2c2, 0b11000000, 0x16, 1, lvl, 1, 500);
 8000b84:	7dbb      	ldrb	r3, [r7, #22]
 8000b86:	461a      	mov	r2, r3
 8000b88:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	9200      	str	r2, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	2216      	movs	r2, #22
 8000b98:	21c0      	movs	r1, #192	@ 0xc0
 8000b9a:	4859      	ldr	r0, [pc, #356]	@ (8000d00 <main+0x2b8>)
 8000b9c:	f002 fd78 	bl	8003690 <HAL_I2C_Mem_Write>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	753b      	strb	r3, [r7, #20]
    }else if(ret == HAL_OK)
    {
        sprintf(Buffer, "worked!\n\r");
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
    }*/
  HAL_Delay(500);
 8000ba4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ba8:	f001 f9bc 	bl	8001f24 <HAL_Delay>
  ret = HAL_I2C_Mem_Write(&hi2c2, 0b11000000, 0x17, 1, lvl, 1, 500);
 8000bac:	7dbb      	ldrb	r3, [r7, #22]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bb4:	9302      	str	r3, [sp, #8]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2217      	movs	r2, #23
 8000bc0:	21c0      	movs	r1, #192	@ 0xc0
 8000bc2:	484f      	ldr	r0, [pc, #316]	@ (8000d00 <main+0x2b8>)
 8000bc4:	f002 fd64 	bl	8003690 <HAL_I2C_Mem_Write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	753b      	strb	r3, [r7, #20]
    }else if(ret == HAL_OK)
    {
        sprintf(Buffer, "worked!\n\r");
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
    }*/
  HAL_I2C_Mem_Read(&hi2c2, addr, 0x14, 1, (uint8_t*)led_buff, 1, 500);
 8000bcc:	7d7b      	ldrb	r3, [r7, #21]
 8000bce:	b299      	uxth	r1, r3
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cfc <main+0x2b4>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	9200      	str	r2, [sp, #0]
 8000be2:	2301      	movs	r3, #1
 8000be4:	2214      	movs	r2, #20
 8000be6:	4846      	ldr	r0, [pc, #280]	@ (8000d00 <main+0x2b8>)
 8000be8:	f002 fe66 	bl	80038b8 <HAL_I2C_Mem_Read>
  sprintf(Buffer, "Reg 0x14x: %X \r\n",led_buff);
 8000bec:	4b43      	ldr	r3, [pc, #268]	@ (8000cfc <main+0x2b4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4944      	ldr	r1, [pc, #272]	@ (8000d04 <main+0x2bc>)
 8000bf4:	4844      	ldr	r0, [pc, #272]	@ (8000d08 <main+0x2c0>)
 8000bf6:	f007 ff2f 	bl	8008a58 <siprintf>
  HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000bfa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000bfe:	2232      	movs	r2, #50	@ 0x32
 8000c00:	4941      	ldr	r1, [pc, #260]	@ (8000d08 <main+0x2c0>)
 8000c02:	483a      	ldr	r0, [pc, #232]	@ (8000cec <main+0x2a4>)
 8000c04:	f006 fba4 	bl	8007350 <HAL_UART_Transmit>
  HAL_I2C_Mem_Read(&hi2c2, addr, 0x15, 1, led_buff, 1, 500);
 8000c08:	7d7b      	ldrb	r3, [r7, #21]
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <main+0x2b4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c16:	9302      	str	r3, [sp, #8]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	9200      	str	r2, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2215      	movs	r2, #21
 8000c22:	4837      	ldr	r0, [pc, #220]	@ (8000d00 <main+0x2b8>)
 8000c24:	f002 fe48 	bl	80038b8 <HAL_I2C_Mem_Read>
  sprintf(Buffer, "Reg 0x15x: %X \r\n",led_buff);
 8000c28:	4b34      	ldr	r3, [pc, #208]	@ (8000cfc <main+0x2b4>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4937      	ldr	r1, [pc, #220]	@ (8000d0c <main+0x2c4>)
 8000c30:	4835      	ldr	r0, [pc, #212]	@ (8000d08 <main+0x2c0>)
 8000c32:	f007 ff11 	bl	8008a58 <siprintf>
    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000c36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c3a:	2232      	movs	r2, #50	@ 0x32
 8000c3c:	4932      	ldr	r1, [pc, #200]	@ (8000d08 <main+0x2c0>)
 8000c3e:	482b      	ldr	r0, [pc, #172]	@ (8000cec <main+0x2a4>)
 8000c40:	f006 fb86 	bl	8007350 <HAL_UART_Transmit>
  HAL_I2C_Mem_Read(&hi2c2, addr, 0x16, 1, led_buff, 1, 500);
 8000c44:	7d7b      	ldrb	r3, [r7, #21]
 8000c46:	b299      	uxth	r1, r3
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <main+0x2b4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2216      	movs	r2, #22
 8000c5e:	4828      	ldr	r0, [pc, #160]	@ (8000d00 <main+0x2b8>)
 8000c60:	f002 fe2a 	bl	80038b8 <HAL_I2C_Mem_Read>
  sprintf(Buffer, "Reg 0x16x: %X \r\n",led_buff);
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <main+0x2b4>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4929      	ldr	r1, [pc, #164]	@ (8000d10 <main+0x2c8>)
 8000c6c:	4826      	ldr	r0, [pc, #152]	@ (8000d08 <main+0x2c0>)
 8000c6e:	f007 fef3 	bl	8008a58 <siprintf>
    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000c72:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c76:	2232      	movs	r2, #50	@ 0x32
 8000c78:	4923      	ldr	r1, [pc, #140]	@ (8000d08 <main+0x2c0>)
 8000c7a:	481c      	ldr	r0, [pc, #112]	@ (8000cec <main+0x2a4>)
 8000c7c:	f006 fb68 	bl	8007350 <HAL_UART_Transmit>
  HAL_I2C_Mem_Read(&hi2c2, addr, 0x17, 1, led_buff, 1, 500);
 8000c80:	7d7b      	ldrb	r3, [r7, #21]
 8000c82:	b299      	uxth	r1, r3
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <main+0x2b4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	9200      	str	r2, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	2217      	movs	r2, #23
 8000c9a:	4819      	ldr	r0, [pc, #100]	@ (8000d00 <main+0x2b8>)
 8000c9c:	f002 fe0c 	bl	80038b8 <HAL_I2C_Mem_Read>
  sprintf(Buffer, "Reg 0x17x: %X \r\n",led_buff);
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <main+0x2b4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	491b      	ldr	r1, [pc, #108]	@ (8000d14 <main+0x2cc>)
 8000ca8:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <main+0x2c0>)
 8000caa:	f007 fed5 	bl	8008a58 <siprintf>
    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000cae:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000cb2:	2232      	movs	r2, #50	@ 0x32
 8000cb4:	4914      	ldr	r1, [pc, #80]	@ (8000d08 <main+0x2c0>)
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <main+0x2a4>)
 8000cb8:	f006 fb4a 	bl	8007350 <HAL_UART_Transmit>
    }else if(ret == HAL_OK)
    {
        sprintf(Buffer, "worked!\n\r");
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
    }*/
        uint32_t time1 = HAL_GetTick();
 8000cbc:	f001 f926 	bl	8001f0c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]
        uint32_t time2 = HAL_GetTick();
 8000cc2:	f001 f923 	bl	8001f0c <HAL_GetTick>
 8000cc6:	60f8      	str	r0, [r7, #12]
        int32_t sped = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
        //HAL_I2C_Master_Transmit((&hi2c2), 0b11000001, ((uint8_t*)0b1101100001111000),2,100);
        uint8_t prev_count = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	71fb      	strb	r3, [r7, #7]
  //! @brief This is the game loop that runs forever to convert user inputed code into a PWM signal to drive the motors.
  while (1)
  {

	//motor_set_duty_cycle(&m,100);
	display_task(&t1state);
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <main+0x2d0>)
 8000cd2:	f7ff fe2d 	bl	8000930 <display_task>
	motor_task(&t2state);
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <main+0x2d4>)
 8000cd8:	f7ff fe52 	bl	8000980 <motor_task>
	display_task(&t1state);
 8000cdc:	bf00      	nop
 8000cde:	e7f7      	b.n	8000cd0 <main+0x288>
 8000ce0:	2000030c 	.word	0x2000030c
 8000ce4:	20000358 	.word	0x20000358
 8000ce8:	200004c4 	.word	0x200004c4
 8000cec:	2000043c 	.word	0x2000043c
 8000cf0:	20000274 	.word	0x20000274
 8000cf4:	200003a4 	.word	0x200003a4
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	20000508 	.word	0x20000508
 8000d00:	20000220 	.word	0x20000220
 8000d04:	08009410 	.word	0x08009410
 8000d08:	200004c8 	.word	0x200004c8
 8000d0c:	08009424 	.word	0x08009424
 8000d10:	08009438 	.word	0x08009438
 8000d14:	0800944c 	.word	0x0800944c
 8000d18:	200004c5 	.word	0x200004c5
 8000d1c:	200004c6 	.word	0x200004c6

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2244      	movs	r2, #68	@ 0x44
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 feb2 	bl	8008a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d46:	f003 fa2f 	bl	80041a8 <HAL_PWREx_ControlVoltageScaling>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d50:	f000 fc16 	bl	8001580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d72:	2307      	movs	r3, #7
 8000d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fa66 	bl	8004254 <HAL_RCC_OscConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d8e:	f000 fbf7 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2303      	movs	r3, #3
 8000d98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2104      	movs	r1, #4
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fe2e 	bl	8004a0c <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db6:	f000 fbe3 	bl	8001580 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3758      	adds	r7, #88	@ 0x58
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000de8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea8 <MX_ADC1_Init+0xe4>)
 8000dea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e46:	4817      	ldr	r0, [pc, #92]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e48:	f001 fa1c 	bl	8002284 <HAL_ADC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e52:	f000 fb95 	bl	8001580 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e62:	f001 ff77 	bl	8002d54 <HAL_ADCEx_MultiModeConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e6c:	f000 fb88 	bl	8001580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_ADC1_Init+0xe8>)
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e74:	2306      	movs	r3, #6
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7c:	237f      	movs	r3, #127	@ 0x7f
 8000e7e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e80:	2304      	movs	r3, #4
 8000e82:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_ADC1_Init+0xe0>)
 8000e8e:	f001 fb49 	bl	8002524 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e98:	f000 fb72 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200001bc 	.word	0x200001bc
 8000ea8:	50040000 	.word	0x50040000
 8000eac:	3ac04000 	.word	0x3ac04000

08000eb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <MX_I2C2_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xF010F3FE;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <MX_I2C2_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eee:	f002 fb33 	bl	8003558 <HAL_I2C_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f000 fb42 	bl	8001580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000f00:	f003 f8ac 	bl	800405c <HAL_I2CEx_ConfigAnalogFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f0a:	f000 fb39 	bl	8001580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000f12:	f003 f8ee 	bl	80040f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 fb30 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000220 	.word	0x20000220
 8000f28:	40005800 	.word	0x40005800
 8000f2c:	f010f3fe 	.word	0xf010f3fe

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b096      	sub	sp, #88	@ 0x58
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	222c      	movs	r2, #44	@ 0x2c
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f007 fd9b 	bl	8008a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f62:	4b3f      	ldr	r3, [pc, #252]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f64:	4a3f      	ldr	r2, [pc, #252]	@ (8001064 <MX_TIM1_Init+0x134>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f68:	4b3d      	ldr	r3, [pc, #244]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f74:	4b3a      	ldr	r3, [pc, #232]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f82:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b35      	ldr	r3, [pc, #212]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8e:	4834      	ldr	r0, [pc, #208]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000f90:	f004 fcdc 	bl	800594c <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 faf1 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	482b      	ldr	r0, [pc, #172]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000fb2:	f006 f85b 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fae0 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	@ 0x60
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000fe6:	f005 fa41 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ff0:	f000 fac6 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4818      	ldr	r0, [pc, #96]	@ (8001060 <MX_TIM1_Init+0x130>)
 8000ffe:	f005 fa35 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001008:	f000 faba 	bl	8001580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001024:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800102e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_TIM1_Init+0x130>)
 8001042:	f006 f89b 	bl	800717c <HAL_TIMEx_ConfigBreakDeadTime>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800104c:	f000 fa98 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <MX_TIM1_Init+0x130>)
 8001052:	f000 fd99 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3758      	adds	r7, #88	@ 0x58
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000274 	.word	0x20000274
 8001064:	40012c00 	.word	0x40012c00

08001068 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001086:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <MX_TIM3_Init+0xf8>)
 8001088:	4a36      	ldr	r2, [pc, #216]	@ (8001164 <MX_TIM3_Init+0xfc>)
 800108a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800108c:	4b34      	ldr	r3, [pc, #208]	@ (8001160 <MX_TIM3_Init+0xf8>)
 800108e:	224f      	movs	r2, #79	@ 0x4f
 8001090:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <MX_TIM3_Init+0xf8>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <MX_TIM3_Init+0xf8>)
 800109a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800109e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <MX_TIM3_Init+0xf8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <MX_TIM3_Init+0xf8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010ac:	482c      	ldr	r0, [pc, #176]	@ (8001160 <MX_TIM3_Init+0xf8>)
 80010ae:	f004 fdab 	bl	8005c08 <HAL_TIM_IC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 fa62 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4825      	ldr	r0, [pc, #148]	@ (8001160 <MX_TIM3_Init+0xf8>)
 80010cc:	f005 ffce 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010d6:	f000 fa53 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010de:	2302      	movs	r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	481b      	ldr	r0, [pc, #108]	@ (8001160 <MX_TIM3_Init+0xf8>)
 80010f2:	f005 f91e 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010fc:	f000 fa40 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001100:	2302      	movs	r3, #2
 8001102:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2204      	movs	r2, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4814      	ldr	r0, [pc, #80]	@ (8001160 <MX_TIM3_Init+0xf8>)
 8001110:	f005 f90f 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 fa31 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2208      	movs	r2, #8
 8001126:	4619      	mov	r1, r3
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_TIM3_Init+0xf8>)
 800112a:	f005 f902 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001134:	f000 fa24 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001138:	2302      	movs	r3, #2
 800113a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800113c:	2302      	movs	r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	220c      	movs	r2, #12
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_TIM3_Init+0xf8>)
 8001148:	f005 f8f3 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001152:	f000 fa15 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002c0 	.word	0x200002c0
 8001164:	40000400 	.word	0x40000400

08001168 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fc8e 	bl	8008a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_TIM4_Init+0xa4>)
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <MX_TIM4_Init+0xa8>)
 800118a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_TIM4_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM4_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM4_Init+0xa4>)
 800119a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_TIM4_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM4_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ac:	2303      	movs	r3, #3
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM4_Init+0xa4>)
 80011d8:	f004 fdc7 	bl	8005d6a <HAL_TIM_Encoder_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011e2:	f000 f9cd 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM4_Init+0xa4>)
 80011f4:	f005 ff3a 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011fe:	f000 f9bf 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000030c 	.word	0x2000030c
 8001210:	40000800 	.word	0x40000800

08001214 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2224      	movs	r2, #36	@ 0x24
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fc38 	bl	8008a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001232:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001234:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <MX_TIM5_Init+0xb8>)
 8001236:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1073741823;
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001246:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800124a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001258:	2303      	movs	r3, #3
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001284:	f004 fd71 	bl	8005d6a <HAL_TIM_Encoder_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800128e:	f000 f977 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001292:	2108      	movs	r1, #8
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 8001296:	f004 fd0e 	bl	8005cb6 <HAL_TIM_OnePulse_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 f96e 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_TIM5_Init+0xb4>)
 80012b2:	f005 fedb 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80012bc:	f000 f960 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3730      	adds	r7, #48	@ 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000358 	.word	0x20000358
 80012cc:	40000c00 	.word	0x40000c00

080012d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_TIM6_Init+0x64>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	@ (8001338 <MX_TIM6_Init+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_TIM6_Init+0x64>)
 80012e8:	224f      	movs	r2, #79	@ 0x4f
 80012ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_TIM6_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <MX_TIM6_Init+0x64>)
 80012f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_TIM6_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_TIM6_Init+0x64>)
 8001302:	f004 fa63 	bl	80057cc <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800130c:	f000 f938 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_TIM6_Init+0x64>)
 800131e:	f005 fea5 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 f92a 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200003a4 	.word	0x200003a4
 8001338:	40001000 	.word	0x40001000

0800133c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800135a:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <MX_TIM8_Init+0xc8>)
 800135c:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <MX_TIM8_Init+0xcc>)
 800135e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001360:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <MX_TIM8_Init+0xc8>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <MX_TIM8_Init+0xc8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <MX_TIM8_Init+0xc8>)
 800136e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001372:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <MX_TIM8_Init+0xc8>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <MX_TIM8_Init+0xc8>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <MX_TIM8_Init+0xc8>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001386:	481f      	ldr	r0, [pc, #124]	@ (8001404 <MX_TIM8_Init+0xc8>)
 8001388:	f004 fc3e 	bl	8005c08 <HAL_TIM_IC_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001392:	f000 f8f5 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4816      	ldr	r0, [pc, #88]	@ (8001404 <MX_TIM8_Init+0xc8>)
 80013aa:	f005 fe5f 	bl	800706c <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f8e4 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <MX_TIM8_Init+0xc8>)
 80013d0:	f004 ffaf 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80013da:	f000 f8d1 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013de:	2302      	movs	r3, #2
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2204      	movs	r2, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_TIM8_Init+0xc8>)
 80013ee:	f004 ffa0 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80013f8:	f000 f8c2 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200003f0 	.word	0x200003f0
 8001408:	40013400 	.word	0x40013400

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <MX_USART2_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001450:	f005 ff30 	bl	80072b4 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 f891 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000043c 	.word	0x2000043c
 8001468:	40004400 	.word	0x40004400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MX_GPIO_Init+0x108>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a3b      	ldr	r2, [pc, #236]	@ (8001574 <MX_GPIO_Init+0x108>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <MX_GPIO_Init+0x108>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <MX_GPIO_Init+0x108>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a35      	ldr	r2, [pc, #212]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	4a29      	ldr	r2, [pc, #164]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <MX_GPIO_Init+0x108>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ec:	f002 f81c 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2104      	movs	r1, #4
 80014f4:	4820      	ldr	r0, [pc, #128]	@ (8001578 <MX_GPIO_Init+0x10c>)
 80014f6:	f002 f817 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001500:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	481a      	ldr	r0, [pc, #104]	@ (800157c <MX_GPIO_Init+0x110>)
 8001512:	f001 fe5f 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001516:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 fe4f 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001536:	2304      	movs	r3, #4
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	480a      	ldr	r0, [pc, #40]	@ (8001578 <MX_GPIO_Init+0x10c>)
 800154e:	f001 fe41 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_GPIO_Init+0x110>)
 8001568:	f001 fe34 	bl	80031d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <motor_set_duty_cycle>:
 *  object oriented programming motor control.
 */

#include "motor_driver.h"

void motor_set_duty_cycle(Motor* motor, int32_t doot){
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	 *
	 * @param motor, the Motor struct to be operated on.
	 * @param doot, the duty cycle to be set to.
	 *
	 */
	motor->duty_cycle = doot;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	609a      	str	r2, [r3, #8]
	// First, check if the motor is disabled
	if(motor->enable_flag != 1){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7b1b      	ldrb	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d162      	bne.n	800166a <motor_set_duty_cycle+0xde>
		// the motor doesn't accidentally enable.
		return;
	}

	// Next, saturate the duty cycle just in case.
	if(doot < -100){
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80015aa:	da02      	bge.n	80015b2 <motor_set_duty_cycle+0x26>
		doot = -100;
 80015ac:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80015b0:	603b      	str	r3, [r7, #0]
	}
	if(doot > 100){
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b64      	cmp	r3, #100	@ 0x64
 80015b6:	dd01      	ble.n	80015bc <motor_set_duty_cycle+0x30>
		doot = 100;
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	603b      	str	r3, [r7, #0]
	}

	// We need to get the auto reload value for the timer we are using
	// signed value so we don't run into sign issues later
	int32_t ARR = (int32_t)(motor->timer->Init.Period + 1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]

	// Now calculate the duty cycle in terms of the CCR value
	doot = doot*ARR/100;  // multiply first so we don't lose data
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001680 <motor_set_duty_cycle+0xf4>)
 80015d0:	fb82 1203 	smull	r1, r2, r2, r3
 80015d4:	1152      	asrs	r2, r2, #5
 80015d6:	17db      	asrs	r3, r3, #31
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	603b      	str	r3, [r7, #0]


	// the below CCR's are based on the logic table of the toshiba, setting motor.
	// to brake mode
	// if duty cycle is <0
	if (doot < 0){
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da21      	bge.n	8001626 <motor_set_duty_cycle+0x9a>
	    // check if it is the first or second motor.
		if(motor->channels == 1){
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10c      	bne.n	8001604 <motor_set_duty_cycle+0x78>
			motor->timer->Instance->CCR1 = ARR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR + doot;
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	441a      	add	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	639a      	str	r2, [r3, #56]	@ 0x38
 8001602:	e037      	b.n	8001674 <motor_set_duty_cycle+0xe8>
		} else if(motor->channels == 2){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d130      	bne.n	800166e <motor_set_duty_cycle+0xe2>
			motor->timer->Instance->CCR3 = ARR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR + doot;
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	441a      	add	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
 8001624:	e026      	b.n	8001674 <motor_set_duty_cycle+0xe8>
			// if neither return
			return;
		}
	// if duty cycle >=0
	} else{
		if(motor->channels == 1){
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10c      	bne.n	8001648 <motor_set_duty_cycle+0xbc>
			motor->timer->Instance->CCR1 = ARR - doot;
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	1ad2      	subs	r2, r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34
			motor->timer->Instance->CCR2 = ARR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
 8001646:	e015      	b.n	8001674 <motor_set_duty_cycle+0xe8>
		} else if(motor->channels == 2){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d110      	bne.n	8001672 <motor_set_duty_cycle+0xe6>
			motor->timer->Instance->CCR3 = ARR - doot;
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	63da      	str	r2, [r3, #60]	@ 0x3c
			motor->timer->Instance->CCR4 = ARR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40
 8001668:	e004      	b.n	8001674 <motor_set_duty_cycle+0xe8>
		return;
 800166a:	bf00      	nop
 800166c:	e002      	b.n	8001674 <motor_set_duty_cycle+0xe8>
			return;
 800166e:	bf00      	nop
 8001670:	e000      	b.n	8001674 <motor_set_duty_cycle+0xe8>
		}else{
			return;
 8001672:	bf00      	nop
		}
	}
}
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	51eb851f 	.word	0x51eb851f

08001684 <get_pitch>:
 *  Created on: May 30, 2024
 *      Author: Jared Sinasohn
 */
#include "pitch_encoder_handler.h"

uint32_t get_pitch(PitchEncoder* p_enc){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	encoder_read_curr_state((p_enc->encoder));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f8c1 	bl	8000818 <encoder_read_curr_state>
	p_enc->delta = (int16_t)(p_enc->encoder->dx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	b21a      	sxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	811a      	strh	r2, [r3, #8]
	p_enc->pitch += p_enc->delta;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	801a      	strh	r2, [r3, #0]
	if(p_enc->delta == 0){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <get_pitch+0x4a>
		return p_enc->pitch;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	e01e      	b.n	800170c <get_pitch+0x88>
	}
	if(p_enc->pitch < 0){
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da08      	bge.n	80016ea <get_pitch+0x66>
		p_enc->pitch += 12;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	330c      	adds	r3, #12
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	801a      	strh	r2, [r3, #0]
		//p_enc->encoder->timer->Instance->CNT = p_enc->pitch;
	}
	if(p_enc->pitch >= 12){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	2b0b      	cmp	r3, #11
 80016f2:	dd08      	ble.n	8001706 <get_pitch+0x82>
		p_enc->pitch -= 12;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3b0c      	subs	r3, #12
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b21a      	sxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	801a      	strh	r2, [r3, #0]
		//p_enc->encoder->timer->Instance->CNT = p_enc->pitch;
	}
	return p_enc->pitch;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	@ 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	@ 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ac      	sub	sp, #176	@ 0xb0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2288      	movs	r2, #136	@ 0x88
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f007 f98b 	bl	8008a98 <memset>
  if(hadc->Instance==ADC1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a27      	ldr	r2, [pc, #156]	@ (8001824 <HAL_ADC_MspInit+0xc8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d146      	bne.n	800181a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001790:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001792:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80017a2:	2308      	movs	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017a6:	2307      	movs	r3, #7
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017ae:	2302      	movs	r3, #2
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fb49 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017c8:	f7ff feda 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d0:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_ADC_MspInit+0xcc>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017fc:	2320      	movs	r3, #32
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001802:	230b      	movs	r3, #11
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <HAL_ADC_MspInit+0xd0>)
 8001816:	f001 fcdd 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	37b0      	adds	r7, #176	@ 0xb0
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	50040000 	.word	0x50040000
 8001828:	40021000 	.word	0x40021000
 800182c:	48000800 	.word	0x48000800

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ac      	sub	sp, #176	@ 0xb0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2288      	movs	r2, #136	@ 0x88
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f007 f921 	bl	8008a98 <memset>
  if(hi2c->Instance==I2C2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_I2C_MspInit+0xb0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d13b      	bne.n	80018d8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001864:	2300      	movs	r3, #0
 8001866:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4618      	mov	r0, r3
 800186e:	f003 faf1 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001878:	f7ff fe82 	bl	8001580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001894:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ae:	2304      	movs	r3, #4
 80018b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018b8:	4619      	mov	r1, r3
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <HAL_I2C_MspInit+0xb8>)
 80018bc:	f001 fc8a 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 80018c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_I2C_MspInit+0xb4>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	37b0      	adds	r7, #176	@ 0xb0
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40005800 	.word	0x40005800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000400 	.word	0x48000400

080018ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_TIM_PWM_MspInit+0x38>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d10b      	bne.n	8001916 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_TIM_PWM_MspInit+0x3c>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_TIM_PWM_MspInit+0x3c>)
 8001904:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001908:	6613      	str	r3, [r2, #96]	@ 0x60
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_TIM_PWM_MspInit+0x3c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3c      	ldr	r2, [pc, #240]	@ (8001a3c <HAL_TIM_IC_MspInit+0x110>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d145      	bne.n	80019da <HAL_TIM_IC_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	4a3b      	ldr	r2, [pc, #236]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6593      	str	r3, [r2, #88]	@ 0x58
 800195a:	4b39      	ldr	r3, [pc, #228]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a35      	ldr	r2, [pc, #212]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a2f      	ldr	r2, [pc, #188]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b4:	f001 fc0e 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <HAL_TIM_IC_MspInit+0x118>)
 80019d4:	f001 fbfe 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019d8:	e02c      	b.n	8001a34 <HAL_TIM_IC_MspInit+0x108>
  else if(htim_ic->Instance==TIM8)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <HAL_TIM_IC_MspInit+0x11c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d127      	bne.n	8001a34 <HAL_TIM_IC_MspInit+0x108>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e8:	4a15      	ldr	r2, [pc, #84]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 80019ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_TIM_IC_MspInit+0x114>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a14:	2340      	movs	r3, #64	@ 0x40
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <HAL_TIM_IC_MspInit+0x120>)
 8001a30:	f001 fbd0 	bl	80031d4 <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3730      	adds	r7, #48	@ 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	40013400 	.word	0x40013400
 8001a4c:	48000800 	.word	0x48000800

08001a50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a32      	ldr	r2, [pc, #200]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d128      	bne.n	8001ac4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a72:	4b32      	ldr	r3, [pc, #200]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a31      	ldr	r2, [pc, #196]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa2:	23c0      	movs	r3, #192	@ 0xc0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4820      	ldr	r0, [pc, #128]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001abe:	f001 fb89 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ac2:	e035      	b.n	8001b30 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d130      	bne.n	8001b30 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f001 fb5a 	bl	80031d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2032      	movs	r0, #50	@ 0x32
 8001b26:	f001 faa0 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b2a:	2032      	movs	r0, #50	@ 0x32
 8001b2c:	f001 fab9 	bl	80030a2 <HAL_NVIC_EnableIRQ>
}
 8001b30:	bf00      	nop
 8001b32:	3730      	adds	r7, #48	@ 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	40000c00 	.word	0x40000c00

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_TIM_Base_MspInit+0x38>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_TIM_Base_MspInit+0x3c>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_TIM_Base_MspInit+0x3c>)
 8001b60:	f043 0310 	orr.w	r3, r3, #16
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_TIM_Base_MspInit+0x3c>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40001000 	.word	0x40001000
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <HAL_TIM_MspPostInit+0x68>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11d      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_TIM_MspPostInit+0x6c>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f001 faf7 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ac      	sub	sp, #176	@ 0xb0
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2288      	movs	r2, #136	@ 0x88
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f006 ff3d 	bl	8008a98 <memset>
  if(huart->Instance==USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_UART_MspInit+0xc0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d143      	bne.n	8001cb0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 f90d 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff fc9e 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	4a16      	ldr	r2, [pc, #88]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <HAL_UART_MspInit+0xc4>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c74:	230c      	movs	r3, #12
 8001c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c9c:	f001 fa9a 	bl	80031d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2026      	movs	r0, #38	@ 0x26
 8001ca6:	f001 f9e0 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001caa:	2026      	movs	r0, #38	@ 0x26
 8001cac:	f001 f9f9 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	37b0      	adds	r7, #176	@ 0xb0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40004400 	.word	0x40004400
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f8e5 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <USART2_IRQHandler+0x10>)
 8001d26:	f005 fbe9 	bl	80074fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000043c 	.word	0x2000043c

08001d34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <TIM5_IRQHandler+0x10>)
 8001d3a:	f004 f9f8 	bl	800612e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000358 	.word	0x20000358

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f006 fe96 	bl	8008aa8 <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20018000 	.word	0x20018000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000510 	.word	0x20000510
 8001db0:	20000660 	.word	0x20000660

08001db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ddc:	f7ff ffea 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de2:	490d      	ldr	r1, [pc, #52]	@ (8001e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <LoopForever+0xe>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e24 <LoopForever+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e06:	f006 fe55 	bl	8008ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0a:	f7fe fe1d 	bl	8000a48 <main>

08001e0e <LoopForever>:

LoopForever:
    b LoopForever
 8001e0e:	e7fe      	b.n	8001e0e <LoopForever>
	  ldr   sp, =_estack    /* Set stack pointer */
 8001e10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001e1c:	080094ec 	.word	0x080094ec
  ldr r2, =_sbss
 8001e20:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001e24:	20000660 	.word	0x20000660

08001e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC1_2_IRQHandler>
	...

08001e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_Init+0x3c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <HAL_Init+0x3c>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e42:	2003      	movs	r0, #3
 8001e44:	f001 f906 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f80f 	bl	8001e6c <HAL_InitTick>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	e001      	b.n	8001e5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5a:	f7ff fc5b 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_InitTick+0x6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_InitTick+0x70>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <HAL_InitTick+0x6c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 f911 	bl	80030be <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d809      	bhi.n	8001ebc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f001 f8db 	bl	800306a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_InitTick+0x74>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e004      	b.n	8001ecc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e001      	b.n	8001ecc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000118 	.word	0x20000118
 8001edc:	20000110 	.word	0x20000110
 8001ee0:	20000114 	.word	0x20000114

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000118 	.word	0x20000118
 8001f08:	20000514 	.word	0x20000514

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000514 	.word	0x20000514

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000118 	.word	0x20000118

08001f6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3360      	adds	r3, #96	@ 0x60
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <LL_ADC_SetOffset+0x44>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	4313      	orrs	r3, r2
 8002004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	03fff000 	.word	0x03fff000

0800201c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3360      	adds	r3, #96	@ 0x60
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3360      	adds	r3, #96	@ 0x60
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3330      	adds	r3, #48	@ 0x30
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	211f      	movs	r1, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 011f 	and.w	r1, r3, #31
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3314      	adds	r3, #20
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0e5b      	lsrs	r3, r3, #25
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	0d1b      	lsrs	r3, r3, #20
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2107      	movs	r1, #7
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0d1b      	lsrs	r3, r3, #20
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0318 	and.w	r3, r3, #24
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002150:	40d9      	lsrs	r1, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	400b      	ands	r3, r1
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	431a      	orrs	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	0007ffff 	.word	0x0007ffff

08002174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6093      	str	r3, [r2, #8]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fc:	d101      	bne.n	8002202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <LL_ADC_IsEnabled+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_ADC_IsEnabled+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b04      	cmp	r3, #4
 8002248:	d101      	bne.n	800224e <LL_ADC_REG_IsConversionOngoing+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d101      	bne.n	8002274 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e130      	b.n	8002500 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fa55 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff67 	bl	8002198 <LL_ADC_IsDeepPowerDownEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff4d 	bl	8002174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff82 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff66 	bl	80021c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f4:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <HAL_ADC_Init+0x284>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	4a84      	ldr	r2, [pc, #528]	@ (800250c <HAL_ADC_Init+0x288>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002308:	e002      	b.n	8002310 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff64 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10d      	bne.n	8002342 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff75 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 800234c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 80c9 	bne.w	80024ee <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80c5 	bne.w	80024ee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff49 	bl	8002210 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002384:	4862      	ldr	r0, [pc, #392]	@ (8002510 <HAL_ADC_Init+0x28c>)
 8002386:	f7ff ff43 	bl	8002210 <LL_ADC_IsEnabled>
 800238a:	4604      	mov	r4, r0
 800238c:	4861      	ldr	r0, [pc, #388]	@ (8002514 <HAL_ADC_Init+0x290>)
 800238e:	f7ff ff3f 	bl	8002210 <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	431c      	orrs	r4, r3
 8002396:	4860      	ldr	r0, [pc, #384]	@ (8002518 <HAL_ADC_Init+0x294>)
 8002398:	f7ff ff3a 	bl	8002210 <LL_ADC_IsEnabled>
 800239c:	4603      	mov	r3, r0
 800239e:	4323      	orrs	r3, r4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	485c      	ldr	r0, [pc, #368]	@ (800251c <HAL_ADC_Init+0x298>)
 80023ac:	f7ff fdde 	bl	8001f6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7e5b      	ldrb	r3, [r3, #25]
 80023b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	045b      	lsls	r3, r3, #17
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	4b44      	ldr	r3, [pc, #272]	@ (8002520 <HAL_ADC_Init+0x29c>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff1b 	bl	800225c <LL_ADC_INJ_IsConversionOngoing>
 8002426:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d13d      	bne.n	80024aa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d13a      	bne.n	80024aa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002438:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002440:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002464:	2b01      	cmp	r3, #1
 8002466:	d118      	bne.n	800249a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002484:	4311      	orrs	r1, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800248a:	430a      	orrs	r2, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	e007      	b.n	80024aa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10c      	bne.n	80024cc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	f023 010f 	bic.w	r1, r3, #15
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ca:	e007      	b.n	80024dc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 020f 	bic.w	r2, r2, #15
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ec:	e007      	b.n	80024fe <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3724      	adds	r7, #36	@ 0x24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	20000110 	.word	0x20000110
 800250c:	053e2d63 	.word	0x053e2d63
 8002510:	50040000 	.word	0x50040000
 8002514:	50040100 	.word	0x50040100
 8002518:	50040200 	.word	0x50040200
 800251c:	50040300 	.word	0x50040300
 8002520:	fff0c007 	.word	0xfff0c007

08002524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0b6      	sub	sp, #216	@ 0xd8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x22>
 8002542:	2302      	movs	r3, #2
 8002544:	e3c9      	b.n	8002cda <HAL_ADC_ConfigChannel+0x7b6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fe6f 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 83aa 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d824      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	3b02      	subs	r3, #2
 8002576:	2b03      	cmp	r3, #3
 8002578:	d81b      	bhi.n	80025b2 <HAL_ADC_ConfigChannel+0x8e>
 800257a:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <HAL_ADC_ConfigChannel+0x5c>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002599 	.word	0x08002599
 8002588:	080025a1 	.word	0x080025a1
 800258c:	080025a9 	.word	0x080025a9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002590:	230c      	movs	r3, #12
 8002592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002596:	e010      	b.n	80025ba <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002598:	2312      	movs	r3, #18
 800259a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800259e:	e00c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025a0:	2318      	movs	r3, #24
 80025a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025a6:	e008      	b.n	80025ba <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025b2:	2306      	movs	r3, #6
 80025b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025b8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025c8:	f7ff fd59 	bl	800207e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fe30 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 80025d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe3c 	bl	800225c <LL_ADC_INJ_IsConversionOngoing>
 80025e4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 81a4 	bne.w	800293a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 819f 	bne.w	800293a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	461a      	mov	r2, r3
 800260a:	f7ff fd64 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00a      	beq.n	8002646 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6919      	ldr	r1, [r3, #16]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002640:	f7ff fcc8 	bl	8001fd4 <LL_ADC_SetOffset>
 8002644:	e179      	b.n	800293a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fce5 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x14e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fcda 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	e01e      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x18c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fccf 	bl	800201c <LL_ADC_GetOffsetChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002698:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e004      	b.n	80026ae <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80026a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1a4>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	e018      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1d6>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e004      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80026f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d106      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc9e 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fc82 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x214>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fc77 	bl	800201c <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	e01e      	b.n	8002776 <HAL_ADC_ConfigChannel+0x252>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fc6c 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002756:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800275a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800275e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800276a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x26a>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x29c>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80027b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fc3b 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fc1f 	bl	800201c <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x2da>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fc14 	bl	800201c <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x318>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fc09 	bl	800201c <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002820:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x330>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e014      	b.n	800287e <HAL_ADC_ConfigChannel+0x35a>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287e:	429a      	cmp	r2, r3
 8002880:	d106      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fbdc 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2103      	movs	r1, #3
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fbc0 	bl	800201c <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x398>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2103      	movs	r1, #3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fbb5 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x3c8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2103      	movs	r1, #3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fbaa 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028d6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e003      	b.n	80028ea <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80028e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x3e0>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	e011      	b.n	8002928 <HAL_ADC_ConfigChannel+0x404>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002914:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002928:	429a      	cmp	r2, r3
 800292a:	d106      	bne.n	800293a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	2103      	movs	r1, #3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb87 	bl	8002048 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fc66 	bl	8002210 <LL_ADC_IsEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 8140 	bne.w	8002bcc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	461a      	mov	r2, r3
 800295a:	f7ff fbe7 	bl	800212c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4a8f      	ldr	r2, [pc, #572]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x67c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	f040 8131 	bne.w	8002bcc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10b      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x46e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2b09      	cmp	r3, #9
 8002988:	bf94      	ite	ls
 800298a:	2301      	movls	r3, #1
 800298c:	2300      	movhi	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e019      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x4a2>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80029ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2b09      	cmp	r3, #9
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d079      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x4c2>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	3301      	adds	r3, #1
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029e4:	e015      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x4ee>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e003      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	069b      	lsls	r3, r3, #26
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x50e>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	e017      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x53e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a42:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	ea42 0103 	orr.w	r1, r2, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x564>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 021f 	and.w	r2, r3, #31
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	051b      	lsls	r3, r3, #20
 8002a86:	e018      	b.n	8002aba <HAL_ADC_ConfigChannel+0x596>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aba:	430b      	orrs	r3, r1
 8002abc:	e081      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x5b6>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	0e9b      	lsrs	r3, r3, #26
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	069b      	lsls	r3, r3, #26
 8002ad4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ad8:	e015      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5e2>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e003      	b.n	8002afe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x602>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	e017      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x632>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	61bb      	str	r3, [r7, #24]
  return result;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	ea42 0103 	orr.w	r1, r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x65e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	3b1e      	subs	r3, #30
 8002b7a:	051b      	lsls	r3, r3, #20
 8002b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	e01e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x69c>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
  return result;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e006      	b.n	8002bac <HAL_ADC_ConfigChannel+0x688>
 8002b9e:	bf00      	nop
 8002ba0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	051b      	lsls	r3, r3, #20
 8002bbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7ff fa85 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b44      	ldr	r3, [pc, #272]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d07a      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd8:	4843      	ldr	r0, [pc, #268]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bda:	f7ff f9ed 	bl	8001fb8 <LL_ADC_GetCommonPathInternalCh>
 8002bde:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a41      	ldr	r2, [pc, #260]	@ (8002cec <HAL_ADC_ConfigChannel+0x7c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d12c      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d126      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x6e8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d15d      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c14:	4619      	mov	r1, r3
 8002c16:	4834      	ldr	r0, [pc, #208]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c18:	f7ff f9bb 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	4a36      	ldr	r2, [pc, #216]	@ (8002cfc <HAL_ADC_ConfigChannel+0x7d8>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c36:	e002      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c44:	e040      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d118      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d112      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x74c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d12d      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	4619      	mov	r1, r3
 8002c7a:	481b      	ldr	r0, [pc, #108]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c7c:	f7ff f989 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c80:	e024      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d120      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d115      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ca6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002caa:	4619      	mov	r1, r3
 8002cac:	480e      	ldr	r0, [pc, #56]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cae:	f7ff f970 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
 8002cb2:	e00c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	bf00      	nop
 8002cca:	e000      	b.n	8002cce <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ccc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	37d8      	adds	r7, #216	@ 0xd8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	80080000 	.word	0x80080000
 8002ce8:	50040300 	.word	0x50040300
 8002cec:	c7520000 	.word	0xc7520000
 8002cf0:	50040000 	.word	0x50040000
 8002cf4:	50040200 	.word	0x50040200
 8002cf8:	20000110 	.word	0x20000110
 8002cfc:	053e2d63 	.word	0x053e2d63
 8002d00:	cb840000 	.word	0xcb840000
 8002d04:	80000001 	.word	0x80000001

08002d08 <LL_ADC_IsEnabled>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <LL_ADC_IsEnabled+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_ADC_IsEnabled+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d101      	bne.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b09f      	sub	sp, #124	@ 0x7c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e093      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a47      	ldr	r2, [pc, #284]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	e001      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e072      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ffb9 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 8002dbc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffb3 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d154      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d151      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02c      	beq.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	430b      	orrs	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfc:	4829      	ldr	r0, [pc, #164]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dfe:	f7ff ff83 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e02:	4604      	mov	r4, r0
 8002e04:	4828      	ldr	r0, [pc, #160]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e06:	f7ff ff7f 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	431c      	orrs	r4, r3
 8002e0e:	4828      	ldr	r0, [pc, #160]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e10:	f7ff ff7a 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d137      	bne.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e24:	f023 030f 	bic.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	6811      	ldr	r1, [r2, #0]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e38:	e028      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e46:	4817      	ldr	r0, [pc, #92]	@ (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e48:	f7ff ff5e 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4816      	ldr	r0, [pc, #88]	@ (8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e50:	f7ff ff5a 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	431c      	orrs	r4, r3
 8002e58:	4815      	ldr	r0, [pc, #84]	@ (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e5a:	f7ff ff55 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4323      	orrs	r3, r4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d112      	bne.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e6e:	f023 030f 	bic.w	r3, r3, #15
 8002e72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e76:	e009      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e8a:	e000      	b.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	377c      	adds	r7, #124	@ 0x7c
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	50040000 	.word	0x50040000
 8002ea8:	50040100 	.word	0x50040100
 8002eac:	50040300 	.word	0x50040300
 8002eb0:	50040200 	.word	0x50040200

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4907      	ldr	r1, [pc, #28]	@ (8002f50 <__NVIC_EnableIRQ+0x38>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	@ (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	@ 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003020:	d301      	bcc.n	8003026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003022:	2301      	movs	r3, #1
 8003024:	e00f      	b.n	8003046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <SysTick_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302e:	210f      	movs	r1, #15
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f7ff ff8e 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <SysTick_Config+0x40>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <SysTick_Config+0x40>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff29 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff3e 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff8e 	bl	8002fa8 <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff5d 	bl	8002f54 <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff31 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa2 	bl	8003010 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e022      	b.n	8003146 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 020e 	bic.w	r2, r2, #14
 800310e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	f003 021c 	and.w	r2, r3, #28
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d005      	beq.n	8003176 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2204      	movs	r2, #4
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e029      	b.n	80031ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 020e 	bic.w	r2, r2, #14
 8003184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f003 021c 	and.w	r2, r3, #28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    }
  }
  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	e17f      	b.n	80034e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8171 	beq.w	80034de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d005      	beq.n	8003214 <HAL_GPIO_Init+0x40>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d130      	bne.n	8003276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800324a:	2201      	movs	r2, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0201 	and.w	r2, r3, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b03      	cmp	r3, #3
 8003280:	d118      	bne.n	80032b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d017      	beq.n	80032f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d123      	bne.n	8003344 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	6939      	ldr	r1, [r7, #16]
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80ac 	beq.w	80034de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b5f      	ldr	r3, [pc, #380]	@ (8003504 <HAL_GPIO_Init+0x330>)
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	4a5e      	ldr	r2, [pc, #376]	@ (8003504 <HAL_GPIO_Init+0x330>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6613      	str	r3, [r2, #96]	@ 0x60
 8003392:	4b5c      	ldr	r3, [pc, #368]	@ (8003504 <HAL_GPIO_Init+0x330>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800339e:	4a5a      	ldr	r2, [pc, #360]	@ (8003508 <HAL_GPIO_Init+0x334>)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c8:	d025      	beq.n	8003416 <HAL_GPIO_Init+0x242>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	@ (800350c <HAL_GPIO_Init+0x338>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <HAL_GPIO_Init+0x23e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003510 <HAL_GPIO_Init+0x33c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_Init+0x23a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003514 <HAL_GPIO_Init+0x340>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_Init+0x236>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003518 <HAL_GPIO_Init+0x344>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_Init+0x232>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4b      	ldr	r2, [pc, #300]	@ (800351c <HAL_GPIO_Init+0x348>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_Init+0x22e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003520 <HAL_GPIO_Init+0x34c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_Init+0x22a>
 80033fa:	2306      	movs	r3, #6
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x244>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x244>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x244>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x244>
 8003416:	2300      	movs	r3, #0
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003428:	4937      	ldr	r1, [pc, #220]	@ (8003508 <HAL_GPIO_Init+0x334>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345a:	4a32      	ldr	r2, [pc, #200]	@ (8003524 <HAL_GPIO_Init+0x350>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003460:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003484:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <HAL_GPIO_Init+0x350>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800348a:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <HAL_GPIO_Init+0x350>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d8:	4a12      	ldr	r2, [pc, #72]	@ (8003524 <HAL_GPIO_Init+0x350>)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f ae78 	bne.w	80031e4 <HAL_GPIO_Init+0x10>
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40010000 	.word	0x40010000
 800350c:	48000400 	.word	0x48000400
 8003510:	48000800 	.word	0x48000800
 8003514:	48000c00 	.word	0x48000c00
 8003518:	48001000 	.word	0x48001000
 800351c:	48001400 	.word	0x48001400
 8003520:	48001800 	.word	0x48001800
 8003524:	40010400 	.word	0x40010400

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003544:	e002      	b.n	800354c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e08d      	b.n	8003686 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f956 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e006      	b.n	80035e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d108      	bne.n	80035fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e007      	b.n	800360a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800361c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800362c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 80f9 	bne.w	80038aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x34>
 80036be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0ed      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Mem_Write+0x4e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0e6      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036e6:	f7fe fc11 	bl	8001f0c <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2319      	movs	r3, #25
 80036f2:	2201      	movs	r2, #1
 80036f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fac3 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d1      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2221      	movs	r2, #33	@ 0x21
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2240      	movs	r2, #64	@ 0x40
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003730:	88f8      	ldrh	r0, [r7, #6]
 8003732:	893a      	ldrh	r2, [r7, #8]
 8003734:	8979      	ldrh	r1, [r7, #10]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4603      	mov	r3, r0
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f9d3 	bl	8003aec <I2C_RequestMemoryWrite>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0a9      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2bff      	cmp	r3, #255	@ 0xff
 8003760:	d90e      	bls.n	8003780 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	@ 0xff
 8003766:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fc3d 	bl	8003ff8 <I2C_TransferConfig>
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fc2c 	bl	8003ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fabc 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e07b      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d034      	beq.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d130      	bne.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fa3f 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04d      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2bff      	cmp	r3, #255	@ 0xff
 8003818:	d90e      	bls.n	8003838 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	@ 0xff
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	b2da      	uxtb	r2, r3
 8003826:	8979      	ldrh	r1, [r7, #10]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fbe1 	bl	8003ff8 <I2C_TransferConfig>
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fbd0 	bl	8003ff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d19e      	bne.n	80037a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 faa2 	bl	8003db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e01a      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2220      	movs	r2, #32
 800387c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_I2C_Mem_Write+0x224>)
 800388a:	400b      	ands	r3, r1
 800388c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	fe00e800 	.word	0xfe00e800

080038b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	f040 80fd 	bne.w	8003ada <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_I2C_Mem_Read+0x34>
 80038e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0f1      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Mem_Read+0x4e>
 8003902:	2302      	movs	r3, #2
 8003904:	e0ea      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800390e:	f7fe fafd 	bl	8001f0c <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2319      	movs	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9af 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0d5      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2222      	movs	r2, #34	@ 0x22
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	@ 0x40
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003958:	88f8      	ldrh	r0, [r7, #6]
 800395a:	893a      	ldrh	r2, [r7, #8]
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	4603      	mov	r3, r0
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f913 	bl	8003b94 <I2C_RequestMemoryRead>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0ad      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2bff      	cmp	r3, #255	@ 0xff
 8003988:	d90e      	bls.n	80039a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	@ 0xff
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	b2da      	uxtb	r2, r3
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	4b52      	ldr	r3, [pc, #328]	@ (8003ae4 <HAL_I2C_Mem_Read+0x22c>)
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fb29 	bl	8003ff8 <I2C_TransferConfig>
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae4 <HAL_I2C_Mem_Read+0x22c>)
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fb18 	bl	8003ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2200      	movs	r2, #0
 80039d0:	2104      	movs	r1, #4
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f956 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07c      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d034      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d130      	bne.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	@ 0x80
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f927 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e04d      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2bff      	cmp	r3, #255	@ 0xff
 8003a48:	d90e      	bls.n	8003a68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fac9 	bl	8003ff8 <I2C_TransferConfig>
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fab8 	bl	8003ff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d19a      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f98a 	bl	8003db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01a      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_I2C_Mem_Read+0x230>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	80002400 	.word	0x80002400
 8003ae8:	fe00e800 	.word	0xfe00e800

08003aec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <I2C_RequestMemoryWrite+0xa4>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa6f 	bl	8003ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	69b9      	ldr	r1, [r7, #24]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8ff 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02c      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b34:	893b      	ldrh	r3, [r7, #8]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b3e:	e015      	b.n	8003b6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f8e5 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e012      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2180      	movs	r1, #128	@ 0x80
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f884 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	80002000 	.word	0x80002000

08003b94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <I2C_RequestMemoryRead+0xa4>)
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa1c 	bl	8003ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	69b9      	ldr	r1, [r7, #24]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8ac 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e02c      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003be4:	e015      	b.n	8003c12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003be6:	893b      	ldrh	r3, [r7, #8]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f892 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e012      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2140      	movs	r1, #64	@ 0x40
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f831 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	80002000 	.word	0x80002000

08003c3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d103      	bne.n	8003c5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d007      	beq.n	8003c78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	619a      	str	r2, [r3, #24]
  }
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c94:	e031      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d02d      	beq.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe f935 	bl	8001f0c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d122      	bne.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d113      	bne.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00f      	b.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0be      	beq.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d2e:	e033      	b.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f87f 	bl	8003e38 <I2C_IsErrorOccurred>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e031      	b.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d025      	beq.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4c:	f7fe f8de 	bl	8001f0c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11a      	bne.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d013      	beq.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e007      	b.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d1c4      	bne.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dbc:	e02f      	b.n	8003e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f838 	bl	8003e38 <I2C_IsErrorOccurred>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e02d      	b.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe f89b 	bl	8001f0c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11a      	bne.n	8003e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d013      	beq.n	8003e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e007      	b.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d1c8      	bne.n	8003dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	@ 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d068      	beq.n	8003f36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e6c:	e049      	b.n	8003f02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d045      	beq.n	8003f02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fe f849 	bl	8001f0c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_IsErrorOccurred+0x54>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13a      	bne.n	8003f02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eae:	d121      	bne.n	8003ef4 <I2C_IsErrorOccurred+0xbc>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb6:	d01d      	beq.n	8003ef4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d01a      	beq.n	8003ef4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ecc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ece:	f7fe f81d 	bl	8001f0c <HAL_GetTick>
 8003ed2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed4:	e00e      	b.n	8003ef4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ed6:	f7fe f819 	bl	8001f0c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b19      	cmp	r3, #25
 8003ee2:	d907      	bls.n	8003ef4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f043 0320 	orr.w	r3, r3, #32
 8003eea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ef2:	e006      	b.n	8003f02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d1e9      	bne.n	8003ed6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d003      	beq.n	8003f18 <I2C_IsErrorOccurred+0xe0>
 8003f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0aa      	beq.n	8003e6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2220      	movs	r2, #32
 8003f26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01c      	beq.n	8003fe6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff fe45 	bl	8003c3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <I2C_IsErrorOccurred+0x1bc>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3728      	adds	r7, #40	@ 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	fe00e800 	.word	0xfe00e800

08003ff8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	817b      	strh	r3, [r7, #10]
 8004006:	4613      	mov	r3, r2
 8004008:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004010:	7a7b      	ldrb	r3, [r7, #9]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004018:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	4313      	orrs	r3, r2
 8004022:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004026:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	0d5b      	lsrs	r3, r3, #21
 8004032:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <I2C_TransferConfig+0x60>)
 8004038:	430b      	orrs	r3, r1
 800403a:	43db      	mvns	r3, r3
 800403c:	ea02 0103 	and.w	r1, r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	03ff63ff 	.word	0x03ff63ff

0800405c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d138      	bne.n	80040e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800407c:	2302      	movs	r3, #2
 800407e:	e032      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b20      	cmp	r3, #32
 8004106:	d139      	bne.n	800417c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004112:	2302      	movs	r3, #2
 8004114:	e033      	b.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2224      	movs	r2, #36	@ 0x24
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004190:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b6:	d130      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b8:	4b23      	ldr	r3, [pc, #140]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c4:	d038      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c6:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2232      	movs	r2, #50	@ 0x32
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	e002      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f4:	4b14      	ldr	r3, [pc, #80]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004200:	d102      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f2      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d110      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004226:	d007      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004228:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004230:	4a05      	ldr	r2, [pc, #20]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000
 800424c:	20000110 	.word	0x20000110
 8004250:	431bde83 	.word	0x431bde83

08004254 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e3ca      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4b97      	ldr	r3, [pc, #604]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4b94      	ldr	r3, [pc, #592]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80e4 	beq.w	8004450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f040 808b 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8087 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429e:	4b89      	ldr	r3, [pc, #548]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e3a2      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	4b82      	ldr	r3, [pc, #520]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_RCC_OscConfig+0x7c>
 80042c6:	4b7f      	ldr	r3, [pc, #508]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ce:	e005      	b.n	80042dc <HAL_RCC_OscConfig+0x88>
 80042d0:	4b7c      	ldr	r3, [pc, #496]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d223      	bcs.n	8004328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd55 	bl	8004d94 <RCC_SetFlashLatencyFromMSIRange>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e383      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	4b73      	ldr	r3, [pc, #460]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a72      	ldr	r2, [pc, #456]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b70      	ldr	r3, [pc, #448]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	496d      	ldr	r1, [pc, #436]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	4b6c      	ldr	r3, [pc, #432]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4968      	ldr	r1, [pc, #416]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e025      	b.n	8004374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004328:	4b66      	ldr	r3, [pc, #408]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b63      	ldr	r3, [pc, #396]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4960      	ldr	r1, [pc, #384]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004346:	4b5f      	ldr	r3, [pc, #380]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	495b      	ldr	r1, [pc, #364]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd15 	bl	8004d94 <RCC_SetFlashLatencyFromMSIRange>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e343      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004374:	f000 fc4a 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b52      	ldr	r3, [pc, #328]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4950      	ldr	r1, [pc, #320]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	4a4e      	ldr	r2, [pc, #312]	@ (80044cc <HAL_RCC_OscConfig+0x278>)
 8004392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004394:	4b4e      	ldr	r3, [pc, #312]	@ (80044d0 <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fd67 	bl	8001e6c <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d052      	beq.n	800444e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	e327      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b4:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c0:	f7fd fda4 	bl	8001f0c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c8:	f7fd fda0 	bl	8001f0c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e310      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	4b3a      	ldr	r3, [pc, #232]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b34      	ldr	r3, [pc, #208]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4931      	ldr	r1, [pc, #196]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	4b2f      	ldr	r3, [pc, #188]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	492c      	ldr	r1, [pc, #176]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	e01a      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441a:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004426:	f7fd fd71 	bl	8001f0c <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442e:	f7fd fd6d 	bl	8001f0c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e2dd      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x1da>
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d074      	beq.n	8004546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x21a>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d10e      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d064      	beq.n	8004544 <HAL_RCC_OscConfig+0x2f0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d160      	bne.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e2ba      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x24a>
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0b      	ldr	r2, [pc, #44]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e026      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a6:	d115      	bne.n	80044d4 <HAL_RCC_OscConfig+0x280>
 80044a8:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a05      	ldr	r2, [pc, #20]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a02      	ldr	r2, [pc, #8]	@ (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e014      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	08009460 	.word	0x08009460
 80044cc:	20000110 	.word	0x20000110
 80044d0:	20000114 	.word	0x20000114
 80044d4:	4ba0      	ldr	r3, [pc, #640]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b9d      	ldr	r3, [pc, #628]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a9c      	ldr	r2, [pc, #624]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fd0a 	bl	8001f0c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fd06 	bl	8001f0c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e276      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fcf6 	bl	8001f0c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fcf2 	bl	8001f0c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e262      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4b88      	ldr	r3, [pc, #544]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x310>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b7c      	ldr	r3, [pc, #496]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x328>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e23f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b76      	ldr	r3, [pc, #472]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4973      	ldr	r1, [pc, #460]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e040      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b6f      	ldr	r3, [pc, #444]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6e      	ldr	r2, [pc, #440]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fcb1 	bl	8001f0c <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd fcad 	bl	8001f0c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e21d      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b62      	ldr	r3, [pc, #392]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	495f      	ldr	r1, [pc, #380]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fd fc8d 	bl	8001f0c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fd fc89 	bl	8001f0c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1f9      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004628:	4b4b      	ldr	r3, [pc, #300]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800462e:	4a4a      	ldr	r2, [pc, #296]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fc68 	bl	8001f0c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd fc64 	bl	8001f0c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1d4      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	4b41      	ldr	r3, [pc, #260]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x3ec>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b3d      	ldr	r3, [pc, #244]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004668:	4a3b      	ldr	r2, [pc, #236]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd fc4b 	bl	8001f0c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fd fc47 	bl	8001f0c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1b7      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	4b32      	ldr	r3, [pc, #200]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046bc:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c4:	4b24      	ldr	r3, [pc, #144]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	4b21      	ldr	r3, [pc, #132]	@ (800475c <HAL_RCC_OscConfig+0x508>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <HAL_RCC_OscConfig+0x508>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	@ (800475c <HAL_RCC_OscConfig+0x508>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7fd fc0e 	bl	8001f0c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fd fc0a 	bl	8001f0c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e17a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <HAL_RCC_OscConfig+0x508>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_RCC_OscConfig+0x4d8>
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800472a:	e029      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d115      	bne.n	8004760 <HAL_RCC_OscConfig+0x50c>
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474a:	4a03      	ldr	r2, [pc, #12]	@ (8004758 <HAL_RCC_OscConfig+0x504>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004754:	e014      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	4b9c      	ldr	r3, [pc, #624]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	4a9b      	ldr	r2, [pc, #620]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004770:	4b98      	ldr	r3, [pc, #608]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	4a97      	ldr	r2, [pc, #604]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d016      	beq.n	80047b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fbc0 	bl	8001f0c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd fbbc 	bl	8001f0c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e12a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	4b8b      	ldr	r3, [pc, #556]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ed      	beq.n	8004790 <HAL_RCC_OscConfig+0x53c>
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fd fba9 	bl	8001f0c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fd fba5 	bl	8001f0c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e113      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	4b7f      	ldr	r3, [pc, #508]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ed      	bne.n	80047be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b7a      	ldr	r3, [pc, #488]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	4a79      	ldr	r2, [pc, #484]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80fe 	beq.w	80049fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 80d0 	bne.w	80049a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004808:	4b72      	ldr	r3, [pc, #456]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d130      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d127      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11f      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004848:	2a07      	cmp	r2, #7
 800484a:	bf14      	ite	ne
 800484c:	2201      	movne	r2, #1
 800484e:	2200      	moveq	r2, #0
 8004850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d109      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d06e      	beq.n	800495c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d069      	beq.n	8004958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004884:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004890:	4b50      	ldr	r3, [pc, #320]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0ad      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048a0:	4b4c      	ldr	r3, [pc, #304]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a4b      	ldr	r2, [pc, #300]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048ac:	f7fd fb2e 	bl	8001f0c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fd fb2a 	bl	8001f0c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e09a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	4b43      	ldr	r3, [pc, #268]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d2:	4b40      	ldr	r3, [pc, #256]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b40      	ldr	r3, [pc, #256]	@ (80049d8 <HAL_RCC_OscConfig+0x784>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048ec:	0212      	lsls	r2, r2, #8
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048f4:	0852      	lsrs	r2, r2, #1
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0552      	lsls	r2, r2, #21
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0652      	lsls	r2, r2, #25
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800490c:	0912      	lsrs	r2, r2, #4
 800490e:	0452      	lsls	r2, r2, #17
 8004910:	430a      	orrs	r2, r1
 8004912:	4930      	ldr	r1, [pc, #192]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004918:	4b2e      	ldr	r3, [pc, #184]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2d      	ldr	r2, [pc, #180]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a2a      	ldr	r2, [pc, #168]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004930:	f7fd faec 	bl	8001f0c <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fd fae8 	bl	8001f0c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e058      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b22      	ldr	r3, [pc, #136]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004956:	e050      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d148      	bne.n	80049fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004974:	4b17      	ldr	r3, [pc, #92]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a16      	ldr	r2, [pc, #88]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800497e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004980:	f7fd fac4 	bl	8001f0c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fac0 	bl	8001f0c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e030      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x734>
 80049a6:	e028      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d023      	beq.n	80049f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a08      	ldr	r2, [pc, #32]	@ (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fd faa7 	bl	8001f0c <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	e00c      	b.n	80049dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fd faa3 	bl	8001f0c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d905      	bls.n	80049dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e013      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ec      	bne.n	80049c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	4905      	ldr	r1, [pc, #20]	@ (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_RCC_OscConfig+0x7b4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
 80049f4:	e001      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	feeefffc 	.word	0xfeeefffc

08004a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0e7      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b75      	ldr	r3, [pc, #468]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d910      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b72      	ldr	r3, [pc, #456]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4970      	ldr	r1, [pc, #448]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cf      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b66      	ldr	r3, [pc, #408]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d908      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b63      	ldr	r3, [pc, #396]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4960      	ldr	r1, [pc, #384]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d04c      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	4b5a      	ldr	r3, [pc, #360]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0a6      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aaa:	4b54      	ldr	r3, [pc, #336]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e09a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e08e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e086      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b46      	ldr	r3, [pc, #280]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4943      	ldr	r1, [pc, #268]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fd fa0a 	bl	8001f0c <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd fa06 	bl	8001f0c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e06e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b3a      	ldr	r3, [pc, #232]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4b31      	ldr	r3, [pc, #196]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d208      	bcs.n	8004b52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	492b      	ldr	r1, [pc, #172]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b52:	4b29      	ldr	r3, [pc, #164]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d210      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 0207 	bic.w	r2, r3, #7
 8004b68:	4923      	ldr	r1, [pc, #140]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b70:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e036      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4918      	ldr	r1, [pc, #96]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bac:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4910      	ldr	r1, [pc, #64]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bc0:	f000 f824 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	490b      	ldr	r1, [pc, #44]	@ (8004c00 <HAL_RCC_ClockConfig+0x1f4>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1f8>)
 8004bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1fc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd f941 	bl	8001e6c <HAL_InitTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08009460 	.word	0x08009460
 8004c04:	20000110 	.word	0x20000110
 8004c08:	20000114 	.word	0x20000114

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	@ 0x24
 8004c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	4b3b      	ldr	r3, [pc, #236]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d121      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d11e      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c40:	4b34      	ldr	r3, [pc, #208]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c4c:	4b31      	ldr	r3, [pc, #196]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c68:	4a2b      	ldr	r2, [pc, #172]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e004      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c90:	4b23      	ldr	r3, [pc, #140]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d134      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8004cb0:	e005      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb4:	617b      	str	r3, [r7, #20]
      break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb8:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cba:	617b      	str	r3, [r7, #20]
      break;
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	617b      	str	r3, [r7, #20]
      break;
 8004cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	0e5b      	lsrs	r3, r3, #25
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d04:	69bb      	ldr	r3, [r7, #24]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	@ 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08009478 	.word	0x08009478
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000110 	.word	0x20000110

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	08009470 	.word	0x08009470

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d6c:	f7ff ffda 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	@ (8004d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	08009470 	.word	0x08009470

08004d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004da0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dac:	f7ff f9ee 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004db0:	6178      	str	r0, [r7, #20]
 8004db2:	e014      	b.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a24      	ldr	r2, [pc, #144]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc0:	4b22      	ldr	r3, [pc, #136]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dcc:	f7ff f9de 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de4:	d10b      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d919      	bls.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2ba0      	cmp	r3, #160	@ 0xa0
 8004df0:	d902      	bls.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df2:	2302      	movs	r3, #2
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e013      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df8:	2301      	movs	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e010      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b80      	cmp	r3, #128	@ 0x80
 8004e02:	d902      	bls.n	8004e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e04:	2303      	movs	r3, #3
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	e00a      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b80      	cmp	r3, #128	@ 0x80
 8004e0e:	d102      	bne.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e10:	2302      	movs	r3, #2
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	e004      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b70      	cmp	r3, #112	@ 0x70
 8004e1a:	d101      	bne.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0207 	bic.w	r2, r3, #7
 8004e28:	4909      	ldr	r1, [pc, #36]	@ (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e30:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40022000 	.word	0x40022000

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e60:	2300      	movs	r3, #0
 8004e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d041      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e78:	d02a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e7e:	d824      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e84:	d008      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e8a:	d81e      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e96:	e018      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e98:	4b86      	ldr	r3, [pc, #536]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a85      	ldr	r2, [pc, #532]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea4:	e015      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fabb 	bl	8005428 <RCCEx_PLLSAI1_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb6:	e00c      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3320      	adds	r3, #32
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fba6 	bl	8005610 <RCCEx_PLLSAI2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec8:	e003      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed8:	4b76      	ldr	r3, [pc, #472]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ee6:	4973      	ldr	r1, [pc, #460]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004eee:	e001      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d041      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f08:	d02a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f0e:	d824      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f1a:	d81e      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f24:	d010      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f26:	e018      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f28:	4b62      	ldr	r3, [pc, #392]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f34:	e015      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fa73 	bl	8005428 <RCCEx_PLLSAI1_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb5e 	bl	8005610 <RCCEx_PLLSAI2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f68:	4b52      	ldr	r3, [pc, #328]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f76:	494f      	ldr	r1, [pc, #316]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a0 	beq.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f96:	4b47      	ldr	r3, [pc, #284]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b41      	ldr	r3, [pc, #260]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	4a40      	ldr	r2, [pc, #256]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd4:	f7fc ff9a 	bl	8001f0c <HAL_GetTick>
 8004fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fda:	e009      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fdc:	f7fc ff96 	bl	8001f0c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	74fb      	strb	r3, [r7, #19]
        break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff0:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d15c      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005002:	4b2c      	ldr	r3, [pc, #176]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005020:	4b24      	ldr	r3, [pc, #144]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005032:	4a20      	ldr	r2, [pc, #128]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b1d      	ldr	r3, [pc, #116]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005042:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800504c:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc ff55 	bl	8001f0c <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	e00b      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fc ff51 	bl	8001f0c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d902      	bls.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	74fb      	strb	r3, [r7, #19]
            break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ec      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005092:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a2:	4904      	ldr	r1, [pc, #16]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c0:	7c7b      	ldrb	r3, [r7, #17]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ca:	4a9d      	ldr	r2, [pc, #628]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050de:	4b98      	ldr	r3, [pc, #608]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f023 0203 	bic.w	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	4994      	ldr	r1, [pc, #592]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005100:	4b8f      	ldr	r3, [pc, #572]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 020c 	bic.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510e:	498c      	ldr	r1, [pc, #560]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005122:	4b87      	ldr	r3, [pc, #540]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	4983      	ldr	r1, [pc, #524]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005144:	4b7e      	ldr	r3, [pc, #504]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	497b      	ldr	r1, [pc, #492]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005166:	4b76      	ldr	r3, [pc, #472]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005174:	4972      	ldr	r1, [pc, #456]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005188:	4b6d      	ldr	r3, [pc, #436]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	496a      	ldr	r1, [pc, #424]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051aa:	4b65      	ldr	r3, [pc, #404]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	4961      	ldr	r1, [pc, #388]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051da:	4959      	ldr	r1, [pc, #356]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ee:	4b54      	ldr	r3, [pc, #336]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fc:	4950      	ldr	r1, [pc, #320]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005210:	4b4b      	ldr	r3, [pc, #300]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521e:	4948      	ldr	r1, [pc, #288]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005232:	4b43      	ldr	r3, [pc, #268]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	493f      	ldr	r1, [pc, #252]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d028      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005254:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005262:	4937      	ldr	r1, [pc, #220]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800526e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005272:	d106      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b32      	ldr	r3, [pc, #200]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a31      	ldr	r2, [pc, #196]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
 8005280:	e011      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800528a:	d10c      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f8c8 	bl	8005428 <RCCEx_PLLSAI1_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d028      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052b2:	4b23      	ldr	r3, [pc, #140]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	491f      	ldr	r1, [pc, #124]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052dc:	60d3      	str	r3, [r2, #12]
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f899 	bl	8005428 <RCCEx_PLLSAI1_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02b      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005310:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531e:	4908      	ldr	r1, [pc, #32]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800532e:	d109      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
 800533c:	e014      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f867 	bl	8005428 <RCCEx_PLLSAI1_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005382:	4928      	ldr	r1, [pc, #160]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800538e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005392:	d10d      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f844 	bl	8005428 <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	74bb      	strb	r3, [r7, #18]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3320      	adds	r3, #32
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f925 	bl	8005610 <RCCEx_PLLSAI2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053e0:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ee:	490d      	ldr	r1, [pc, #52]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005402:	4b08      	ldr	r3, [pc, #32]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005408:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005412:	4904      	ldr	r1, [pc, #16]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800541a:	7cbb      	ldrb	r3, [r7, #18]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000

08005428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005436:	4b75      	ldr	r3, [pc, #468]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d018      	beq.n	8005474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005442:	4b72      	ldr	r3, [pc, #456]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d10d      	bne.n	800546e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
       ||
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800545a:	4b6c      	ldr	r3, [pc, #432]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
       ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d047      	beq.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e044      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d018      	beq.n	80054ae <RCCEx_PLLSAI1_Config+0x86>
 800547c:	2b03      	cmp	r3, #3
 800547e:	d825      	bhi.n	80054cc <RCCEx_PLLSAI1_Config+0xa4>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d002      	beq.n	800548a <RCCEx_PLLSAI1_Config+0x62>
 8005484:	2b02      	cmp	r3, #2
 8005486:	d009      	beq.n	800549c <RCCEx_PLLSAI1_Config+0x74>
 8005488:	e020      	b.n	80054cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800548a:	4b60      	ldr	r3, [pc, #384]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549a:	e01a      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800549c:	4b5b      	ldr	r3, [pc, #364]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d116      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ac:	e013      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ae:	4b57      	ldr	r3, [pc, #348]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ba:	4b54      	ldr	r3, [pc, #336]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ca:	e006      	b.n	80054da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      break;
 80054d0:	e004      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054da:	bf00      	nop
    }

    if(status == HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054e2:	4b4a      	ldr	r3, [pc, #296]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	430b      	orrs	r3, r1
 80054f8:	4944      	ldr	r1, [pc, #272]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d17d      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005504:	4b41      	ldr	r3, [pc, #260]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a40      	ldr	r2, [pc, #256]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800550a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800550e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005510:	f7fc fcfc 	bl	8001f0c <HAL_GetTick>
 8005514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005516:	e009      	b.n	800552c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005518:	f7fc fcf8 	bl	8001f0c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d902      	bls.n	800552c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	73fb      	strb	r3, [r7, #15]
        break;
 800552a:	e005      	b.n	8005538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800552c:	4b37      	ldr	r3, [pc, #220]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d160      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d111      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005544:	4b31      	ldr	r3, [pc, #196]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800554c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	0211      	lsls	r1, r2, #8
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	0912      	lsrs	r2, r2, #4
 800555c:	0452      	lsls	r2, r2, #17
 800555e:	430a      	orrs	r2, r1
 8005560:	492a      	ldr	r1, [pc, #168]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
 8005566:	e027      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d112      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800556e:	4b27      	ldr	r3, [pc, #156]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6892      	ldr	r2, [r2, #8]
 800557e:	0211      	lsls	r1, r2, #8
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6912      	ldr	r2, [r2, #16]
 8005584:	0852      	lsrs	r2, r2, #1
 8005586:	3a01      	subs	r2, #1
 8005588:	0552      	lsls	r2, r2, #21
 800558a:	430a      	orrs	r2, r1
 800558c:	491f      	ldr	r1, [pc, #124]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
 8005592:	e011      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005594:	4b1d      	ldr	r3, [pc, #116]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800559c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	0211      	lsls	r1, r2, #8
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6952      	ldr	r2, [r2, #20]
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	430a      	orrs	r2, r1
 80055b2:	4916      	ldr	r1, [pc, #88]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b8:	4b14      	ldr	r3, [pc, #80]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc fca2 	bl	8001f0c <HAL_GetTick>
 80055c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ca:	e009      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055cc:	f7fc fc9e 	bl	8001f0c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d902      	bls.n	80055e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	73fb      	strb	r3, [r7, #15]
          break;
 80055de:	e005      	b.n	80055ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ef      	beq.n	80055cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055f2:	4b06      	ldr	r3, [pc, #24]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	4904      	ldr	r1, [pc, #16]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000

08005610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561e:	4b6a      	ldr	r3, [pc, #424]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800562a:	4b67      	ldr	r3, [pc, #412]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
       ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005642:	4b61      	ldr	r3, [pc, #388]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
       ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d047      	beq.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d018      	beq.n	8005696 <RCCEx_PLLSAI2_Config+0x86>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <RCCEx_PLLSAI2_Config+0x62>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d009      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x74>
 8005670:	e020      	b.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b55      	ldr	r3, [pc, #340]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e01a      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005684:	4b50      	ldr	r3, [pc, #320]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e013      	b.n	80056be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005696:	4b4c      	ldr	r3, [pc, #304]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056a2:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e004      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ca:	4b3f      	ldr	r3, [pc, #252]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	430b      	orrs	r3, r1
 80056e0:	4939      	ldr	r1, [pc, #228]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d167      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056ec:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a35      	ldr	r2, [pc, #212]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fc fc08 	bl	8001f0c <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005700:	f7fc fc04 	bl	8001f0c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005714:	4b2c      	ldr	r3, [pc, #176]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d14a      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d111      	bne.n	8005750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800572c:	4b26      	ldr	r3, [pc, #152]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	0912      	lsrs	r2, r2, #4
 8005744:	0452      	lsls	r2, r2, #17
 8005746:	430a      	orrs	r2, r1
 8005748:	491f      	ldr	r1, [pc, #124]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	614b      	str	r3, [r1, #20]
 800574e:	e011      	b.n	8005774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005750:	4b1d      	ldr	r3, [pc, #116]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	0211      	lsls	r1, r2, #8
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6912      	ldr	r2, [r2, #16]
 8005766:	0852      	lsrs	r2, r2, #1
 8005768:	3a01      	subs	r2, #1
 800576a:	0652      	lsls	r2, r2, #25
 800576c:	430a      	orrs	r2, r1
 800576e:	4916      	ldr	r1, [pc, #88]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005774:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a13      	ldr	r2, [pc, #76]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fc fbc4 	bl	8001f0c <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005786:	e009      	b.n	800579c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005788:	f7fc fbc0 	bl	8001f0c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d902      	bls.n	800579c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	73fb      	strb	r3, [r7, #15]
          break;
 800579a:	e005      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800579c:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ef      	beq.n	8005788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	4904      	ldr	r1, [pc, #16]	@ (80057c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e049      	b.n	8005872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc f9a8 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 ff74 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e047      	b.n	8005924 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a23      	ldr	r2, [pc, #140]	@ (8005930 <HAL_TIM_Base_Start+0xb4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ae:	d018      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <HAL_TIM_Base_Start+0xb8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <HAL_TIM_Base_Start+0xbc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <HAL_TIM_Base_Start+0xc0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <HAL_TIM_Base_Start+0xc4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIM_Base_Start+0x66>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <HAL_TIM_Base_Start+0xc8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d115      	bne.n	800590e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	4b17      	ldr	r3, [pc, #92]	@ (8005948 <HAL_TIM_Base_Start+0xcc>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d015      	beq.n	8005920 <HAL_TIM_Base_Start+0xa4>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fa:	d011      	beq.n	8005920 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590c:	e008      	b.n	8005920 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e000      	b.n	8005922 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40014000 	.word	0x40014000
 8005948:	00010007 	.word	0x00010007

0800594c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e049      	b.n	80059f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb ffba 	bl	80018ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 feb4 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <HAL_TIM_PWM_Start+0x24>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e03c      	b.n	8005a9a <HAL_TIM_PWM_Start+0x9e>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d109      	bne.n	8005a3a <HAL_TIM_PWM_Start+0x3e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	e02f      	b.n	8005a9a <HAL_TIM_PWM_Start+0x9e>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d109      	bne.n	8005a54 <HAL_TIM_PWM_Start+0x58>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	e022      	b.n	8005a9a <HAL_TIM_PWM_Start+0x9e>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d109      	bne.n	8005a6e <HAL_TIM_PWM_Start+0x72>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e015      	b.n	8005a9a <HAL_TIM_PWM_Start+0x9e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d109      	bne.n	8005a88 <HAL_TIM_PWM_Start+0x8c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e008      	b.n	8005a9a <HAL_TIM_PWM_Start+0x9e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e09c      	b.n	8005bdc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_PWM_Start+0xb6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab0:	e023      	b.n	8005afa <HAL_TIM_PWM_Start+0xfe>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0xc6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac0:	e01b      	b.n	8005afa <HAL_TIM_PWM_Start+0xfe>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0xd6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad0:	e013      	b.n	8005afa <HAL_TIM_PWM_Start+0xfe>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0xe6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ae0:	e00b      	b.n	8005afa <HAL_TIM_PWM_Start+0xfe>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0xf6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af0:	e003      	b.n	8005afa <HAL_TIM_PWM_Start+0xfe>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2201      	movs	r2, #1
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fa8c 	bl	8007020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a35      	ldr	r2, [pc, #212]	@ (8005be4 <HAL_TIM_PWM_Start+0x1e8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x13e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a34      	ldr	r2, [pc, #208]	@ (8005be8 <HAL_TIM_PWM_Start+0x1ec>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x13e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <HAL_TIM_PWM_Start+0x1f0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x13e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a31      	ldr	r2, [pc, #196]	@ (8005bf0 <HAL_TIM_PWM_Start+0x1f4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x13e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <HAL_TIM_PWM_Start+0x1f8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x142>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <HAL_TIM_PWM_Start+0x144>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	@ (8005be4 <HAL_TIM_PWM_Start+0x1e8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b66:	d018      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a22      	ldr	r2, [pc, #136]	@ (8005bf8 <HAL_TIM_PWM_Start+0x1fc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a21      	ldr	r2, [pc, #132]	@ (8005bfc <HAL_TIM_PWM_Start+0x200>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	@ (8005c00 <HAL_TIM_PWM_Start+0x204>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a17      	ldr	r2, [pc, #92]	@ (8005be8 <HAL_TIM_PWM_Start+0x1ec>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_TIM_PWM_Start+0x19e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <HAL_TIM_PWM_Start+0x1f0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d115      	bne.n	8005bc6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <HAL_TIM_PWM_Start+0x208>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b06      	cmp	r3, #6
 8005baa:	d015      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1dc>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb2:	d011      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	e008      	b.n	8005bd8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	00010007 	.word	0x00010007

08005c08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb fe7c 	bl	800192c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 fd56 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f839 	bl	8005d56 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fcfe 	bl	80066f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0208 	bic.w	r2, r2, #8
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e097      	b.n	8005eae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fe5c 	bl	8001a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005dae:	f023 0307 	bic.w	r3, r3, #7
 8005db2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fc9a 	bl	80066f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dec:	f023 0303 	bic.w	r3, r3, #3
 8005df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e0a:	f023 030c 	bic.w	r3, r3, #12
 8005e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	4313      	orrs	r3, r2
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	011a      	lsls	r2, r3, #4
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	031b      	lsls	r3, r3, #12
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ece:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ed6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ede:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d110      	bne.n	8005f08 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eec:	7b7b      	ldrb	r3, [r7, #13]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e069      	b.n	8005fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f06:	e031      	b.n	8005f6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d110      	bne.n	8005f30 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d102      	bne.n	8005f1a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f14:	7b3b      	ldrb	r3, [r7, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d001      	beq.n	8005f1e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e055      	b.n	8005fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f2e:	e01d      	b.n	8005f6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d108      	bne.n	8005f48 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f3c:	7b7b      	ldrb	r3, [r7, #13]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d102      	bne.n	8005f48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f42:	7b3b      	ldrb	r3, [r7, #12]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e03e      	b.n	8005fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_Encoder_Start+0xc4>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d008      	beq.n	8005f8a <HAL_TIM_Encoder_Start+0xd4>
 8005f78:	e00f      	b.n	8005f9a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f84c 	bl	8007020 <TIM_CCxChannelCmd>
      break;
 8005f88:	e016      	b.n	8005fb8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	2104      	movs	r1, #4
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f844 	bl	8007020 <TIM_CCxChannelCmd>
      break;
 8005f98:	e00e      	b.n	8005fb8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 f83c 	bl	8007020 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2201      	movs	r2, #1
 8005fae:	2104      	movs	r1, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 f835 	bl	8007020 <TIM_CCxChannelCmd>
      break;
 8005fb6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fe2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ff2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ffa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d110      	bne.n	8006024 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006008:	7b7b      	ldrb	r3, [r7, #13]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e089      	b.n	8006126 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006022:	e031      	b.n	8006088 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d110      	bne.n	800604c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006030:	7b3b      	ldrb	r3, [r7, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e075      	b.n	8006126 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800604a:	e01d      	b.n	8006088 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d108      	bne.n	8006064 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d105      	bne.n	8006064 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006058:	7b7b      	ldrb	r3, [r7, #13]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d102      	bne.n	8006064 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800605e:	7b3b      	ldrb	r3, [r7, #12]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d001      	beq.n	8006068 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e05e      	b.n	8006126 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_Encoder_Start_IT+0xc4>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d010      	beq.n	80060b6 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006094:	e01f      	b.n	80060d6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2201      	movs	r2, #1
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 ffbe 	bl	8007020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0202 	orr.w	r2, r2, #2
 80060b2:	60da      	str	r2, [r3, #12]
      break;
 80060b4:	e02e      	b.n	8006114 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2201      	movs	r2, #1
 80060bc:	2104      	movs	r1, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 ffae 	bl	8007020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0204 	orr.w	r2, r2, #4
 80060d2:	60da      	str	r2, [r3, #12]
      break;
 80060d4:	e01e      	b.n	8006114 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2201      	movs	r2, #1
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff9e 	bl	8007020 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	2104      	movs	r1, #4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 ff97 	bl	8007020 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0202 	orr.w	r2, r2, #2
 8006100:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0204 	orr.w	r2, r2, #4
 8006110:	60da      	str	r2, [r3, #12]
      break;
 8006112:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01b      	beq.n	8006192 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0202 	mvn.w	r2, #2
 8006162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa9f 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 800617e:	e005      	b.n	800618c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa91 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 faa2 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f06f 0204 	mvn.w	r2, #4
 80061ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa79 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 80061ca:	e005      	b.n	80061d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa6b 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa7c 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d020      	beq.n	800622a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f06f 0208 	mvn.w	r2, #8
 80061fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2204      	movs	r2, #4
 8006200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fa53 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006216:	e005      	b.n	8006224 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa45 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa56 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d020      	beq.n	8006276 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01b      	beq.n	8006276 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f06f 0210 	mvn.w	r2, #16
 8006246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2208      	movs	r2, #8
 800624c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fa2d 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006262:	e005      	b.n	8006270 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa1f 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa30 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0201 	mvn.w	r2, #1
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9fd 	bl	8006694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 ffe7 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 ffdf 	bl	80072a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f9ef 	bl	80066e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f06f 0220 	mvn.w	r2, #32
 8006322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 ffa7 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_IC_ConfigChannel+0x1e>
 800634c:	2302      	movs	r3, #2
 800634e:	e088      	b.n	8006462 <HAL_TIM_IC_ConfigChannel+0x130>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11b      	bne.n	8006396 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800636e:	f000 fd33 	bl	8006dd8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 020c 	bic.w	r2, r2, #12
 8006380:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6999      	ldr	r1, [r3, #24]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]
 8006394:	e060      	b.n	8006458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b04      	cmp	r3, #4
 800639a:	d11c      	bne.n	80063d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063ac:	f000 fd82 	bl	8006eb4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6999      	ldr	r1, [r3, #24]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	619a      	str	r2, [r3, #24]
 80063d4:	e040      	b.n	8006458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80063ec:	f000 fd9f 	bl	8006f2e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 020c 	bic.w	r2, r2, #12
 80063fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69d9      	ldr	r1, [r3, #28]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	61da      	str	r2, [r3, #28]
 8006412:	e021      	b.n	8006458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d11c      	bne.n	8006454 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800642a:	f000 fdbc 	bl	8006fa6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800643c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	021a      	lsls	r2, r3, #8
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	61da      	str	r2, [r3, #28]
 8006452:	e001      	b.n	8006458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006486:	2302      	movs	r3, #2
 8006488:	e0ff      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b14      	cmp	r3, #20
 8006496:	f200 80f0 	bhi.w	800667a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800649a:	a201      	add	r2, pc, #4	@ (adr r2, 80064a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064f5 	.word	0x080064f5
 80064a4:	0800667b 	.word	0x0800667b
 80064a8:	0800667b 	.word	0x0800667b
 80064ac:	0800667b 	.word	0x0800667b
 80064b0:	08006535 	.word	0x08006535
 80064b4:	0800667b 	.word	0x0800667b
 80064b8:	0800667b 	.word	0x0800667b
 80064bc:	0800667b 	.word	0x0800667b
 80064c0:	08006577 	.word	0x08006577
 80064c4:	0800667b 	.word	0x0800667b
 80064c8:	0800667b 	.word	0x0800667b
 80064cc:	0800667b 	.word	0x0800667b
 80064d0:	080065b7 	.word	0x080065b7
 80064d4:	0800667b 	.word	0x0800667b
 80064d8:	0800667b 	.word	0x0800667b
 80064dc:	0800667b 	.word	0x0800667b
 80064e0:	080065f9 	.word	0x080065f9
 80064e4:	0800667b 	.word	0x0800667b
 80064e8:	0800667b 	.word	0x0800667b
 80064ec:	0800667b 	.word	0x0800667b
 80064f0:	08006639 	.word	0x08006639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f996 	bl	800682c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0208 	orr.w	r2, r2, #8
 800650e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6999      	ldr	r1, [r3, #24]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	619a      	str	r2, [r3, #24]
      break;
 8006532:	e0a5      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fa06 	bl	800694c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800654e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800655e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6999      	ldr	r1, [r3, #24]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	619a      	str	r2, [r3, #24]
      break;
 8006574:	e084      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fa6f 	bl	8006a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0208 	orr.w	r2, r2, #8
 8006590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0204 	bic.w	r2, r2, #4
 80065a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69d9      	ldr	r1, [r3, #28]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	61da      	str	r2, [r3, #28]
      break;
 80065b4:	e064      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fad7 	bl	8006b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69d9      	ldr	r1, [r3, #28]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	61da      	str	r2, [r3, #28]
      break;
 80065f6:	e043      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fb20 	bl	8006c44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0208 	orr.w	r2, r2, #8
 8006612:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006636:	e023      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fb64 	bl	8006d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006662:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006678:	e002      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
      break;
 800667e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop

08006694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a40      	ldr	r2, [pc, #256]	@ (800680c <TIM_Base_SetConfig+0x114>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3d      	ldr	r2, [pc, #244]	@ (8006810 <TIM_Base_SetConfig+0x118>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3c      	ldr	r2, [pc, #240]	@ (8006814 <TIM_Base_SetConfig+0x11c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3b      	ldr	r2, [pc, #236]	@ (8006818 <TIM_Base_SetConfig+0x120>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3a      	ldr	r2, [pc, #232]	@ (800681c <TIM_Base_SetConfig+0x124>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2f      	ldr	r2, [pc, #188]	@ (800680c <TIM_Base_SetConfig+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01f      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d01b      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2c      	ldr	r2, [pc, #176]	@ (8006810 <TIM_Base_SetConfig+0x118>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d017      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2b      	ldr	r2, [pc, #172]	@ (8006814 <TIM_Base_SetConfig+0x11c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2a      	ldr	r2, [pc, #168]	@ (8006818 <TIM_Base_SetConfig+0x120>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a29      	ldr	r2, [pc, #164]	@ (800681c <TIM_Base_SetConfig+0x124>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a28      	ldr	r2, [pc, #160]	@ (8006820 <TIM_Base_SetConfig+0x128>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a27      	ldr	r2, [pc, #156]	@ (8006824 <TIM_Base_SetConfig+0x12c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a26      	ldr	r2, [pc, #152]	@ (8006828 <TIM_Base_SetConfig+0x130>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a10      	ldr	r2, [pc, #64]	@ (800680c <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0xf8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0xf8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a11      	ldr	r2, [pc, #68]	@ (8006820 <TIM_Base_SetConfig+0x128>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a10      	ldr	r2, [pc, #64]	@ (8006824 <TIM_Base_SetConfig+0x12c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0f      	ldr	r2, [pc, #60]	@ (8006828 <TIM_Base_SetConfig+0x130>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d103      	bne.n	80067f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	615a      	str	r2, [r3, #20]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f023 0201 	bic.w	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 0302 	bic.w	r3, r3, #2
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a2c      	ldr	r2, [pc, #176]	@ (8006938 <TIM_OC1_SetConfig+0x10c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00f      	beq.n	80068ac <TIM_OC1_SetConfig+0x80>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a2b      	ldr	r2, [pc, #172]	@ (800693c <TIM_OC1_SetConfig+0x110>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_OC1_SetConfig+0x80>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2a      	ldr	r2, [pc, #168]	@ (8006940 <TIM_OC1_SetConfig+0x114>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_OC1_SetConfig+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a29      	ldr	r2, [pc, #164]	@ (8006944 <TIM_OC1_SetConfig+0x118>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC1_SetConfig+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a28      	ldr	r2, [pc, #160]	@ (8006948 <TIM_OC1_SetConfig+0x11c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10c      	bne.n	80068c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0308 	bic.w	r3, r3, #8
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <TIM_OC1_SetConfig+0x10c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00f      	beq.n	80068ee <TIM_OC1_SetConfig+0xc2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1a      	ldr	r2, [pc, #104]	@ (800693c <TIM_OC1_SetConfig+0x110>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00b      	beq.n	80068ee <TIM_OC1_SetConfig+0xc2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a19      	ldr	r2, [pc, #100]	@ (8006940 <TIM_OC1_SetConfig+0x114>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <TIM_OC1_SetConfig+0xc2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a18      	ldr	r2, [pc, #96]	@ (8006944 <TIM_OC1_SetConfig+0x118>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d003      	beq.n	80068ee <TIM_OC1_SetConfig+0xc2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a17      	ldr	r2, [pc, #92]	@ (8006948 <TIM_OC1_SetConfig+0x11c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d111      	bne.n	8006912 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40014000 	.word	0x40014000
 8006944:	40014400 	.word	0x40014400
 8006948:	40014800 	.word	0x40014800

0800694c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 0210 	bic.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0320 	bic.w	r3, r3, #32
 800699a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a28      	ldr	r2, [pc, #160]	@ (8006a4c <TIM_OC2_SetConfig+0x100>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC2_SetConfig+0x6c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a27      	ldr	r2, [pc, #156]	@ (8006a50 <TIM_OC2_SetConfig+0x104>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10d      	bne.n	80069d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a4c <TIM_OC2_SetConfig+0x100>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_OC2_SetConfig+0xb0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1c      	ldr	r2, [pc, #112]	@ (8006a50 <TIM_OC2_SetConfig+0x104>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_OC2_SetConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a54 <TIM_OC2_SetConfig+0x108>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_OC2_SetConfig+0xb0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006a58 <TIM_OC2_SetConfig+0x10c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC2_SetConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a19      	ldr	r2, [pc, #100]	@ (8006a5c <TIM_OC2_SetConfig+0x110>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d113      	bne.n	8006a24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40013400 	.word	0x40013400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800

08006a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a27      	ldr	r2, [pc, #156]	@ (8006b5c <TIM_OC3_SetConfig+0xfc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <TIM_OC3_SetConfig+0x6a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a26      	ldr	r2, [pc, #152]	@ (8006b60 <TIM_OC3_SetConfig+0x100>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10d      	bne.n	8006ae6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <TIM_OC3_SetConfig+0xfc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_OC3_SetConfig+0xae>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <TIM_OC3_SetConfig+0x100>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_OC3_SetConfig+0xae>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b64 <TIM_OC3_SetConfig+0x104>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_OC3_SetConfig+0xae>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <TIM_OC3_SetConfig+0x108>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_OC3_SetConfig+0xae>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <TIM_OC3_SetConfig+0x10c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d113      	bne.n	8006b36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40014400 	.word	0x40014400
 8006b6c:	40014800 	.word	0x40014800

08006b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a18      	ldr	r2, [pc, #96]	@ (8006c30 <TIM_OC4_SetConfig+0xc0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_OC4_SetConfig+0x84>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <TIM_OC4_SetConfig+0xc4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <TIM_OC4_SetConfig+0x84>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a16      	ldr	r2, [pc, #88]	@ (8006c38 <TIM_OC4_SetConfig+0xc8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_OC4_SetConfig+0x84>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a15      	ldr	r2, [pc, #84]	@ (8006c3c <TIM_OC4_SetConfig+0xcc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC4_SetConfig+0x84>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a14      	ldr	r2, [pc, #80]	@ (8006c40 <TIM_OC4_SetConfig+0xd0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d109      	bne.n	8006c08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	019b      	lsls	r3, r3, #6
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40013400 	.word	0x40013400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40014400 	.word	0x40014400
 8006c40:	40014800 	.word	0x40014800

08006c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a17      	ldr	r2, [pc, #92]	@ (8006cf8 <TIM_OC5_SetConfig+0xb4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00f      	beq.n	8006cbe <TIM_OC5_SetConfig+0x7a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <TIM_OC5_SetConfig+0xb8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00b      	beq.n	8006cbe <TIM_OC5_SetConfig+0x7a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a15      	ldr	r2, [pc, #84]	@ (8006d00 <TIM_OC5_SetConfig+0xbc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d007      	beq.n	8006cbe <TIM_OC5_SetConfig+0x7a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a14      	ldr	r2, [pc, #80]	@ (8006d04 <TIM_OC5_SetConfig+0xc0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d003      	beq.n	8006cbe <TIM_OC5_SetConfig+0x7a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	@ (8006d08 <TIM_OC5_SetConfig+0xc4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d109      	bne.n	8006cd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	621a      	str	r2, [r3, #32]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800

08006d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	051b      	lsls	r3, r3, #20
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a18      	ldr	r2, [pc, #96]	@ (8006dc4 <TIM_OC6_SetConfig+0xb8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC6_SetConfig+0x7c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	@ (8006dc8 <TIM_OC6_SetConfig+0xbc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC6_SetConfig+0x7c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <TIM_OC6_SetConfig+0xc0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC6_SetConfig+0x7c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <TIM_OC6_SetConfig+0xc4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC6_SetConfig+0x7c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a14      	ldr	r2, [pc, #80]	@ (8006dd4 <TIM_OC6_SetConfig+0xc8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d109      	bne.n	8006d9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0201 	bic.w	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <TIM_TI1_SetConfig+0xc4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d017      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0c:	d013      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a23      	ldr	r2, [pc, #140]	@ (8006ea0 <TIM_TI1_SetConfig+0xc8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00f      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a22      	ldr	r2, [pc, #136]	@ (8006ea4 <TIM_TI1_SetConfig+0xcc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a21      	ldr	r2, [pc, #132]	@ (8006ea8 <TIM_TI1_SetConfig+0xd0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a20      	ldr	r2, [pc, #128]	@ (8006eac <TIM_TI1_SetConfig+0xd4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_TI1_SetConfig+0x5e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <TIM_TI1_SetConfig+0xd8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <TIM_TI1_SetConfig+0x62>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <TIM_TI1_SetConfig+0x64>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e003      	b.n	8006e5a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f023 030a 	bic.w	r3, r3, #10
 8006e74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f003 030a 	and.w	r3, r3, #10
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40013400 	.word	0x40013400
 8006eb0:	40014000 	.word	0x40014000

08006eb4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f023 0210 	bic.w	r2, r3, #16
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	031b      	lsls	r3, r3, #12
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f06:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b087      	sub	sp, #28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	031b      	lsls	r3, r3, #12
 8006ffe:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2201      	movs	r2, #1
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	43db      	mvns	r3, r3
 8007042:	401a      	ands	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	fa01 f303 	lsl.w	r3, r1, r3
 8007058:	431a      	orrs	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007080:	2302      	movs	r3, #2
 8007082:	e068      	b.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d108      	bne.n	80070ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01d      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f6:	d018      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1a      	ldr	r2, [pc, #104]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a13      	ldr	r2, [pc, #76]	@ (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d10c      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	4313      	orrs	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40012c00 	.word	0x40012c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00
 8007178:	40014000 	.word	0x40014000

0800717c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007194:	2302      	movs	r3, #2
 8007196:	e065      	b.n	8007264 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a16      	ldr	r2, [pc, #88]	@ (8007270 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d115      	bne.n	8007252 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	051b      	lsls	r3, r3, #20
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40013400 	.word	0x40013400

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e040      	b.n	8007348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fa fc8e 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2224      	movs	r2, #36	@ 0x24
 80072e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 feca 	bl	8008094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc0f 	bl	8007b24 <UART_SetConfig>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e01b      	b.n	8007348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800731e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800732e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 ff49 	bl	80081d8 <UART_CheckIdleState>
 8007346:	4603      	mov	r3, r0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	@ 0x28
 8007354:	af02      	add	r7, sp, #8
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007364:	2b20      	cmp	r3, #32
 8007366:	d177      	bne.n	8007458 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_UART_Transmit+0x24>
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e070      	b.n	800745a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2221      	movs	r2, #33	@ 0x21
 8007384:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007386:	f7fa fdc1 	bl	8001f0c <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a4:	d108      	bne.n	80073b8 <HAL_UART_Transmit+0x68>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	e003      	b.n	80073c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073c0:	e02f      	b.n	8007422 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2180      	movs	r1, #128	@ 0x80
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 ffab 	bl	8008328 <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e03b      	b.n	800745a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f4:	b292      	uxth	r2, r2
 80073f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	3302      	adds	r3, #2
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e007      	b.n	8007410 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3301      	adds	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1c9      	bne.n	80073c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2140      	movs	r1, #64	@ 0x40
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 ff75 	bl	8008328 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e005      	b.n	800745a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e000      	b.n	800745a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	@ 0x28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007478:	2b20      	cmp	r3, #32
 800747a:	d137      	bne.n	80074ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_UART_Receive_IT+0x24>
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e030      	b.n	80074ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <HAL_UART_Receive_IT+0x94>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01f      	beq.n	80074dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	613b      	str	r3, [r7, #16]
   return(result);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	623b      	str	r3, [r7, #32]
 80074ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e6      	bne.n	80074aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	461a      	mov	r2, r3
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 ff88 	bl	80083f8 <UART_Start_Receive_IT>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e000      	b.n	80074ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3728      	adds	r7, #40	@ 0x28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40008000 	.word	0x40008000

080074fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b0ba      	sub	sp, #232	@ 0xe8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007526:	f640 030f 	movw	r3, #2063	@ 0x80f
 800752a:	4013      	ands	r3, r2
 800752c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d115      	bne.n	8007564 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00f      	beq.n	8007564 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 82ae 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      }
      return;
 8007562:	e2a8      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8117 	beq.w	800779c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800756e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800757a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800757e:	4b85      	ldr	r3, [pc, #532]	@ (8007794 <HAL_UART_IRQHandler+0x298>)
 8007580:	4013      	ands	r3, r2
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 810a 	beq.w	800779c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d011      	beq.n	80075b8 <HAL_UART_IRQHandler+0xbc>
 8007594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2201      	movs	r2, #1
 80075a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ae:	f043 0201 	orr.w	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d011      	beq.n	80075e8 <HAL_UART_IRQHandler+0xec>
 80075c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2202      	movs	r2, #2
 80075d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075de:	f043 0204 	orr.w	r2, r3, #4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d011      	beq.n	8007618 <HAL_UART_IRQHandler+0x11c>
 80075f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2204      	movs	r2, #4
 8007606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800760e:	f043 0202 	orr.w	r2, r3, #2
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d017      	beq.n	8007654 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007634:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2208      	movs	r2, #8
 8007642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800764a:	f043 0208 	orr.w	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800765c:	2b00      	cmp	r3, #0
 800765e:	d012      	beq.n	8007686 <HAL_UART_IRQHandler+0x18a>
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007664:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8214 	beq.w	8007aba <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ce:	2b40      	cmp	r3, #64	@ 0x40
 80076d0:	d005      	beq.n	80076de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d04f      	beq.n	800777e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 ff50 	bl	8008584 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ee:	2b40      	cmp	r3, #64	@ 0x40
 80076f0:	d141      	bne.n	8007776 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800770c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800771e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800772a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1d9      	bne.n	80076f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	2b00      	cmp	r3, #0
 8007744:	d013      	beq.n	800776e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	4a13      	ldr	r2, [pc, #76]	@ (8007798 <HAL_UART_IRQHandler+0x29c>)
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007752:	4618      	mov	r0, r3
 8007754:	f7fb fcfd 	bl	8003152 <HAL_DMA_Abort_IT>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d017      	beq.n	800778e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	e00f      	b.n	800778e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9c2 	bl	8007af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e00b      	b.n	800778e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9be 	bl	8007af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	e007      	b.n	800778e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9ba 	bl	8007af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800778c:	e195      	b.n	8007aba <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778e:	bf00      	nop
    return;
 8007790:	e193      	b.n	8007aba <HAL_UART_IRQHandler+0x5be>
 8007792:	bf00      	nop
 8007794:	04000120 	.word	0x04000120
 8007798:	0800864d 	.word	0x0800864d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	f040 814e 	bne.w	8007a42 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 8147 	beq.w	8007a42 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8140 	beq.w	8007a42 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2210      	movs	r2, #16
 80077c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d4:	2b40      	cmp	r3, #64	@ 0x40
 80077d6:	f040 80b8 	bne.w	800794a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8167 	beq.w	8007abe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077fa:	429a      	cmp	r2, r3
 80077fc:	f080 815f 	bcs.w	8007abe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007806:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 8086 	bne.w	8007928 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800784a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800785e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1da      	bne.n	800781c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800788a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800788e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007892:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800789c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e1      	bne.n	8007866 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e3      	bne.n	80078a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f8:	f023 0310 	bic.w	r3, r3, #16
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800790c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007910:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e4      	bne.n	80078e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007922:	4618      	mov	r0, r3
 8007924:	f7fb fbd7 	bl	80030d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800793a:	b29b      	uxth	r3, r3
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f8e2 	bl	8007b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007948:	e0b9      	b.n	8007abe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007956:	b29b      	uxth	r3, r3
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 80ab 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800796c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80a6 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800798a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007998:	647b      	str	r3, [r7, #68]	@ 0x44
 800799a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800799e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e4      	bne.n	8007976 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	623b      	str	r3, [r7, #32]
   return(result);
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e3      	bne.n	80079ac <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	69b9      	ldr	r1, [r7, #24]
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	617b      	str	r3, [r7, #20]
   return(result);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e4      	bne.n	80079f8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f866 	bl	8007b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a40:	e03f      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <HAL_UART_IRQHandler+0x570>
 8007a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d008      	beq.n	8007a6c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 ffed 	bl	8008a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6a:	e02d      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01c      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
    }
    return;
 8007a94:	e017      	b.n	8007ac6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d012      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
 8007aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fde2 	bl	8008678 <UART_EndTransmit_IT>
    return;
 8007ab4:	e008      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ab6:	bf00      	nop
 8007ab8:	e006      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007aba:	bf00      	nop
 8007abc:	e004      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e002      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007ac6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ac8:	37e8      	adds	r7, #232	@ 0xe8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop

08007ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b28:	b08a      	sub	sp, #40	@ 0x28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4ba4      	ldr	r3, [pc, #656]	@ (8007de4 <UART_SetConfig+0x2c0>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a99      	ldr	r2, [pc, #612]	@ (8007de8 <UART_SetConfig+0x2c4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d004      	beq.n	8007b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a90      	ldr	r2, [pc, #576]	@ (8007dec <UART_SetConfig+0x2c8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d126      	bne.n	8007bfc <UART_SetConfig+0xd8>
 8007bae:	4b90      	ldr	r3, [pc, #576]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d81b      	bhi.n	8007bf4 <UART_SetConfig+0xd0>
 8007bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <UART_SetConfig+0xa0>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	08007bdd 	.word	0x08007bdd
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bda:	e116      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be2:	e112      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007be4:	2304      	movs	r3, #4
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bea:	e10e      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bf2:	e10a      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bfa:	e106      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a7c      	ldr	r2, [pc, #496]	@ (8007df4 <UART_SetConfig+0x2d0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d138      	bne.n	8007c78 <UART_SetConfig+0x154>
 8007c06:	4b7a      	ldr	r3, [pc, #488]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0c:	f003 030c 	and.w	r3, r3, #12
 8007c10:	2b0c      	cmp	r3, #12
 8007c12:	d82d      	bhi.n	8007c70 <UART_SetConfig+0x14c>
 8007c14:	a201      	add	r2, pc, #4	@ (adr r2, 8007c1c <UART_SetConfig+0xf8>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c51 	.word	0x08007c51
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c61 	.word	0x08007c61
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c71 	.word	0x08007c71
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c69 	.word	0x08007c69
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c56:	e0d8      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5e:	e0d4      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c66:	e0d0      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6e:	e0cc      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c76:	e0c8      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8007df8 <UART_SetConfig+0x2d4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d125      	bne.n	8007cce <UART_SetConfig+0x1aa>
 8007c82:	4b5b      	ldr	r3, [pc, #364]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c8c:	2b30      	cmp	r3, #48	@ 0x30
 8007c8e:	d016      	beq.n	8007cbe <UART_SetConfig+0x19a>
 8007c90:	2b30      	cmp	r3, #48	@ 0x30
 8007c92:	d818      	bhi.n	8007cc6 <UART_SetConfig+0x1a2>
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d00a      	beq.n	8007cae <UART_SetConfig+0x18a>
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d814      	bhi.n	8007cc6 <UART_SetConfig+0x1a2>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <UART_SetConfig+0x182>
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d008      	beq.n	8007cb6 <UART_SetConfig+0x192>
 8007ca4:	e00f      	b.n	8007cc6 <UART_SetConfig+0x1a2>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cac:	e0ad      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cb4:	e0a9      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cbc:	e0a5      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007cbe:	2308      	movs	r3, #8
 8007cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc4:	e0a1      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ccc:	e09d      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8007dfc <UART_SetConfig+0x2d8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d125      	bne.n	8007d24 <UART_SetConfig+0x200>
 8007cd8:	4b45      	ldr	r3, [pc, #276]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce4:	d016      	beq.n	8007d14 <UART_SetConfig+0x1f0>
 8007ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce8:	d818      	bhi.n	8007d1c <UART_SetConfig+0x1f8>
 8007cea:	2b80      	cmp	r3, #128	@ 0x80
 8007cec:	d00a      	beq.n	8007d04 <UART_SetConfig+0x1e0>
 8007cee:	2b80      	cmp	r3, #128	@ 0x80
 8007cf0:	d814      	bhi.n	8007d1c <UART_SetConfig+0x1f8>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <UART_SetConfig+0x1d8>
 8007cf6:	2b40      	cmp	r3, #64	@ 0x40
 8007cf8:	d008      	beq.n	8007d0c <UART_SetConfig+0x1e8>
 8007cfa:	e00f      	b.n	8007d1c <UART_SetConfig+0x1f8>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d02:	e082      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d04:	2302      	movs	r3, #2
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d0a:	e07e      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d12:	e07a      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d1a:	e076      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d22:	e072      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a35      	ldr	r2, [pc, #212]	@ (8007e00 <UART_SetConfig+0x2dc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d12a      	bne.n	8007d84 <UART_SetConfig+0x260>
 8007d2e:	4b30      	ldr	r3, [pc, #192]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d3c:	d01a      	beq.n	8007d74 <UART_SetConfig+0x250>
 8007d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d42:	d81b      	bhi.n	8007d7c <UART_SetConfig+0x258>
 8007d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d48:	d00c      	beq.n	8007d64 <UART_SetConfig+0x240>
 8007d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4e:	d815      	bhi.n	8007d7c <UART_SetConfig+0x258>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <UART_SetConfig+0x238>
 8007d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d58:	d008      	beq.n	8007d6c <UART_SetConfig+0x248>
 8007d5a:	e00f      	b.n	8007d7c <UART_SetConfig+0x258>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d62:	e052      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d6a:	e04e      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d72:	e04a      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d7a:	e046      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d82:	e042      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a17      	ldr	r2, [pc, #92]	@ (8007de8 <UART_SetConfig+0x2c4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d13a      	bne.n	8007e04 <UART_SetConfig+0x2e0>
 8007d8e:	4b18      	ldr	r3, [pc, #96]	@ (8007df0 <UART_SetConfig+0x2cc>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d9c:	d01a      	beq.n	8007dd4 <UART_SetConfig+0x2b0>
 8007d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007da2:	d81b      	bhi.n	8007ddc <UART_SetConfig+0x2b8>
 8007da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da8:	d00c      	beq.n	8007dc4 <UART_SetConfig+0x2a0>
 8007daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dae:	d815      	bhi.n	8007ddc <UART_SetConfig+0x2b8>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <UART_SetConfig+0x298>
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007db8:	d008      	beq.n	8007dcc <UART_SetConfig+0x2a8>
 8007dba:	e00f      	b.n	8007ddc <UART_SetConfig+0x2b8>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dc2:	e022      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dca:	e01e      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dd2:	e01a      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dda:	e016      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0x2e6>
 8007de4:	efff69f3 	.word	0xefff69f3
 8007de8:	40008000 	.word	0x40008000
 8007dec:	40013800 	.word	0x40013800
 8007df0:	40021000 	.word	0x40021000
 8007df4:	40004400 	.word	0x40004400
 8007df8:	40004800 	.word	0x40004800
 8007dfc:	40004c00 	.word	0x40004c00
 8007e00:	40005000 	.word	0x40005000
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a9f      	ldr	r2, [pc, #636]	@ (800808c <UART_SetConfig+0x568>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d17a      	bne.n	8007f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d824      	bhi.n	8007e66 <UART_SetConfig+0x342>
 8007e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e24 <UART_SetConfig+0x300>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e57 	.word	0x08007e57
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e67 	.word	0x08007e67
 8007e44:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7fc ff78 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8007e4c:	61f8      	str	r0, [r7, #28]
        break;
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b8f      	ldr	r3, [pc, #572]	@ (8008090 <UART_SetConfig+0x56c>)
 8007e52:	61fb      	str	r3, [r7, #28]
        break;
 8007e54:	e00d      	b.n	8007e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fc fed9 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8007e5a:	61f8      	str	r0, [r7, #28]
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e62:	61fb      	str	r3, [r7, #28]
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80fb 	beq.w	8008070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4413      	add	r3, r2
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d305      	bcc.n	8007e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d903      	bls.n	8007e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e9c:	e0e8      	b.n	8008070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	461c      	mov	r4, r3
 8007ea4:	4615      	mov	r5, r2
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	022b      	lsls	r3, r5, #8
 8007eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007eb4:	0222      	lsls	r2, r4, #8
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	6849      	ldr	r1, [r1, #4]
 8007eba:	0849      	lsrs	r1, r1, #1
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	4688      	mov	r8, r1
 8007ec0:	4681      	mov	r9, r0
 8007ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8007ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	603b      	str	r3, [r7, #0]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	f7f8 f9c8 	bl	8000270 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eee:	d308      	bcc.n	8007f02 <UART_SetConfig+0x3de>
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef6:	d204      	bcs.n	8007f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	e0b6      	b.n	8008070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f08:	e0b2      	b.n	8008070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f12:	d15e      	bne.n	8007fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d828      	bhi.n	8007f6e <UART_SetConfig+0x44a>
 8007f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <UART_SetConfig+0x400>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f51 	.word	0x08007f51
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	08007f6f 	.word	0x08007f6f
 8007f34:	08007f5f 	.word	0x08007f5f
 8007f38:	08007f6f 	.word	0x08007f6f
 8007f3c:	08007f6f 	.word	0x08007f6f
 8007f40:	08007f6f 	.word	0x08007f6f
 8007f44:	08007f67 	.word	0x08007f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f48:	f7fc fef8 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8007f4c:	61f8      	str	r0, [r7, #28]
        break;
 8007f4e:	e014      	b.n	8007f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7fc ff0a 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8007f54:	61f8      	str	r0, [r7, #28]
        break;
 8007f56:	e010      	b.n	8007f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f58:	4b4d      	ldr	r3, [pc, #308]	@ (8008090 <UART_SetConfig+0x56c>)
 8007f5a:	61fb      	str	r3, [r7, #28]
        break;
 8007f5c:	e00d      	b.n	8007f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fc fe55 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8007f62:	61f8      	str	r0, [r7, #28]
        break;
 8007f64:	e009      	b.n	8007f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f6a:	61fb      	str	r3, [r7, #28]
        break;
 8007f6c:	e005      	b.n	8007f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d077      	beq.n	8008070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	005a      	lsls	r2, r3, #1
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b0f      	cmp	r3, #15
 8007f9a:	d916      	bls.n	8007fca <UART_SetConfig+0x4a6>
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa2:	d212      	bcs.n	8007fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f023 030f 	bic.w	r3, r3, #15
 8007fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	8afb      	ldrh	r3, [r7, #22]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	8afa      	ldrh	r2, [r7, #22]
 8007fc6:	60da      	str	r2, [r3, #12]
 8007fc8:	e052      	b.n	8008070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007fd0:	e04e      	b.n	8008070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d827      	bhi.n	800802a <UART_SetConfig+0x506>
 8007fda:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <UART_SetConfig+0x4bc>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800800d 	.word	0x0800800d
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	0800802b 	.word	0x0800802b
 8007ff0:	0800801b 	.word	0x0800801b
 8007ff4:	0800802b 	.word	0x0800802b
 8007ff8:	0800802b 	.word	0x0800802b
 8007ffc:	0800802b 	.word	0x0800802b
 8008000:	08008023 	.word	0x08008023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008004:	f7fc fe9a 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8008008:	61f8      	str	r0, [r7, #28]
        break;
 800800a:	e014      	b.n	8008036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800800c:	f7fc feac 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8008010:	61f8      	str	r0, [r7, #28]
        break;
 8008012:	e010      	b.n	8008036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008014:	4b1e      	ldr	r3, [pc, #120]	@ (8008090 <UART_SetConfig+0x56c>)
 8008016:	61fb      	str	r3, [r7, #28]
        break;
 8008018:	e00d      	b.n	8008036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800801a:	f7fc fdf7 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 800801e:	61f8      	str	r0, [r7, #28]
        break;
 8008020:	e009      	b.n	8008036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008026:	61fb      	str	r3, [r7, #28]
        break;
 8008028:	e005      	b.n	8008036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008034:	bf00      	nop
    }

    if (pclk != 0U)
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d019      	beq.n	8008070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	085a      	lsrs	r2, r3, #1
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	441a      	add	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	fbb2 f3f3 	udiv	r3, r2, r3
 800804e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b0f      	cmp	r3, #15
 8008054:	d909      	bls.n	800806a <UART_SetConfig+0x546>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800805c:	d205      	bcs.n	800806a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60da      	str	r2, [r3, #12]
 8008068:	e002      	b.n	8008070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800807c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008080:	4618      	mov	r0, r3
 8008082:	3728      	adds	r7, #40	@ 0x28
 8008084:	46bd      	mov	sp, r7
 8008086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800808a:	bf00      	nop
 800808c:	40008000 	.word	0x40008000
 8008090:	00f42400 	.word	0x00f42400

08008094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01a      	beq.n	80081aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008192:	d10a      	bne.n	80081aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b098      	sub	sp, #96	@ 0x60
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081e8:	f7f9 fe90 	bl	8001f0c <HAL_GetTick>
 80081ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d12e      	bne.n	800825a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008204:	2200      	movs	r2, #0
 8008206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f88c 	bl	8008328 <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d021      	beq.n	800825a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822a:	653b      	str	r3, [r7, #80]	@ 0x50
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008234:	647b      	str	r3, [r7, #68]	@ 0x44
 8008236:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800823a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e062      	b.n	8008320 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b04      	cmp	r3, #4
 8008266:	d149      	bne.n	80082fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008270:	2200      	movs	r2, #0
 8008272:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f856 	bl	8008328 <UART_WaitOnFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d03c      	beq.n	80082fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	623b      	str	r3, [r7, #32]
   return(result);
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80082a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e6      	bne.n	8008282 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082d4:	61fa      	str	r2, [r7, #28]
 80082d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	617b      	str	r3, [r7, #20]
   return(result);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e5      	bne.n	80082b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e011      	b.n	8008320 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3758      	adds	r7, #88	@ 0x58
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008338:	e049      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d045      	beq.n	80083ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008342:	f7f9 fde3 	bl	8001f0c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <UART_WaitOnFlagUntilTimeout+0x30>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e048      	b.n	80083ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	d031      	beq.n	80083ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d110      	bne.n	800839a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2208      	movs	r2, #8
 800837e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 f8ff 	bl	8008584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2208      	movs	r2, #8
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e029      	b.n	80083ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083a8:	d111      	bne.n	80083ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f8e5 	bl	8008584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e00f      	b.n	80083ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4013      	ands	r3, r2
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	429a      	cmp	r2, r3
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d0a6      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b097      	sub	sp, #92	@ 0x5c
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800842a:	d10e      	bne.n	800844a <UART_Start_Receive_IT+0x52>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d105      	bne.n	8008440 <UART_Start_Receive_IT+0x48>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800843a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800843e:	e02d      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	22ff      	movs	r2, #255	@ 0xff
 8008444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008448:	e028      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10d      	bne.n	800846e <UART_Start_Receive_IT+0x76>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <UART_Start_Receive_IT+0x6c>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	22ff      	movs	r2, #255	@ 0xff
 800845e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008462:	e01b      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	227f      	movs	r2, #127	@ 0x7f
 8008468:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800846c:	e016      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008476:	d10d      	bne.n	8008494 <UART_Start_Receive_IT+0x9c>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <UART_Start_Receive_IT+0x92>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	227f      	movs	r2, #127	@ 0x7f
 8008484:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008488:	e008      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	223f      	movs	r2, #63	@ 0x3f
 800848e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008492:	e003      	b.n	800849c <UART_Start_Receive_IT+0xa4>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2222      	movs	r2, #34	@ 0x22
 80084a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3308      	adds	r3, #8
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80084ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80084da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e5      	bne.n	80084ac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e8:	d107      	bne.n	80084fa <UART_Start_Receive_IT+0x102>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a21      	ldr	r2, [pc, #132]	@ (800857c <UART_Start_Receive_IT+0x184>)
 80084f6:	669a      	str	r2, [r3, #104]	@ 0x68
 80084f8:	e002      	b.n	8008500 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a20      	ldr	r2, [pc, #128]	@ (8008580 <UART_Start_Receive_IT+0x188>)
 80084fe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d019      	beq.n	800853c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800851c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
 8008528:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800852c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e6      	bne.n	8008508 <UART_Start_Receive_IT+0x110>
 800853a:	e018      	b.n	800856e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	613b      	str	r3, [r7, #16]
   return(result);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f043 0320 	orr.w	r3, r3, #32
 8008550:	653b      	str	r3, [r7, #80]	@ 0x50
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800855a:	623b      	str	r3, [r7, #32]
 800855c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	69f9      	ldr	r1, [r7, #28]
 8008560:	6a3a      	ldr	r2, [r7, #32]
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	61bb      	str	r3, [r7, #24]
   return(result);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e6      	bne.n	800853c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	375c      	adds	r7, #92	@ 0x5c
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	08008889 	.word	0x08008889
 8008580:	080086cd 	.word	0x080086cd

08008584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008584:	b480      	push	{r7}
 8008586:	b095      	sub	sp, #84	@ 0x54
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80085ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e6      	bne.n	800858c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3308      	adds	r3, #8
 80085c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3308      	adds	r3, #8
 80085dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e5      	bne.n	80085be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d118      	bne.n	800862c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	60bb      	str	r3, [r7, #8]
   return(result);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f023 0310 	bic.w	r3, r3, #16
 800860e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6979      	ldr	r1, [r7, #20]
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	613b      	str	r3, [r7, #16]
   return(result);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008640:	bf00      	nop
 8008642:	3754      	adds	r7, #84	@ 0x54
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff fa44 	bl	8007af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	60bb      	str	r3, [r7, #8]
   return(result);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6979      	ldr	r1, [r7, #20]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	613b      	str	r3, [r7, #16]
   return(result);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e6      	bne.n	8008680 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fa06 	bl	8007ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3720      	adds	r7, #32
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b09c      	sub	sp, #112	@ 0x70
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e4:	2b22      	cmp	r3, #34	@ 0x22
 80086e6:	f040 80be 	bne.w	8008866 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086f8:	b2d9      	uxtb	r1, r3
 80086fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008704:	400a      	ands	r2, r1
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80a3 	bne.w	800887a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008752:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008754:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008758:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e6      	bne.n	8008734 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	667b      	str	r3, [r7, #100]	@ 0x64
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008786:	647a      	str	r2, [r7, #68]	@ 0x44
 8008788:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800878c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a34      	ldr	r2, [pc, #208]	@ (8008884 <UART_RxISR_8BIT+0x1b8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d01f      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d018      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	623b      	str	r3, [r7, #32]
   return(result);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087da:	663b      	str	r3, [r7, #96]	@ 0x60
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d12e      	bne.n	800885e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	60fb      	str	r3, [r7, #12]
   return(result);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	617b      	str	r3, [r7, #20]
   return(result);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b10      	cmp	r3, #16
 8008844:	d103      	bne.n	800884e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2210      	movs	r2, #16
 800884c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff f958 	bl	8007b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800885c:	e00d      	b.n	800887a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff f940 	bl	8007ae4 <HAL_UART_RxCpltCallback>
}
 8008864:	e009      	b.n	800887a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	8b1b      	ldrh	r3, [r3, #24]
 800886c:	b29a      	uxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0208 	orr.w	r2, r2, #8
 8008876:	b292      	uxth	r2, r2
 8008878:	831a      	strh	r2, [r3, #24]
}
 800887a:	bf00      	nop
 800887c:	3770      	adds	r7, #112	@ 0x70
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	40008000 	.word	0x40008000

08008888 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b09c      	sub	sp, #112	@ 0x70
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008896:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a0:	2b22      	cmp	r3, #34	@ 0x22
 80088a2:	f040 80be 	bne.w	8008a22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80088ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80088ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80088be:	4013      	ands	r3, r2
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ca:	1c9a      	adds	r2, r3, #2
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 80a3 	bne.w	8008a36 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008904:	667b      	str	r3, [r7, #100]	@ 0x64
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008910:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800891c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	663b      	str	r3, [r7, #96]	@ 0x60
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008942:	643a      	str	r2, [r7, #64]	@ 0x40
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a34      	ldr	r2, [pc, #208]	@ (8008a40 <UART_RxISR_16BIT+0x1b8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d01f      	beq.n	80089b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d018      	beq.n	80089b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008996:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12e      	bne.n	8008a1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6979      	ldr	r1, [r7, #20]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	613b      	str	r3, [r7, #16]
   return(result);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e6      	bne.n	80089c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d103      	bne.n	8008a0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2210      	movs	r2, #16
 8008a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff f87a 	bl	8007b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a18:	e00d      	b.n	8008a36 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff f862 	bl	8007ae4 <HAL_UART_RxCpltCallback>
}
 8008a20:	e009      	b.n	8008a36 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	8b1b      	ldrh	r3, [r3, #24]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0208 	orr.w	r2, r2, #8
 8008a32:	b292      	uxth	r2, r2
 8008a34:	831a      	strh	r2, [r3, #24]
}
 8008a36:	bf00      	nop
 8008a38:	3770      	adds	r7, #112	@ 0x70
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40008000 	.word	0x40008000

08008a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <siprintf>:
 8008a58:	b40e      	push	{r1, r2, r3}
 8008a5a:	b500      	push	{lr}
 8008a5c:	b09c      	sub	sp, #112	@ 0x70
 8008a5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a60:	9002      	str	r0, [sp, #8]
 8008a62:	9006      	str	r0, [sp, #24]
 8008a64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a68:	4809      	ldr	r0, [pc, #36]	@ (8008a90 <siprintf+0x38>)
 8008a6a:	9107      	str	r1, [sp, #28]
 8008a6c:	9104      	str	r1, [sp, #16]
 8008a6e:	4909      	ldr	r1, [pc, #36]	@ (8008a94 <siprintf+0x3c>)
 8008a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a74:	9105      	str	r1, [sp, #20]
 8008a76:	6800      	ldr	r0, [r0, #0]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	a902      	add	r1, sp, #8
 8008a7c:	f000 f994 	bl	8008da8 <_svfiprintf_r>
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	b01c      	add	sp, #112	@ 0x70
 8008a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a8c:	b003      	add	sp, #12
 8008a8e:	4770      	bx	lr
 8008a90:	2000011c 	.word	0x2000011c
 8008a94:	ffff0208 	.word	0xffff0208

08008a98 <memset>:
 8008a98:	4402      	add	r2, r0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <__errno>:
 8008aa8:	4b01      	ldr	r3, [pc, #4]	@ (8008ab0 <__errno+0x8>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	2000011c 	.word	0x2000011c

08008ab4 <__libc_init_array>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8008aec <__libc_init_array+0x38>)
 8008ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8008af0 <__libc_init_array+0x3c>)
 8008aba:	1b64      	subs	r4, r4, r5
 8008abc:	10a4      	asrs	r4, r4, #2
 8008abe:	2600      	movs	r6, #0
 8008ac0:	42a6      	cmp	r6, r4
 8008ac2:	d109      	bne.n	8008ad8 <__libc_init_array+0x24>
 8008ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8008af4 <__libc_init_array+0x40>)
 8008ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8008af8 <__libc_init_array+0x44>)
 8008ac8:	f000 fc66 	bl	8009398 <_init>
 8008acc:	1b64      	subs	r4, r4, r5
 8008ace:	10a4      	asrs	r4, r4, #2
 8008ad0:	2600      	movs	r6, #0
 8008ad2:	42a6      	cmp	r6, r4
 8008ad4:	d105      	bne.n	8008ae2 <__libc_init_array+0x2e>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008adc:	4798      	blx	r3
 8008ade:	3601      	adds	r6, #1
 8008ae0:	e7ee      	b.n	8008ac0 <__libc_init_array+0xc>
 8008ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae6:	4798      	blx	r3
 8008ae8:	3601      	adds	r6, #1
 8008aea:	e7f2      	b.n	8008ad2 <__libc_init_array+0x1e>
 8008aec:	080094e4 	.word	0x080094e4
 8008af0:	080094e4 	.word	0x080094e4
 8008af4:	080094e4 	.word	0x080094e4
 8008af8:	080094e8 	.word	0x080094e8

08008afc <__retarget_lock_acquire_recursive>:
 8008afc:	4770      	bx	lr

08008afe <__retarget_lock_release_recursive>:
 8008afe:	4770      	bx	lr

08008b00 <_free_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4605      	mov	r5, r0
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d041      	beq.n	8008b8c <_free_r+0x8c>
 8008b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b0c:	1f0c      	subs	r4, r1, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bfb8      	it	lt
 8008b12:	18e4      	addlt	r4, r4, r3
 8008b14:	f000 f8e0 	bl	8008cd8 <__malloc_lock>
 8008b18:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <_free_r+0x90>)
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	b933      	cbnz	r3, 8008b2c <_free_r+0x2c>
 8008b1e:	6063      	str	r3, [r4, #4]
 8008b20:	6014      	str	r4, [r2, #0]
 8008b22:	4628      	mov	r0, r5
 8008b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b28:	f000 b8dc 	b.w	8008ce4 <__malloc_unlock>
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d908      	bls.n	8008b42 <_free_r+0x42>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	1821      	adds	r1, r4, r0
 8008b34:	428b      	cmp	r3, r1
 8008b36:	bf01      	itttt	eq
 8008b38:	6819      	ldreq	r1, [r3, #0]
 8008b3a:	685b      	ldreq	r3, [r3, #4]
 8008b3c:	1809      	addeq	r1, r1, r0
 8008b3e:	6021      	streq	r1, [r4, #0]
 8008b40:	e7ed      	b.n	8008b1e <_free_r+0x1e>
 8008b42:	461a      	mov	r2, r3
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	b10b      	cbz	r3, 8008b4c <_free_r+0x4c>
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	d9fa      	bls.n	8008b42 <_free_r+0x42>
 8008b4c:	6811      	ldr	r1, [r2, #0]
 8008b4e:	1850      	adds	r0, r2, r1
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d10b      	bne.n	8008b6c <_free_r+0x6c>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	4401      	add	r1, r0
 8008b58:	1850      	adds	r0, r2, r1
 8008b5a:	4283      	cmp	r3, r0
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	d1e0      	bne.n	8008b22 <_free_r+0x22>
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	6053      	str	r3, [r2, #4]
 8008b66:	4408      	add	r0, r1
 8008b68:	6010      	str	r0, [r2, #0]
 8008b6a:	e7da      	b.n	8008b22 <_free_r+0x22>
 8008b6c:	d902      	bls.n	8008b74 <_free_r+0x74>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	602b      	str	r3, [r5, #0]
 8008b72:	e7d6      	b.n	8008b22 <_free_r+0x22>
 8008b74:	6820      	ldr	r0, [r4, #0]
 8008b76:	1821      	adds	r1, r4, r0
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	bf04      	itt	eq
 8008b7c:	6819      	ldreq	r1, [r3, #0]
 8008b7e:	685b      	ldreq	r3, [r3, #4]
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	bf04      	itt	eq
 8008b84:	1809      	addeq	r1, r1, r0
 8008b86:	6021      	streq	r1, [r4, #0]
 8008b88:	6054      	str	r4, [r2, #4]
 8008b8a:	e7ca      	b.n	8008b22 <_free_r+0x22>
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	2000065c 	.word	0x2000065c

08008b94 <sbrk_aligned>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4e0f      	ldr	r6, [pc, #60]	@ (8008bd4 <sbrk_aligned+0x40>)
 8008b98:	460c      	mov	r4, r1
 8008b9a:	6831      	ldr	r1, [r6, #0]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b911      	cbnz	r1, 8008ba6 <sbrk_aligned+0x12>
 8008ba0:	f000 fba6 	bl	80092f0 <_sbrk_r>
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fba1 	bl	80092f0 <_sbrk_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d103      	bne.n	8008bba <sbrk_aligned+0x26>
 8008bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	1cc4      	adds	r4, r0, #3
 8008bbc:	f024 0403 	bic.w	r4, r4, #3
 8008bc0:	42a0      	cmp	r0, r4
 8008bc2:	d0f8      	beq.n	8008bb6 <sbrk_aligned+0x22>
 8008bc4:	1a21      	subs	r1, r4, r0
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 fb92 	bl	80092f0 <_sbrk_r>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d1f2      	bne.n	8008bb6 <sbrk_aligned+0x22>
 8008bd0:	e7ef      	b.n	8008bb2 <sbrk_aligned+0x1e>
 8008bd2:	bf00      	nop
 8008bd4:	20000658 	.word	0x20000658

08008bd8 <_malloc_r>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	1ccd      	adds	r5, r1, #3
 8008bde:	f025 0503 	bic.w	r5, r5, #3
 8008be2:	3508      	adds	r5, #8
 8008be4:	2d0c      	cmp	r5, #12
 8008be6:	bf38      	it	cc
 8008be8:	250c      	movcc	r5, #12
 8008bea:	2d00      	cmp	r5, #0
 8008bec:	4606      	mov	r6, r0
 8008bee:	db01      	blt.n	8008bf4 <_malloc_r+0x1c>
 8008bf0:	42a9      	cmp	r1, r5
 8008bf2:	d904      	bls.n	8008bfe <_malloc_r+0x26>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cd4 <_malloc_r+0xfc>
 8008c02:	f000 f869 	bl	8008cd8 <__malloc_lock>
 8008c06:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0a:	461c      	mov	r4, r3
 8008c0c:	bb44      	cbnz	r4, 8008c60 <_malloc_r+0x88>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff ffbf 	bl	8008b94 <sbrk_aligned>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	4604      	mov	r4, r0
 8008c1a:	d158      	bne.n	8008cce <_malloc_r+0xf6>
 8008c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c20:	4627      	mov	r7, r4
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	d143      	bne.n	8008cae <_malloc_r+0xd6>
 8008c26:	2c00      	cmp	r4, #0
 8008c28:	d04b      	beq.n	8008cc2 <_malloc_r+0xea>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4630      	mov	r0, r6
 8008c30:	eb04 0903 	add.w	r9, r4, r3
 8008c34:	f000 fb5c 	bl	80092f0 <_sbrk_r>
 8008c38:	4581      	cmp	r9, r0
 8008c3a:	d142      	bne.n	8008cc2 <_malloc_r+0xea>
 8008c3c:	6821      	ldr	r1, [r4, #0]
 8008c3e:	1a6d      	subs	r5, r5, r1
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ffa6 	bl	8008b94 <sbrk_aligned>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d03a      	beq.n	8008cc2 <_malloc_r+0xea>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	442b      	add	r3, r5
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	f8d8 3000 	ldr.w	r3, [r8]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	bb62      	cbnz	r2, 8008cb4 <_malloc_r+0xdc>
 8008c5a:	f8c8 7000 	str.w	r7, [r8]
 8008c5e:	e00f      	b.n	8008c80 <_malloc_r+0xa8>
 8008c60:	6822      	ldr	r2, [r4, #0]
 8008c62:	1b52      	subs	r2, r2, r5
 8008c64:	d420      	bmi.n	8008ca8 <_malloc_r+0xd0>
 8008c66:	2a0b      	cmp	r2, #11
 8008c68:	d917      	bls.n	8008c9a <_malloc_r+0xc2>
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	6025      	str	r5, [r4, #0]
 8008c70:	bf18      	it	ne
 8008c72:	6059      	strne	r1, [r3, #4]
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	bf08      	it	eq
 8008c78:	f8c8 1000 	streq.w	r1, [r8]
 8008c7c:	5162      	str	r2, [r4, r5]
 8008c7e:	604b      	str	r3, [r1, #4]
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f82f 	bl	8008ce4 <__malloc_unlock>
 8008c86:	f104 000b 	add.w	r0, r4, #11
 8008c8a:	1d23      	adds	r3, r4, #4
 8008c8c:	f020 0007 	bic.w	r0, r0, #7
 8008c90:	1ac2      	subs	r2, r0, r3
 8008c92:	bf1c      	itt	ne
 8008c94:	1a1b      	subne	r3, r3, r0
 8008c96:	50a3      	strne	r3, [r4, r2]
 8008c98:	e7af      	b.n	8008bfa <_malloc_r+0x22>
 8008c9a:	6862      	ldr	r2, [r4, #4]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	bf0c      	ite	eq
 8008ca0:	f8c8 2000 	streq.w	r2, [r8]
 8008ca4:	605a      	strne	r2, [r3, #4]
 8008ca6:	e7eb      	b.n	8008c80 <_malloc_r+0xa8>
 8008ca8:	4623      	mov	r3, r4
 8008caa:	6864      	ldr	r4, [r4, #4]
 8008cac:	e7ae      	b.n	8008c0c <_malloc_r+0x34>
 8008cae:	463c      	mov	r4, r7
 8008cb0:	687f      	ldr	r7, [r7, #4]
 8008cb2:	e7b6      	b.n	8008c22 <_malloc_r+0x4a>
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d1fb      	bne.n	8008cb4 <_malloc_r+0xdc>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6053      	str	r3, [r2, #4]
 8008cc0:	e7de      	b.n	8008c80 <_malloc_r+0xa8>
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 f80c 	bl	8008ce4 <__malloc_unlock>
 8008ccc:	e794      	b.n	8008bf8 <_malloc_r+0x20>
 8008cce:	6005      	str	r5, [r0, #0]
 8008cd0:	e7d6      	b.n	8008c80 <_malloc_r+0xa8>
 8008cd2:	bf00      	nop
 8008cd4:	2000065c 	.word	0x2000065c

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	@ (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f7ff bf0f 	b.w	8008afc <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20000654 	.word	0x20000654

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	@ (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f7ff bf0a 	b.w	8008afe <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	20000654 	.word	0x20000654

08008cf0 <__ssputs_r>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	688e      	ldr	r6, [r1, #8]
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	42be      	cmp	r6, r7
 8008cfa:	680b      	ldr	r3, [r1, #0]
 8008cfc:	4682      	mov	sl, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4690      	mov	r8, r2
 8008d02:	d82d      	bhi.n	8008d60 <__ssputs_r+0x70>
 8008d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d0c:	d026      	beq.n	8008d5c <__ssputs_r+0x6c>
 8008d0e:	6965      	ldr	r5, [r4, #20]
 8008d10:	6909      	ldr	r1, [r1, #16]
 8008d12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d16:	eba3 0901 	sub.w	r9, r3, r1
 8008d1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d1e:	1c7b      	adds	r3, r7, #1
 8008d20:	444b      	add	r3, r9
 8008d22:	106d      	asrs	r5, r5, #1
 8008d24:	429d      	cmp	r5, r3
 8008d26:	bf38      	it	cc
 8008d28:	461d      	movcc	r5, r3
 8008d2a:	0553      	lsls	r3, r2, #21
 8008d2c:	d527      	bpl.n	8008d7e <__ssputs_r+0x8e>
 8008d2e:	4629      	mov	r1, r5
 8008d30:	f7ff ff52 	bl	8008bd8 <_malloc_r>
 8008d34:	4606      	mov	r6, r0
 8008d36:	b360      	cbz	r0, 8008d92 <__ssputs_r+0xa2>
 8008d38:	6921      	ldr	r1, [r4, #16]
 8008d3a:	464a      	mov	r2, r9
 8008d3c:	f000 fae8 	bl	8009310 <memcpy>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	6126      	str	r6, [r4, #16]
 8008d4e:	6165      	str	r5, [r4, #20]
 8008d50:	444e      	add	r6, r9
 8008d52:	eba5 0509 	sub.w	r5, r5, r9
 8008d56:	6026      	str	r6, [r4, #0]
 8008d58:	60a5      	str	r5, [r4, #8]
 8008d5a:	463e      	mov	r6, r7
 8008d5c:	42be      	cmp	r6, r7
 8008d5e:	d900      	bls.n	8008d62 <__ssputs_r+0x72>
 8008d60:	463e      	mov	r6, r7
 8008d62:	6820      	ldr	r0, [r4, #0]
 8008d64:	4632      	mov	r2, r6
 8008d66:	4641      	mov	r1, r8
 8008d68:	f000 faa8 	bl	80092bc <memmove>
 8008d6c:	68a3      	ldr	r3, [r4, #8]
 8008d6e:	1b9b      	subs	r3, r3, r6
 8008d70:	60a3      	str	r3, [r4, #8]
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	4433      	add	r3, r6
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	462a      	mov	r2, r5
 8008d80:	f000 fad4 	bl	800932c <_realloc_r>
 8008d84:	4606      	mov	r6, r0
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d1e0      	bne.n	8008d4c <__ssputs_r+0x5c>
 8008d8a:	6921      	ldr	r1, [r4, #16]
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f7ff feb7 	bl	8008b00 <_free_r>
 8008d92:	230c      	movs	r3, #12
 8008d94:	f8ca 3000 	str.w	r3, [sl]
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e7e9      	b.n	8008d7a <__ssputs_r+0x8a>
	...

08008da8 <_svfiprintf_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4698      	mov	r8, r3
 8008dae:	898b      	ldrh	r3, [r1, #12]
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	b09d      	sub	sp, #116	@ 0x74
 8008db4:	4607      	mov	r7, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	d510      	bpl.n	8008dde <_svfiprintf_r+0x36>
 8008dbc:	690b      	ldr	r3, [r1, #16]
 8008dbe:	b973      	cbnz	r3, 8008dde <_svfiprintf_r+0x36>
 8008dc0:	2140      	movs	r1, #64	@ 0x40
 8008dc2:	f7ff ff09 	bl	8008bd8 <_malloc_r>
 8008dc6:	6028      	str	r0, [r5, #0]
 8008dc8:	6128      	str	r0, [r5, #16]
 8008dca:	b930      	cbnz	r0, 8008dda <_svfiprintf_r+0x32>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	b01d      	add	sp, #116	@ 0x74
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	2340      	movs	r3, #64	@ 0x40
 8008ddc:	616b      	str	r3, [r5, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de2:	2320      	movs	r3, #32
 8008de4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dec:	2330      	movs	r3, #48	@ 0x30
 8008dee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f8c <_svfiprintf_r+0x1e4>
 8008df2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008df6:	f04f 0901 	mov.w	r9, #1
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	469a      	mov	sl, r3
 8008dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e02:	b10a      	cbz	r2, 8008e08 <_svfiprintf_r+0x60>
 8008e04:	2a25      	cmp	r2, #37	@ 0x25
 8008e06:	d1f9      	bne.n	8008dfc <_svfiprintf_r+0x54>
 8008e08:	ebba 0b04 	subs.w	fp, sl, r4
 8008e0c:	d00b      	beq.n	8008e26 <_svfiprintf_r+0x7e>
 8008e0e:	465b      	mov	r3, fp
 8008e10:	4622      	mov	r2, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ff6b 	bl	8008cf0 <__ssputs_r>
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f000 80a7 	beq.w	8008f6e <_svfiprintf_r+0x1c6>
 8008e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e22:	445a      	add	r2, fp
 8008e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e26:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 809f 	beq.w	8008f6e <_svfiprintf_r+0x1c6>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f04f 32ff 	mov.w	r2, #4294967295
 8008e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3a:	f10a 0a01 	add.w	sl, sl, #1
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	9307      	str	r3, [sp, #28]
 8008e42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e46:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e48:	4654      	mov	r4, sl
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e50:	484e      	ldr	r0, [pc, #312]	@ (8008f8c <_svfiprintf_r+0x1e4>)
 8008e52:	f7f7 f9bd 	bl	80001d0 <memchr>
 8008e56:	9a04      	ldr	r2, [sp, #16]
 8008e58:	b9d8      	cbnz	r0, 8008e92 <_svfiprintf_r+0xea>
 8008e5a:	06d0      	lsls	r0, r2, #27
 8008e5c:	bf44      	itt	mi
 8008e5e:	2320      	movmi	r3, #32
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e64:	0711      	lsls	r1, r2, #28
 8008e66:	bf44      	itt	mi
 8008e68:	232b      	movmi	r3, #43	@ 0x2b
 8008e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e74:	d015      	beq.n	8008ea2 <_svfiprintf_r+0xfa>
 8008e76:	9a07      	ldr	r2, [sp, #28]
 8008e78:	4654      	mov	r4, sl
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4621      	mov	r1, r4
 8008e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e86:	3b30      	subs	r3, #48	@ 0x30
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d94b      	bls.n	8008f24 <_svfiprintf_r+0x17c>
 8008e8c:	b1b0      	cbz	r0, 8008ebc <_svfiprintf_r+0x114>
 8008e8e:	9207      	str	r2, [sp, #28]
 8008e90:	e014      	b.n	8008ebc <_svfiprintf_r+0x114>
 8008e92:	eba0 0308 	sub.w	r3, r0, r8
 8008e96:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	46a2      	mov	sl, r4
 8008ea0:	e7d2      	b.n	8008e48 <_svfiprintf_r+0xa0>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	9103      	str	r1, [sp, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbb      	ittet	lt
 8008eae:	425b      	neglt	r3, r3
 8008eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb4:	9307      	strge	r3, [sp, #28]
 8008eb6:	9307      	strlt	r3, [sp, #28]
 8008eb8:	bfb8      	it	lt
 8008eba:	9204      	strlt	r2, [sp, #16]
 8008ebc:	7823      	ldrb	r3, [r4, #0]
 8008ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ec0:	d10a      	bne.n	8008ed8 <_svfiprintf_r+0x130>
 8008ec2:	7863      	ldrb	r3, [r4, #1]
 8008ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec6:	d132      	bne.n	8008f2e <_svfiprintf_r+0x186>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9203      	str	r2, [sp, #12]
 8008ed0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ed4:	3402      	adds	r4, #2
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f9c <_svfiprintf_r+0x1f4>
 8008edc:	7821      	ldrb	r1, [r4, #0]
 8008ede:	2203      	movs	r2, #3
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	f7f7 f975 	bl	80001d0 <memchr>
 8008ee6:	b138      	cbz	r0, 8008ef8 <_svfiprintf_r+0x150>
 8008ee8:	9b04      	ldr	r3, [sp, #16]
 8008eea:	eba0 000a 	sub.w	r0, r0, sl
 8008eee:	2240      	movs	r2, #64	@ 0x40
 8008ef0:	4082      	lsls	r2, r0
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	3401      	adds	r4, #1
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	4824      	ldr	r0, [pc, #144]	@ (8008f90 <_svfiprintf_r+0x1e8>)
 8008efe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f02:	2206      	movs	r2, #6
 8008f04:	f7f7 f964 	bl	80001d0 <memchr>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d036      	beq.n	8008f7a <_svfiprintf_r+0x1d2>
 8008f0c:	4b21      	ldr	r3, [pc, #132]	@ (8008f94 <_svfiprintf_r+0x1ec>)
 8008f0e:	bb1b      	cbnz	r3, 8008f58 <_svfiprintf_r+0x1b0>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	3307      	adds	r3, #7
 8008f14:	f023 0307 	bic.w	r3, r3, #7
 8008f18:	3308      	adds	r3, #8
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1e:	4433      	add	r3, r6
 8008f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f22:	e76a      	b.n	8008dfa <_svfiprintf_r+0x52>
 8008f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f28:	460c      	mov	r4, r1
 8008f2a:	2001      	movs	r0, #1
 8008f2c:	e7a8      	b.n	8008e80 <_svfiprintf_r+0xd8>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	3401      	adds	r4, #1
 8008f32:	9305      	str	r3, [sp, #20]
 8008f34:	4619      	mov	r1, r3
 8008f36:	f04f 0c0a 	mov.w	ip, #10
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f40:	3a30      	subs	r2, #48	@ 0x30
 8008f42:	2a09      	cmp	r2, #9
 8008f44:	d903      	bls.n	8008f4e <_svfiprintf_r+0x1a6>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0c6      	beq.n	8008ed8 <_svfiprintf_r+0x130>
 8008f4a:	9105      	str	r1, [sp, #20]
 8008f4c:	e7c4      	b.n	8008ed8 <_svfiprintf_r+0x130>
 8008f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f52:	4604      	mov	r4, r0
 8008f54:	2301      	movs	r3, #1
 8008f56:	e7f0      	b.n	8008f3a <_svfiprintf_r+0x192>
 8008f58:	ab03      	add	r3, sp, #12
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f98 <_svfiprintf_r+0x1f0>)
 8008f60:	a904      	add	r1, sp, #16
 8008f62:	4638      	mov	r0, r7
 8008f64:	f3af 8000 	nop.w
 8008f68:	1c42      	adds	r2, r0, #1
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	d1d6      	bne.n	8008f1c <_svfiprintf_r+0x174>
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	065b      	lsls	r3, r3, #25
 8008f72:	f53f af2d 	bmi.w	8008dd0 <_svfiprintf_r+0x28>
 8008f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f78:	e72c      	b.n	8008dd4 <_svfiprintf_r+0x2c>
 8008f7a:	ab03      	add	r3, sp, #12
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4b05      	ldr	r3, [pc, #20]	@ (8008f98 <_svfiprintf_r+0x1f0>)
 8008f82:	a904      	add	r1, sp, #16
 8008f84:	4638      	mov	r0, r7
 8008f86:	f000 f879 	bl	800907c <_printf_i>
 8008f8a:	e7ed      	b.n	8008f68 <_svfiprintf_r+0x1c0>
 8008f8c:	080094a8 	.word	0x080094a8
 8008f90:	080094b2 	.word	0x080094b2
 8008f94:	00000000 	.word	0x00000000
 8008f98:	08008cf1 	.word	0x08008cf1
 8008f9c:	080094ae 	.word	0x080094ae

08008fa0 <_printf_common>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	4698      	mov	r8, r3
 8008fa8:	688a      	ldr	r2, [r1, #8]
 8008faa:	690b      	ldr	r3, [r1, #16]
 8008fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	bfb8      	it	lt
 8008fb4:	4613      	movlt	r3, r2
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_printf_common+0x26>
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	0699      	lsls	r1, r3, #26
 8008fca:	bf42      	ittt	mi
 8008fcc:	6833      	ldrmi	r3, [r6, #0]
 8008fce:	3302      	addmi	r3, #2
 8008fd0:	6033      	strmi	r3, [r6, #0]
 8008fd2:	6825      	ldr	r5, [r4, #0]
 8008fd4:	f015 0506 	ands.w	r5, r5, #6
 8008fd8:	d106      	bne.n	8008fe8 <_printf_common+0x48>
 8008fda:	f104 0a19 	add.w	sl, r4, #25
 8008fde:	68e3      	ldr	r3, [r4, #12]
 8008fe0:	6832      	ldr	r2, [r6, #0]
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	42ab      	cmp	r3, r5
 8008fe6:	dc26      	bgt.n	8009036 <_printf_common+0x96>
 8008fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	3b00      	subs	r3, #0
 8008ff0:	bf18      	it	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	0692      	lsls	r2, r2, #26
 8008ff6:	d42b      	bmi.n	8009050 <_printf_common+0xb0>
 8008ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ffc:	4641      	mov	r1, r8
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c8      	blx	r9
 8009002:	3001      	adds	r0, #1
 8009004:	d01e      	beq.n	8009044 <_printf_common+0xa4>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	6922      	ldr	r2, [r4, #16]
 800900a:	f003 0306 	and.w	r3, r3, #6
 800900e:	2b04      	cmp	r3, #4
 8009010:	bf02      	ittt	eq
 8009012:	68e5      	ldreq	r5, [r4, #12]
 8009014:	6833      	ldreq	r3, [r6, #0]
 8009016:	1aed      	subeq	r5, r5, r3
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	bf0c      	ite	eq
 800901c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009020:	2500      	movne	r5, #0
 8009022:	4293      	cmp	r3, r2
 8009024:	bfc4      	itt	gt
 8009026:	1a9b      	subgt	r3, r3, r2
 8009028:	18ed      	addgt	r5, r5, r3
 800902a:	2600      	movs	r6, #0
 800902c:	341a      	adds	r4, #26
 800902e:	42b5      	cmp	r5, r6
 8009030:	d11a      	bne.n	8009068 <_printf_common+0xc8>
 8009032:	2000      	movs	r0, #0
 8009034:	e008      	b.n	8009048 <_printf_common+0xa8>
 8009036:	2301      	movs	r3, #1
 8009038:	4652      	mov	r2, sl
 800903a:	4641      	mov	r1, r8
 800903c:	4638      	mov	r0, r7
 800903e:	47c8      	blx	r9
 8009040:	3001      	adds	r0, #1
 8009042:	d103      	bne.n	800904c <_printf_common+0xac>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	3501      	adds	r5, #1
 800904e:	e7c6      	b.n	8008fde <_printf_common+0x3e>
 8009050:	18e1      	adds	r1, r4, r3
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	2030      	movs	r0, #48	@ 0x30
 8009056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800905a:	4422      	add	r2, r4
 800905c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009064:	3302      	adds	r3, #2
 8009066:	e7c7      	b.n	8008ff8 <_printf_common+0x58>
 8009068:	2301      	movs	r3, #1
 800906a:	4622      	mov	r2, r4
 800906c:	4641      	mov	r1, r8
 800906e:	4638      	mov	r0, r7
 8009070:	47c8      	blx	r9
 8009072:	3001      	adds	r0, #1
 8009074:	d0e6      	beq.n	8009044 <_printf_common+0xa4>
 8009076:	3601      	adds	r6, #1
 8009078:	e7d9      	b.n	800902e <_printf_common+0x8e>
	...

0800907c <_printf_i>:
 800907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	7e0f      	ldrb	r7, [r1, #24]
 8009082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009084:	2f78      	cmp	r7, #120	@ 0x78
 8009086:	4691      	mov	r9, r2
 8009088:	4680      	mov	r8, r0
 800908a:	460c      	mov	r4, r1
 800908c:	469a      	mov	sl, r3
 800908e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009092:	d807      	bhi.n	80090a4 <_printf_i+0x28>
 8009094:	2f62      	cmp	r7, #98	@ 0x62
 8009096:	d80a      	bhi.n	80090ae <_printf_i+0x32>
 8009098:	2f00      	cmp	r7, #0
 800909a:	f000 80d2 	beq.w	8009242 <_printf_i+0x1c6>
 800909e:	2f58      	cmp	r7, #88	@ 0x58
 80090a0:	f000 80b9 	beq.w	8009216 <_printf_i+0x19a>
 80090a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090ac:	e03a      	b.n	8009124 <_printf_i+0xa8>
 80090ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090b2:	2b15      	cmp	r3, #21
 80090b4:	d8f6      	bhi.n	80090a4 <_printf_i+0x28>
 80090b6:	a101      	add	r1, pc, #4	@ (adr r1, 80090bc <_printf_i+0x40>)
 80090b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009129 	.word	0x08009129
 80090c4:	080090a5 	.word	0x080090a5
 80090c8:	080090a5 	.word	0x080090a5
 80090cc:	080090a5 	.word	0x080090a5
 80090d0:	080090a5 	.word	0x080090a5
 80090d4:	08009129 	.word	0x08009129
 80090d8:	080090a5 	.word	0x080090a5
 80090dc:	080090a5 	.word	0x080090a5
 80090e0:	080090a5 	.word	0x080090a5
 80090e4:	080090a5 	.word	0x080090a5
 80090e8:	08009229 	.word	0x08009229
 80090ec:	08009153 	.word	0x08009153
 80090f0:	080091e3 	.word	0x080091e3
 80090f4:	080090a5 	.word	0x080090a5
 80090f8:	080090a5 	.word	0x080090a5
 80090fc:	0800924b 	.word	0x0800924b
 8009100:	080090a5 	.word	0x080090a5
 8009104:	08009153 	.word	0x08009153
 8009108:	080090a5 	.word	0x080090a5
 800910c:	080090a5 	.word	0x080090a5
 8009110:	080091eb 	.word	0x080091eb
 8009114:	6833      	ldr	r3, [r6, #0]
 8009116:	1d1a      	adds	r2, r3, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6032      	str	r2, [r6, #0]
 800911c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009124:	2301      	movs	r3, #1
 8009126:	e09d      	b.n	8009264 <_printf_i+0x1e8>
 8009128:	6833      	ldr	r3, [r6, #0]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	6031      	str	r1, [r6, #0]
 8009130:	0606      	lsls	r6, r0, #24
 8009132:	d501      	bpl.n	8009138 <_printf_i+0xbc>
 8009134:	681d      	ldr	r5, [r3, #0]
 8009136:	e003      	b.n	8009140 <_printf_i+0xc4>
 8009138:	0645      	lsls	r5, r0, #25
 800913a:	d5fb      	bpl.n	8009134 <_printf_i+0xb8>
 800913c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009140:	2d00      	cmp	r5, #0
 8009142:	da03      	bge.n	800914c <_printf_i+0xd0>
 8009144:	232d      	movs	r3, #45	@ 0x2d
 8009146:	426d      	negs	r5, r5
 8009148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800914c:	4859      	ldr	r0, [pc, #356]	@ (80092b4 <_printf_i+0x238>)
 800914e:	230a      	movs	r3, #10
 8009150:	e011      	b.n	8009176 <_printf_i+0xfa>
 8009152:	6821      	ldr	r1, [r4, #0]
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	0608      	lsls	r0, r1, #24
 8009158:	f853 5b04 	ldr.w	r5, [r3], #4
 800915c:	d402      	bmi.n	8009164 <_printf_i+0xe8>
 800915e:	0649      	lsls	r1, r1, #25
 8009160:	bf48      	it	mi
 8009162:	b2ad      	uxthmi	r5, r5
 8009164:	2f6f      	cmp	r7, #111	@ 0x6f
 8009166:	4853      	ldr	r0, [pc, #332]	@ (80092b4 <_printf_i+0x238>)
 8009168:	6033      	str	r3, [r6, #0]
 800916a:	bf14      	ite	ne
 800916c:	230a      	movne	r3, #10
 800916e:	2308      	moveq	r3, #8
 8009170:	2100      	movs	r1, #0
 8009172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009176:	6866      	ldr	r6, [r4, #4]
 8009178:	60a6      	str	r6, [r4, #8]
 800917a:	2e00      	cmp	r6, #0
 800917c:	bfa2      	ittt	ge
 800917e:	6821      	ldrge	r1, [r4, #0]
 8009180:	f021 0104 	bicge.w	r1, r1, #4
 8009184:	6021      	strge	r1, [r4, #0]
 8009186:	b90d      	cbnz	r5, 800918c <_printf_i+0x110>
 8009188:	2e00      	cmp	r6, #0
 800918a:	d04b      	beq.n	8009224 <_printf_i+0x1a8>
 800918c:	4616      	mov	r6, r2
 800918e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009192:	fb03 5711 	mls	r7, r3, r1, r5
 8009196:	5dc7      	ldrb	r7, [r0, r7]
 8009198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800919c:	462f      	mov	r7, r5
 800919e:	42bb      	cmp	r3, r7
 80091a0:	460d      	mov	r5, r1
 80091a2:	d9f4      	bls.n	800918e <_printf_i+0x112>
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d10b      	bne.n	80091c0 <_printf_i+0x144>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07df      	lsls	r7, r3, #31
 80091ac:	d508      	bpl.n	80091c0 <_printf_i+0x144>
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4299      	cmp	r1, r3
 80091b4:	bfde      	ittt	le
 80091b6:	2330      	movle	r3, #48	@ 0x30
 80091b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091c0:	1b92      	subs	r2, r2, r6
 80091c2:	6122      	str	r2, [r4, #16]
 80091c4:	f8cd a000 	str.w	sl, [sp]
 80091c8:	464b      	mov	r3, r9
 80091ca:	aa03      	add	r2, sp, #12
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff fee6 	bl	8008fa0 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d14a      	bne.n	800926e <_printf_i+0x1f2>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b004      	add	sp, #16
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	f043 0320 	orr.w	r3, r3, #32
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	4833      	ldr	r0, [pc, #204]	@ (80092b8 <_printf_i+0x23c>)
 80091ec:	2778      	movs	r7, #120	@ 0x78
 80091ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	6831      	ldr	r1, [r6, #0]
 80091f6:	061f      	lsls	r7, r3, #24
 80091f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80091fc:	d402      	bmi.n	8009204 <_printf_i+0x188>
 80091fe:	065f      	lsls	r7, r3, #25
 8009200:	bf48      	it	mi
 8009202:	b2ad      	uxthmi	r5, r5
 8009204:	6031      	str	r1, [r6, #0]
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	bf44      	itt	mi
 800920a:	f043 0320 	orrmi.w	r3, r3, #32
 800920e:	6023      	strmi	r3, [r4, #0]
 8009210:	b11d      	cbz	r5, 800921a <_printf_i+0x19e>
 8009212:	2310      	movs	r3, #16
 8009214:	e7ac      	b.n	8009170 <_printf_i+0xf4>
 8009216:	4827      	ldr	r0, [pc, #156]	@ (80092b4 <_printf_i+0x238>)
 8009218:	e7e9      	b.n	80091ee <_printf_i+0x172>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	f023 0320 	bic.w	r3, r3, #32
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	e7f6      	b.n	8009212 <_printf_i+0x196>
 8009224:	4616      	mov	r6, r2
 8009226:	e7bd      	b.n	80091a4 <_printf_i+0x128>
 8009228:	6833      	ldr	r3, [r6, #0]
 800922a:	6825      	ldr	r5, [r4, #0]
 800922c:	6961      	ldr	r1, [r4, #20]
 800922e:	1d18      	adds	r0, r3, #4
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	062e      	lsls	r6, r5, #24
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	d501      	bpl.n	800923c <_printf_i+0x1c0>
 8009238:	6019      	str	r1, [r3, #0]
 800923a:	e002      	b.n	8009242 <_printf_i+0x1c6>
 800923c:	0668      	lsls	r0, r5, #25
 800923e:	d5fb      	bpl.n	8009238 <_printf_i+0x1bc>
 8009240:	8019      	strh	r1, [r3, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	4616      	mov	r6, r2
 8009248:	e7bc      	b.n	80091c4 <_printf_i+0x148>
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	1d1a      	adds	r2, r3, #4
 800924e:	6032      	str	r2, [r6, #0]
 8009250:	681e      	ldr	r6, [r3, #0]
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	2100      	movs	r1, #0
 8009256:	4630      	mov	r0, r6
 8009258:	f7f6 ffba 	bl	80001d0 <memchr>
 800925c:	b108      	cbz	r0, 8009262 <_printf_i+0x1e6>
 800925e:	1b80      	subs	r0, r0, r6
 8009260:	6060      	str	r0, [r4, #4]
 8009262:	6863      	ldr	r3, [r4, #4]
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	2300      	movs	r3, #0
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800926c:	e7aa      	b.n	80091c4 <_printf_i+0x148>
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	4632      	mov	r2, r6
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	47d0      	blx	sl
 8009278:	3001      	adds	r0, #1
 800927a:	d0ad      	beq.n	80091d8 <_printf_i+0x15c>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	079b      	lsls	r3, r3, #30
 8009280:	d413      	bmi.n	80092aa <_printf_i+0x22e>
 8009282:	68e0      	ldr	r0, [r4, #12]
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	4298      	cmp	r0, r3
 8009288:	bfb8      	it	lt
 800928a:	4618      	movlt	r0, r3
 800928c:	e7a6      	b.n	80091dc <_printf_i+0x160>
 800928e:	2301      	movs	r3, #1
 8009290:	4632      	mov	r2, r6
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	47d0      	blx	sl
 8009298:	3001      	adds	r0, #1
 800929a:	d09d      	beq.n	80091d8 <_printf_i+0x15c>
 800929c:	3501      	adds	r5, #1
 800929e:	68e3      	ldr	r3, [r4, #12]
 80092a0:	9903      	ldr	r1, [sp, #12]
 80092a2:	1a5b      	subs	r3, r3, r1
 80092a4:	42ab      	cmp	r3, r5
 80092a6:	dcf2      	bgt.n	800928e <_printf_i+0x212>
 80092a8:	e7eb      	b.n	8009282 <_printf_i+0x206>
 80092aa:	2500      	movs	r5, #0
 80092ac:	f104 0619 	add.w	r6, r4, #25
 80092b0:	e7f5      	b.n	800929e <_printf_i+0x222>
 80092b2:	bf00      	nop
 80092b4:	080094b9 	.word	0x080094b9
 80092b8:	080094ca 	.word	0x080094ca

080092bc <memmove>:
 80092bc:	4288      	cmp	r0, r1
 80092be:	b510      	push	{r4, lr}
 80092c0:	eb01 0402 	add.w	r4, r1, r2
 80092c4:	d902      	bls.n	80092cc <memmove+0x10>
 80092c6:	4284      	cmp	r4, r0
 80092c8:	4623      	mov	r3, r4
 80092ca:	d807      	bhi.n	80092dc <memmove+0x20>
 80092cc:	1e43      	subs	r3, r0, #1
 80092ce:	42a1      	cmp	r1, r4
 80092d0:	d008      	beq.n	80092e4 <memmove+0x28>
 80092d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092da:	e7f8      	b.n	80092ce <memmove+0x12>
 80092dc:	4402      	add	r2, r0
 80092de:	4601      	mov	r1, r0
 80092e0:	428a      	cmp	r2, r1
 80092e2:	d100      	bne.n	80092e6 <memmove+0x2a>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ee:	e7f7      	b.n	80092e0 <memmove+0x24>

080092f0 <_sbrk_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d06      	ldr	r5, [pc, #24]	@ (800930c <_sbrk_r+0x1c>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7f8 fd24 	bl	8001d48 <_sbrk>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_sbrk_r+0x1a>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_sbrk_r+0x1a>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000650 	.word	0x20000650

08009310 <memcpy>:
 8009310:	440a      	add	r2, r1
 8009312:	4291      	cmp	r1, r2
 8009314:	f100 33ff 	add.w	r3, r0, #4294967295
 8009318:	d100      	bne.n	800931c <memcpy+0xc>
 800931a:	4770      	bx	lr
 800931c:	b510      	push	{r4, lr}
 800931e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009326:	4291      	cmp	r1, r2
 8009328:	d1f9      	bne.n	800931e <memcpy+0xe>
 800932a:	bd10      	pop	{r4, pc}

0800932c <_realloc_r>:
 800932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	4680      	mov	r8, r0
 8009332:	4615      	mov	r5, r2
 8009334:	460c      	mov	r4, r1
 8009336:	b921      	cbnz	r1, 8009342 <_realloc_r+0x16>
 8009338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	4611      	mov	r1, r2
 800933e:	f7ff bc4b 	b.w	8008bd8 <_malloc_r>
 8009342:	b92a      	cbnz	r2, 8009350 <_realloc_r+0x24>
 8009344:	f7ff fbdc 	bl	8008b00 <_free_r>
 8009348:	2400      	movs	r4, #0
 800934a:	4620      	mov	r0, r4
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	f000 f81a 	bl	8009388 <_malloc_usable_size_r>
 8009354:	4285      	cmp	r5, r0
 8009356:	4606      	mov	r6, r0
 8009358:	d802      	bhi.n	8009360 <_realloc_r+0x34>
 800935a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800935e:	d8f4      	bhi.n	800934a <_realloc_r+0x1e>
 8009360:	4629      	mov	r1, r5
 8009362:	4640      	mov	r0, r8
 8009364:	f7ff fc38 	bl	8008bd8 <_malloc_r>
 8009368:	4607      	mov	r7, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d0ec      	beq.n	8009348 <_realloc_r+0x1c>
 800936e:	42b5      	cmp	r5, r6
 8009370:	462a      	mov	r2, r5
 8009372:	4621      	mov	r1, r4
 8009374:	bf28      	it	cs
 8009376:	4632      	movcs	r2, r6
 8009378:	f7ff ffca 	bl	8009310 <memcpy>
 800937c:	4621      	mov	r1, r4
 800937e:	4640      	mov	r0, r8
 8009380:	f7ff fbbe 	bl	8008b00 <_free_r>
 8009384:	463c      	mov	r4, r7
 8009386:	e7e0      	b.n	800934a <_realloc_r+0x1e>

08009388 <_malloc_usable_size_r>:
 8009388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938c:	1f18      	subs	r0, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfbc      	itt	lt
 8009392:	580b      	ldrlt	r3, [r1, r0]
 8009394:	18c0      	addlt	r0, r0, r3
 8009396:	4770      	bx	lr

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
